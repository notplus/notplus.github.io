<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>蓝桥杯 2019省赛 C/C++ A TH</title>
      <link href="/2021/04/16/lanqiao-2019p-ca-th/"/>
      <url>/2021/04/16/lanqiao-2019p-ca-th/</url>
      
        <content type="html"><![CDATA[<h1 id="蓝桥杯-2019省赛-C-C-A-TH"><a href="#蓝桥杯-2019省赛-C-C-A-TH" class="headerlink" title="蓝桥杯 2019省赛 C/C++ A TH"></a>蓝桥杯 2019省赛 C/C++ A TH</h1><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p>并查集</p><h2 id="题目¶"><a href="#题目¶" class="headerlink" title="题目¶"></a>题目<a href="https://www.acwing.com/problem/content/description/1244/" target="_blank" rel="noopener">¶</a></h2><blockquote><p>给定一个长度为 NN 的数组 A=[A1,A2,⋅⋅⋅AN]A=[A1,A2,···AN]，数组中有可能有重复出现的整数。</p><p>现在小明要按以下方法将其修改为没有重复整数的数组。</p><p>小明会依次修改 A2,A3,⋅⋅⋅,ANA2,A3,···,AN。</p><p>当修改 AiAi 时，小明会检查 AiAi 是否在 A1∼Ai−1A1∼Ai−1 中出现过。</p><p>如果出现过，则小明会给 AiAi 加上 11；如果新的 AiAi 仍在之前出现过，小明会持续给 AiAi 加 11，直到 AiAi 没有在 A1∼Ai−1A1∼Ai−1 中出现过。</p><p>当 ANAN 也经过上述修改之后，显然 AA 数组中就没有重复的整数了。</p><p>现在给定初始的 AA 数组，请你计算出最终的 AA 数组。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含一个整数 NN。</p><p>第二行包含 NN 个整数 A1,A2,⋅⋅⋅,ANA1,A2,···,AN。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出 NN 个整数，依次是最终的 A1,A2,⋅⋅⋅,ANA1,A2,···,AN。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤N≤1051≤N≤105,<br>1≤Ai≤1061≤Ai≤106</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><pre><code>52 1 1 3 4</code></pre><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><pre><code>2 1 3 4 5</code></pre></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>考虑并查集，由于该A数据范围为1<del>1e6，可以初始化一个1</del>1e6的数组，数组元素为下标，即每棵树的根节点都是自身，处理输入数字，通过递归找到根节点，并修改数组内容+1，即指向后一棵树，</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> MAXN 1000100</span><span class="token keyword">int</span> N<span class="token punctuation">;</span><span class="token keyword">int</span> p<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">!=</span> x<span class="token punctuation">)</span>        p<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MAXN<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> t<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        t <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> t <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 错误 超时</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;set></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> N<span class="token punctuation">;</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> s<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> t<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">!=</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            t<span class="token operator">++</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Lanqiao </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥杯 2018省赛 C/C++ B T6</title>
      <link href="/2021/04/16/lanqiao-2018p-cb-t6/"/>
      <url>/2021/04/16/lanqiao-2018p-cb-t6/</url>
      
        <content type="html"><![CDATA[<h1 id="蓝桥杯-2018省赛-C-C-A-T6"><a href="#蓝桥杯-2018省赛-C-C-A-T6" class="headerlink" title="蓝桥杯 2018省赛 C/C++ A T6"></a>蓝桥杯 2018省赛 C/C++ A T6</h1><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p>二分</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><blockquote><p>标题：递增三元组</p><p>给定三个整数数组<br>A = [A1, A2, … AN],<br>B = [B1, B2, … BN],<br>C = [C1, C2, … CN]，<br>请你统计有多少个三元组(i, j, k) 满足：</p><ol><li>1 &lt;= i, j, k &lt;= N  </li><li>Ai &lt; Bj &lt; Ck  </li></ol><p>【输入格式】<br>第一行包含一个整数N。<br>第二行包含N个整数A1, A2, … AN。<br>第三行包含N个整数B1, B2, … BN。<br>第四行包含N个整数C1, C2, … CN。</p><p>对于30%的数据，1 &lt;= N &lt;= 100<br>对于60%的数据，1 &lt;= N &lt;= 1000<br>对于100%的数据，1 &lt;= N &lt;= 100000 0 &lt;= Ai, Bi, Ci &lt;= 100000 </p><p>【输出格式】<br>一个整数表示答案</p><p>【样例输入】<br>3<br>1 1 1<br>2 2 2<br>3 3 3</p><p>【样例输出】<br>27 </p><p>资源约定：<br>峰值内存消耗（含虚拟机） &lt; 256M<br>CPU消耗  &lt; 1000ms</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>遍历B数组，通过二分搜索找到A数组第一个大于等于B[i]的下标，同样通过二分搜索找到C数组最后一个小于等于B[i]的下标，需要注意设置起始左右位置为<code>0</code>和<code>N</code>，可以判断找不到的方向，最后ans加上A下标*(N-1-C下标)，当A下标为-1或C下标为N时<code>continue</code>。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> MAXN 100010</span><span class="token keyword">int</span> A<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span> B<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span> C<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> N<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">FindFirstMoreNum</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> right <span class="token operator">=</span> N<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">>=</span> n<span class="token punctuation">)</span>            right <span class="token operator">=</span> mid<span class="token punctuation">;</span>        <span class="token keyword">else</span>            left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> left<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">FindLastLessNum</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> right <span class="token operator">=</span> N<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>C<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> n<span class="token punctuation">)</span>            left <span class="token operator">=</span> mid<span class="token punctuation">;</span>        <span class="token keyword">else</span>            right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> left<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>B<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>C<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> A <span class="token operator">+</span> N<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>B<span class="token punctuation">,</span> B <span class="token operator">+</span> N<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>C<span class="token punctuation">,</span> C <span class="token operator">+</span> N<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">FindFirstMoreNum</span><span class="token punctuation">(</span>B<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token function">FindLastLessNum</span><span class="token punctuation">(</span>B<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> k <span class="token operator">==</span> N<span class="token punctuation">)</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>i <span class="token operator">*</span> <span class="token punctuation">(</span>N <span class="token operator">-</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%Ld"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Lanqiao </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥杯 2019省赛 C/C++ A TG</title>
      <link href="/2021/04/15/lanqiao-2019p-ca-tg/"/>
      <url>/2021/04/15/lanqiao-2019p-ca-tg/</url>
      
        <content type="html"><![CDATA[<h1 id="蓝桥杯-2019省赛-C-C-A-TG"><a href="#蓝桥杯-2019省赛-C-C-A-TG" class="headerlink" title="蓝桥杯 2019省赛 C/C++ A TG"></a>蓝桥杯 2019省赛 C/C++ A TG</h1><h2 id="题目¶"><a href="#题目¶" class="headerlink" title="题目¶"></a>题目<a href="https://www.acwing.com/problem/content/description/1243/" target="_blank" rel="noopener">¶</a></h2><blockquote><p>“饱了么”外卖系统中维护着 NN 家外卖店，编号 1∼N1∼N。</p><p>每家外卖店都有一个优先级，初始时 (00 时刻) 优先级都为 00。</p><p>每经过 11 个时间单位，如果外卖店没有订单，则优先级会减少 11，最低减到 00；而如果外卖店有订单，则优先级不减反加，每有一单优先级加 22。</p><p>如果某家外卖店某时刻优先级大于 55，则会被系统加入优先缓存中；如果优先级小于等于 33，则会被清除出优先缓存。</p><p>给定 TT 时刻以内的 MM 条订单信息，请你计算 TT 时刻时有多少外卖店在优先缓存中。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含 33 个整数 N,M,TN,M,T。</p><p>以下 MM 行每行包含两个整数 tsts 和 idid，表示 tsts 时刻编号 idid 的外卖店收到一个订单。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一个整数代表答案。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤N,M,T≤10^5,<br>1≤ts≤T,1≤ts≤T,<br>1≤id≤N,1≤id≤N</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><pre><code>2 6 61 15 23 16 22 16 2</code></pre><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><pre><code>1</code></pre><h4 id="样例解释"><a href="#样例解释" class="headerlink" title="样例解释"></a>样例解释</h4><p>6 时刻时，1号店优先级降到 3，被移除出优先缓存；2 号店优先级升到 6，加入优先缓存。</p><p>所以是有 1家店 (2 号) 在优先缓存中。</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>对于该问题，假设$t_1$、$t_2$、$t_3$时刻有订单，并且$t_1\le t_2 \le t_3 &lt;T$，则需要分别考虑$1\sim t_1-1$ 、$t_1+1 \sim t_2-1$、$t_2+1 \sim t_3-1$、$t_3+1 \sim T$和$t_1$、$t_2$、$t_3$ 、$T$两部分，前一部分是没有订单的部分，需要减去这些时刻*1，后一部分是有订单的部分，需要加上2*订单数（考虑到同一时刻有多个订单）。将订单信息按照时间排序，相同时间按照商店id排序。接着for循环遍历订单，找到相同的订单（时间、商店相同），处理订单时间$t-1-last[id]$，小于0则置零，小于3则设置优先缓存为false，然后处理订单时刻，加上2*订单数，如果优先级大于5，则设置优先缓存为true，最后令<code>last[id]=t</code>。</p><p>如果处理的最后时刻小于T，那么需要减去$T-last[i]$，即处理$last[i]+1 \sim T$部分，若优先级小于等于3，则设置优先缓存为false，最后循环所有优先缓存统计true个数输出即可。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MAXN <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> stores<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span> last<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> f<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> Order<span class="token punctuation">{</span>    <span class="token keyword">int</span> t<span class="token punctuation">,</span> id<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>Order<span class="token operator">></span> orders<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>Order a<span class="token punctuation">,</span> Order b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>t <span class="token operator">==</span> b<span class="token punctuation">.</span>t<span class="token punctuation">)</span>        <span class="token keyword">return</span> a<span class="token punctuation">.</span>id <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>id<span class="token punctuation">;</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span>t <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>t<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> N<span class="token punctuation">,</span> M<span class="token punctuation">,</span> T<span class="token punctuation">;</span>    cin <span class="token operator">>></span> N <span class="token operator">>></span> M <span class="token operator">>></span> T<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> M<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Order cur<span class="token punctuation">;</span>        cin <span class="token operator">>></span> cur<span class="token punctuation">.</span>t <span class="token operator">>></span> cur<span class="token punctuation">.</span>id<span class="token punctuation">;</span>        orders<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sort</span><span class="token punctuation">(</span>orders<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> orders<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> M<span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>orders<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id <span class="token operator">==</span> orders<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>id <span class="token operator">&amp;&amp;</span> orders<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>t <span class="token operator">==</span> orders<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>t <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> M<span class="token punctuation">)</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cnt <span class="token operator">=</span> j <span class="token operator">-</span> i<span class="token punctuation">;</span>        <span class="token keyword">int</span> id <span class="token operator">=</span> orders<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">,</span> t <span class="token operator">=</span> orders<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>t<span class="token punctuation">;</span>        i <span class="token operator">=</span> j<span class="token punctuation">;</span>        stores<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">=</span> t <span class="token operator">-</span> last<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>stores<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            stores<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>stores<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">)</span>            f<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        stores<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> cnt <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>stores<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span>            f<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        last<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>last<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> T<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            stores<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">=</span> T <span class="token operator">-</span> last<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>stores<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">)</span>                f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            ans<span class="token operator">++</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.acwing.com/solution/content/5622/" target="_blank" rel="noopener">https://www.acwing.com/solution/content/5622/</a></p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Lanqiao </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥杯 2019省赛 C/C++ A TE</title>
      <link href="/2021/04/15/lanqiao-2019p-ca-te/"/>
      <url>/2021/04/15/lanqiao-2019p-ca-te/</url>
      
        <content type="html"><![CDATA[<h1 id="蓝桥杯-2019省赛-C-C-A-TE"><a href="#蓝桥杯-2019省赛-C-C-A-TE" class="headerlink" title="蓝桥杯 2019省赛 C/C++ A TE"></a>蓝桥杯 2019省赛 C/C++ A TE</h1><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p>扩展欧几里得算法/欧拉函数，快速乘与快速幂</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><blockquote><p><img src="https://notplus-picgo.oss-cn-shanghai.aliyuncs.com/img/image-20210415093648960.png" alt="image-20210415093648960"></p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>本题按照题目所述算法计算，首先需要求得两个质数p、q，直接暴力遍历求得即可，耗时10s左右，之后求e需要通过扩展欧几里得算法或者欧拉函数计算逆元，最后求X需要通过快速幂计算，但由于n过大，快速幂中乘法需要替换为快速乘。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;set></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>ll n <span class="token operator">=</span> <span class="token number">1001733993063167141</span><span class="token punctuation">;</span>ll <span class="token function">getP</span><span class="token punctuation">(</span>ll n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>ll i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">exgcd</span><span class="token punctuation">(</span>ll a<span class="token punctuation">,</span> ll b<span class="token punctuation">,</span> ll <span class="token operator">&amp;</span>d<span class="token punctuation">,</span> ll <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> ll <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>b<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        d <span class="token operator">=</span> a<span class="token punctuation">;</span>        x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">exgcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a <span class="token operator">%</span> b<span class="token punctuation">,</span> d<span class="token punctuation">,</span> y<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    y <span class="token operator">-</span><span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">/</span> b<span class="token punctuation">)</span> <span class="token operator">*</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span>ll <span class="token function">rev</span><span class="token punctuation">(</span>ll t<span class="token punctuation">,</span> ll m<span class="token punctuation">)</span><span class="token punctuation">{</span>    ll d<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>    <span class="token function">exgcd</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> m<span class="token punctuation">,</span> d<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> m <span class="token operator">+</span> m<span class="token punctuation">)</span> <span class="token operator">%</span> m<span class="token punctuation">;</span><span class="token punctuation">}</span>ll <span class="token function">fast_product</span><span class="token punctuation">(</span>ll a<span class="token punctuation">,</span> ll b<span class="token punctuation">,</span> ll mod<span class="token punctuation">)</span><span class="token punctuation">{</span>    ll ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span>            ans <span class="token operator">=</span> <span class="token punctuation">(</span>ans <span class="token operator">+</span> a<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>        a <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> a<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>        b <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span>ll <span class="token function">fast_pow</span><span class="token punctuation">(</span>ll a<span class="token punctuation">,</span> ll b<span class="token punctuation">,</span> ll mod<span class="token punctuation">)</span><span class="token punctuation">{</span>    ll ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span>            ans <span class="token operator">=</span> <span class="token function">fast_product</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> a<span class="token punctuation">,</span> mod<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fast_product</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a<span class="token punctuation">,</span> mod<span class="token punctuation">)</span><span class="token punctuation">;</span>        b <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ll p <span class="token operator">=</span> <span class="token function">getP</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    ll q <span class="token operator">=</span> n <span class="token operator">/</span> p<span class="token punctuation">;</span>    ll k <span class="token operator">=</span> n <span class="token operator">-</span> p <span class="token operator">-</span> q <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    ll d <span class="token operator">=</span> <span class="token number">212353</span><span class="token punctuation">;</span>    ll e <span class="token operator">=</span> <span class="token function">rev</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"e="</span> <span class="token operator">&lt;&lt;</span> e <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    ll C <span class="token operator">=</span> <span class="token number">20190324</span><span class="token punctuation">;</span>    ll X <span class="token operator">=</span> <span class="token function">fast_pow</span><span class="token punctuation">(</span>C<span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"X="</span> <span class="token operator">&lt;&lt;</span> X <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Lanqiao </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥杯 2015省赛 C/C++ A T9</title>
      <link href="/2021/04/13/lanqiao-2015p-ca-t9/"/>
      <url>/2021/04/13/lanqiao-2015p-ca-t9/</url>
      
        <content type="html"><![CDATA[<h1 id="蓝桥杯-2015省赛-C-C-A-T9"><a href="#蓝桥杯-2015省赛-C-C-A-T9" class="headerlink" title="蓝桥杯 2015省赛 C/C++ A T9"></a>蓝桥杯 2015省赛 C/C++ A T9</h1><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p>矩阵运算+快速幂</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><blockquote><p>垒骰子</p><p>赌圣atm晚年迷恋上了垒骰子，就是把骰子一个垒在另一个上边，不能歪歪扭扭，要垒成方柱体。<br>经过长期观察，atm 发现了稳定骰子的奥秘：有些数字的面贴着会互相排斥！<br>我们先来规范一下骰子：1 的对面是 4，2 的对面是 5，3 的对面是 6。<br>假设有 m 组互斥现象，每组中的那两个数字的面紧贴在一起，骰子就不能稳定的垒起来。<br>atm想计算一下有多少种不同的可能的垒骰子方式。<br>两种垒骰子方式相同，当且仅当这两种方式中对应高度的骰子的对应数字的朝向都相同。<br>由于方案数可能过多，请输出模 10^9 + 7 的结果。</p><p>不要小看了 atm 的骰子数量哦～</p><p>「输入格式」<br>第一行两个整数 n m<br>n表示骰子数目<br>接下来 m 行，每行两个整数 a b ，表示 a 和 b 数字不能紧贴在一起。</p><p>「输出格式」<br>一行一个数，表示答案模 10^9 + 7 的结果。</p><p>「样例输入」<br>2 1<br>1 2</p><p>「样例输出」<br>544</p><p>「数据范围」<br>对于 30% 的数据：n &lt;= 5<br>对于 60% 的数据：n &lt;= 100<br>对于 100% 的数据：0 &lt; n &lt;= 10^9, m &lt;= 36</p><p>资源约定：<br>峰值内存消耗 &lt; 256M<br>CPU消耗  &lt; 2000ms</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>首先考虑递归方法，递归函数为上一层定好了朝上的数字的情况下，垒好cnt个骰子的方案数。但该种方法复杂度过高，超时。</p><p>其次考虑动态规划方法，<code>dp[i][j]</code>表示第<code>i</code>层<code>j</code>朝上的方案数，$dp[i][j]=\sum_{x=1}^6dp[i-1][x]$当<code>op[j]</code>与<code>x</code>不冲突，$ans=\sum_{j=1}^6dp[n][j]$,，最终结果还需要乘以4的n次方。但这种方法复杂度仍然过高，由于$n&lt;=10^9$，线性算法很可能超时，需要考虑log级别的算法。</p><table><thead><tr><th>示例情况</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th></tr></thead><tbody><tr><td>第一层</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td></tr><tr><td>第二层</td><td>6</td><td>6</td><td>6</td><td>5</td><td>5</td><td>6</td></tr></tbody></table><p>最后考虑矩阵运算方法，将动态规划方法转换为矩阵运算实现，示例情况下考虑矩阵乘法$CF=D$，矩阵$C$为冲突矩阵，矩阵$F$为第一层各个数字方案数，二者相乘即为第i层k向上的方案数，也即dp算法中的行向量。当有n层时，矩阵$D$即为$C^{n-1}F$，则问题转换为矩阵运算问题，最终复杂度为$log(n-1)\times6^3$。<br>$$<br>\left[<br> \begin{matrix}<br>   1 &amp; 0 &amp; 1 &amp; 1 &amp; 1 &amp; 1 \<br>   0 &amp; 1 &amp; 1 &amp; 1 &amp; 1 &amp; 1 \<br>   1 &amp; 1 &amp; 1 &amp; 1 &amp; 1 &amp; 1 \<br>   1 &amp; 1 &amp; 1 &amp; 1 &amp; 1 &amp; 1 \<br>   1 &amp; 1 &amp; 1 &amp; 1 &amp; 1 &amp; 1 \<br>   1 &amp; 1 &amp; 1 &amp; 1 &amp; 1 &amp; 1 \<br>  \end{matrix}<br>  \right]<br>  \left[<br> \begin{matrix}<br>   1 \<br>   1 \<br>   1 \<br>   1 \<br>   1 \<br>   1 \<br>  \end{matrix}<br>  \right]<br>  =<br>  \left[<br> \begin{matrix}<br>   5 \<br>   5 \<br>   6 \<br>   6 \<br>   6 \<br>   6 \<br>  \end{matrix}<br>  \right]<br>$$</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 递归方法，复杂度过高，超时</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;set></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sstream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> MOD 1000000007</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span><span class="token keyword">int</span> op<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> conflict<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> up<span class="token punctuation">,</span> <span class="token keyword">int</span> cnt<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> upp <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> upp <span class="token operator">&lt;=</span> <span class="token number">6</span><span class="token punctuation">;</span> upp<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>conflict<span class="token punctuation">[</span>op<span class="token punctuation">[</span>up<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>upp<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        ans <span class="token operator">=</span> <span class="token punctuation">(</span>ans <span class="token operator">+</span> <span class="token function">f</span><span class="token punctuation">(</span>upp<span class="token punctuation">,</span> cnt <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> MOD<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    op<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    op<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    op<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    op<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    op<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>    op<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        conflict<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        conflict<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> up <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> up <span class="token operator">&lt;=</span> <span class="token number">6</span><span class="token punctuation">;</span> up<span class="token operator">++</span><span class="token punctuation">)</span>        ans <span class="token operator">=</span> <span class="token punctuation">(</span>ans <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token function">f</span><span class="token punctuation">(</span>up<span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> MOD<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 动态规划方法，仍超时</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;set></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sstream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> MOD 1000000007</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span><span class="token keyword">int</span> op<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> conflict<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// dp[i][j]表示有i层，限定朝上的数字为j的稳定方案数</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    op<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    op<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    op<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    op<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    op<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>    op<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        conflict<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        conflict<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> cur <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> level <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> level <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> level<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cur <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> cur<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 尝试将6个面放在当前一层朝上的方向</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">6</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>conflict<span class="token punctuation">[</span>op<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                dp<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span><span class="token number">1</span> <span class="token operator">-</span> cur<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> MOD<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> <span class="token number">6</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>        sum <span class="token operator">=</span> <span class="token punctuation">(</span>sum <span class="token operator">+</span> dp<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> MOD<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 快速幂，求4的n次方</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> tmp <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> p <span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>            ans <span class="token operator">=</span> <span class="token punctuation">(</span>ans <span class="token operator">*</span> tmp<span class="token punctuation">)</span> <span class="token operator">%</span> MOD<span class="token punctuation">;</span>        tmp <span class="token operator">=</span> <span class="token punctuation">(</span>tmp <span class="token operator">*</span> tmp<span class="token punctuation">)</span> <span class="token operator">%</span> MOD<span class="token punctuation">;</span>        p <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>sum <span class="token operator">*</span> ans<span class="token punctuation">)</span> <span class="token operator">%</span> MOD <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 矩阵运算方法</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;set></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sstream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> MOD 1000000007</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span><span class="token keyword">int</span> op<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// dp[i][j]表示有i层，限定朝上的数字为j的稳定方案数</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    op<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    op<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    op<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    op<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    op<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>    op<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">struct</span> Mat<span class="token punctuation">{</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> a<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">Mat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>                a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Mat <span class="token function">MatMultiply</span><span class="token punctuation">(</span>Mat m1<span class="token punctuation">,</span> Mat m2<span class="token punctuation">)</span><span class="token punctuation">{</span>    Mat ans<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            ans<span class="token punctuation">.</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>                ans<span class="token punctuation">.</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>ans<span class="token punctuation">.</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> m1<span class="token punctuation">.</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">*</span> m2<span class="token punctuation">.</span>a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> MOD<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span>Mat <span class="token function">MatPow</span><span class="token punctuation">(</span>Mat m<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>    Mat ans<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            ans<span class="token punctuation">.</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>            ans <span class="token operator">=</span> <span class="token function">MatMultiply</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>        m <span class="token operator">=</span> <span class="token function">MatMultiply</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>        k <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//向右移动1位</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>    Mat matrix<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        matrix<span class="token punctuation">.</span>a<span class="token punctuation">[</span>op<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>b <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        matrix<span class="token punctuation">.</span>a<span class="token punctuation">[</span>op<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Mat c_mat_n_1 <span class="token operator">=</span> <span class="token function">MatPow</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            sum <span class="token operator">=</span> <span class="token punctuation">(</span>sum <span class="token operator">+</span> c_mat_n_1<span class="token punctuation">.</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> MOD<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 快速幂，求4的n次方</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> tmp <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> p <span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>            ans <span class="token operator">=</span> <span class="token punctuation">(</span>ans <span class="token operator">*</span> tmp<span class="token punctuation">)</span> <span class="token operator">%</span> MOD<span class="token punctuation">;</span>        tmp <span class="token operator">=</span> <span class="token punctuation">(</span>tmp <span class="token operator">*</span> tmp<span class="token punctuation">)</span> <span class="token operator">%</span> MOD<span class="token punctuation">;</span>        p <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>sum <span class="token operator">*</span> ans<span class="token punctuation">)</span> <span class="token operator">%</span> MOD <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Lanqiao </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥杯 2016省赛 C/C++ A T9</title>
      <link href="/2021/04/13/lanqiao-2016p-ca-t9/"/>
      <url>/2021/04/13/lanqiao-2016p-ca-t9/</url>
      
        <content type="html"><![CDATA[<h1 id="蓝桥杯-2016省赛-C-C-A-T9"><a href="#蓝桥杯-2016省赛-C-C-A-T9" class="headerlink" title="蓝桥杯 2016省赛 C/C++ A T9"></a>蓝桥杯 2016省赛 C/C++ A T9</h1><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p>动态规划</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><blockquote><p>密码脱落</p><p>X星球的考古学家发现了一批古代留下来的密码。<br>这些密码是由A、B、C、D 四种植物的种子串成的序列。<br>仔细分析发现，这些密码串当初应该是前后对称的（也就是我们说的镜像串）。<br>由于年代久远，其中许多种子脱落了，因而可能会失去镜像的特征。</p><p>你的任务是：<br>给定一个现在看到的密码串，计算一下从当初的状态，它要至少脱落多少个种子，才可能会变成现在的样子。</p><p>输入一行，表示现在看到的密码串（长度不大于1000）<br>要求输出一个正整数，表示至少脱落了多少个种子。</p><p>例如，输入：<br>ABCBA<br>则程序应该输出：<br>0</p><p>再例如，输入：<br>ABDCDCBABC<br>则程序应该输出：<br>3</p><p>资源约定：<br>峰值内存消耗 &lt; 256M<br>CPU消耗  &lt; 1000ms</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>首先考虑搜索方法，从字符串头和尾开始搜索，如果相同则分别向内前进一步，如果不同，即有一侧需要补充字符，由于题目只需要输出补充次数，所以只需要指针移动一位即可，取左部前进次数与右边前进次数的最小值。但此种方法复杂度为$2^n$，而n最大为1000，超时。</p><p>考虑字符串与逆序字符串的最长公共子序列，逆序字符串子序列中跳过的字符即是要补充的，字符串长度减去最长公共子序列即可得到答案。 </p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 搜索方法 复杂度过高</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;set></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sstream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">,</span><span class="token keyword">int</span> left<span class="token punctuation">,</span><span class="token keyword">int</span> right<span class="token punctuation">,</span><span class="token keyword">int</span> cnt<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>left<span class="token operator">>=</span>right<span class="token punctuation">)</span> <span class="token keyword">return</span> cnt<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>s<span class="token operator">+</span>left<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">*</span><span class="token punctuation">(</span>s<span class="token operator">+</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>right<span class="token punctuation">,</span>cnt<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">dfs</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>left<span class="token punctuation">,</span>right<span class="token number">-1</span><span class="token punctuation">,</span>cnt<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>right<span class="token number">-1</span><span class="token punctuation">,</span>cnt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len<span class="token operator">=</span><span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">dfs</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token number">-1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;set></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sstream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">lcs</span><span class="token punctuation">(</span>string s1<span class="token punctuation">,</span> string s2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> m<span class="token operator">=</span>s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>n<span class="token operator">=</span>s2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">dp</span><span class="token punctuation">(</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token operator">==</span> s2<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>j<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string s<span class="token punctuation">;</span>    cin <span class="token operator">>></span> s<span class="token punctuation">;</span>    string rev<span class="token operator">=</span> s<span class="token punctuation">;</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>rev<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>rev<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">lcs</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> rev<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Lanqiao </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥杯 2015省赛 C/C++ A T6</title>
      <link href="/2021/04/12/lanqiao-2015-ca-t6/"/>
      <url>/2021/04/12/lanqiao-2015-ca-t6/</url>
      
        <content type="html"><![CDATA[<h1 id="蓝桥杯-2015省赛-C-C-A-T6"><a href="#蓝桥杯-2015省赛-C-C-A-T6" class="headerlink" title="蓝桥杯 2015省赛 C/C++ A T6"></a>蓝桥杯 2015省赛 C/C++ A T6</h1><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p>递归</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><blockquote><p>牌型种数</p><p>小明被劫持到X赌城，被迫与其他3人玩牌。<br>一副扑克牌（去掉大小王牌，共52张），均匀发给4个人，每个人13张。<br>这时，小明脑子里突然冒出一个问题：<br>如果不考虑花色，只考虑点数，也不考虑自己得到的牌的先后顺序，自己手里能拿到的初始牌型组合一共有多少种呢？</p><p>请填写该整数，不要填写任何多余的内容或说明文字。</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>本题若考虑全排列，复杂度过高。考虑各点数牌选取的个数情况，即每个点数牌可能的选取个数为<code>{0,1,2,3,4}</code>，这样考虑复杂度为$5^{13}\approx1e9$，并且还有剪枝，运算时间可以接受。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sstream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> cnt<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// k表示考虑到哪种牌，cnt表示总共分配牌数</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt<span class="token operator">></span><span class="token number">13</span><span class="token operator">||</span>k<span class="token operator">></span><span class="token number">13</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">13</span><span class="token operator">&amp;&amp;</span>cnt<span class="token operator">==</span><span class="token number">13</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        ans<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">f</span><span class="token punctuation">(</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>cnt<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">f</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 复杂度过高仅作为参考</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sstream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>string pai<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">countOf</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> path<span class="token punctuation">,</span> string p<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> path<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> p<span class="token punctuation">)</span>            cnt<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> cnt<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>string<span class="token operator">></span> path<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        ans<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">13</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">countOf</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> pai<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        path<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>pai<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">f</span><span class="token punctuation">(</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>        path<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">i2s</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">,</span> string <span class="token operator">&amp;</span>str<span class="token punctuation">)</span><span class="token punctuation">{</span>    stringstream ss<span class="token punctuation">;</span>    ss <span class="token operator">&lt;&lt;</span> num<span class="token punctuation">;</span>    ss <span class="token operator">>></span> str<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">13</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">i2s</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> pai<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> v<span class="token punctuation">;</span>    <span class="token function">f</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Lanqiao </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥杯 2018省赛 C/C++ A T4</title>
      <link href="/2021/04/12/lanqiao-2016p-ca-t8/"/>
      <url>/2021/04/12/lanqiao-2016p-ca-t8/</url>
      
        <content type="html"><![CDATA[<h1 id="蓝桥杯-2016省赛-C-C-A-T8"><a href="#蓝桥杯-2016省赛-C-C-A-T8" class="headerlink" title="蓝桥杯 2016省赛 C/C++ A T8"></a>蓝桥杯 2016省赛 C/C++ A T8</h1><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p>暴力枚举优化：</p><ul><li>减少枚举范围</li><li>减少枚举变量 （可通过缓存对枚举进行优化）</li></ul><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><blockquote><p>四平方和</p><p>四平方和定理，又称为拉格朗日定理：<br>每个正整数都可以表示为至多4个正整数的平方和。<br>如果把0包括进去，就正好可以表示为4个数的平方和。</p><p>比如：<br>5 = 0^2 + 0^2 + 1^2 + 2^2<br>7 = 1^2 + 1^2 + 1^2 + 2^2<br>（^符号表示乘方的意思）</p><p>对于一个给定的正整数，可能存在多种平方和的表示法。<br>要求你对4个数排序：<br>0 &lt;= a &lt;= b &lt;= c &lt;= d<br>并对所有的可能表示法按 a,b,c,d 为联合主键升序排列，最后输出第一个表示法</p><p>程序输入为一个正整数N (N&lt;5000000)<br>要求输出4个非负整数，按从小到大排序，中间用空格分开</p><p>例如，输入：<br>5<br>则程序应该输出：<br>0 0 1 2</p><p>再例如，输入：<br>12<br>则程序应该输出：<br>0 2 2 2</p><p>再例如，输入：<br>773535<br>则程序应该输出：<br>1 1 267 838</p><p>资源约定：<br>峰值内存消耗 &lt; 256M<br>CPU消耗  &lt; 3000ms</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>首先考虑枚举，由于N到10的6次方的量级，暴力枚举复杂度过高。考虑减少枚举变量，通过缓存方法降低复杂度。先生成c和d的平方和并缓存，再遍历a、b，只需要查找N与a、b的平方和的差值是否在缓存中即可。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> N<span class="token punctuation">;</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> cache<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> c <span class="token operator">*</span> c <span class="token operator">&lt;=</span> N <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> c<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> d <span class="token operator">=</span> c<span class="token punctuation">;</span> c <span class="token operator">*</span> c <span class="token operator">+</span> d <span class="token operator">*</span> d <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> d<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cache<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>c <span class="token operator">*</span> c <span class="token operator">+</span> d <span class="token operator">*</span> d<span class="token punctuation">)</span> <span class="token operator">==</span> cache<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                cache<span class="token punctuation">[</span>c <span class="token operator">*</span> c <span class="token operator">+</span> d <span class="token operator">*</span> d<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> a <span class="token operator">*</span> a <span class="token operator">&lt;=</span> N <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">;</span> a<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span> a <span class="token operator">*</span> a <span class="token operator">+</span> b <span class="token operator">*</span> b <span class="token operator">&lt;=</span> N <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> b<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cache<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>N <span class="token operator">-</span> a <span class="token operator">*</span> a <span class="token operator">-</span> b <span class="token operator">*</span> b<span class="token punctuation">)</span> <span class="token operator">!=</span> cache<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">int</span> c <span class="token operator">=</span> cache<span class="token punctuation">[</span>N <span class="token operator">-</span> a <span class="token operator">*</span> a <span class="token operator">-</span> b <span class="token operator">*</span> b<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token function">sqrt</span><span class="token punctuation">(</span>N <span class="token operator">-</span> a <span class="token operator">*</span> a <span class="token operator">-</span> b <span class="token operator">*</span> b <span class="token operator">-</span> c <span class="token operator">*</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d %d"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Lanqiao </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥杯 2015省赛 C/C++ A T7</title>
      <link href="/2021/04/12/lanqiao-2015p-ca-t7/"/>
      <url>/2021/04/12/lanqiao-2015p-ca-t7/</url>
      
        <content type="html"><![CDATA[<h1 id="蓝桥杯-2015省赛-C-C-A-T7"><a href="#蓝桥杯-2015省赛-C-C-A-T7" class="headerlink" title="蓝桥杯 2015省赛 C/C++ A T7"></a>蓝桥杯 2015省赛 C/C++ A T7</h1><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p>有重复元素的圆排列与环排列的计数问题</p><p>全排列+特殊去重</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><blockquote><p>手链样式</p><p>小明有3颗红珊瑚，4颗白珊瑚，5颗黄玛瑙。<br>他想用它们串成一圈作为手链，送给女朋友。<br>现在小明想知道：如果考虑手链可以随意转动或翻转，一共可以有多少不同的组合样式呢？</p><p>请你提交该整数。不要填写任何多余的内容或说明性的文字。</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>通过全排列生成所有可能的情况，在排除重复情况时，需要考虑到旋转和翻转，考虑字符串，s’是否为s的旋转等价于s’是否为(s+s)的子串，故通过<code>find</code>判断是否为已有序列的子串，若不是，则加入<code>s+s</code>和<code>(s+s).reverse</code>，每成功加入一次<code>ans++</code>。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string s <span class="token operator">=</span> <span class="token string">"aaabbbbccccc"</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> v1<span class="token punctuation">;</span>    <span class="token keyword">do</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 排除重复，对于v1中每个元素进行检查，如果存在s的旋转或者翻转，则跳过</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>v1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">!=</span> string<span class="token operator">::</span>npos<span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> v1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        string s2<span class="token operator">=</span>s<span class="token operator">+</span>s<span class="token punctuation">;</span>        v1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 用于判断旋转的情况</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s2<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        v1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将s的翻转放入vector</span>        ans<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">next_permutation</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Lanqiao </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥杯 2016省赛 C/C++ A T7</title>
      <link href="/2021/04/12/lanqiao-2016-ca-t7/"/>
      <url>/2021/04/12/lanqiao-2016-ca-t7/</url>
      
        <content type="html"><![CDATA[<h1 id="蓝桥杯-2016省赛-C-C-A-T7"><a href="#蓝桥杯-2016省赛-C-C-A-T7" class="headerlink" title="蓝桥杯 2016省赛 C/C++ A T7"></a>蓝桥杯 2016省赛 C/C++ A T7</h1><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p>全排列+dfs连通块检测</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><blockquote><p>剪邮票</p><p>如【图1.jpg】, 有12张连在一起的12生肖的邮票。<br>现在你要从中剪下5张来，要求必须是连着的。<br>（仅仅连接一个角不算相连）<br>比如，【图2.jpg】，【图3.jpg】中，粉红色所示部分就是合格的剪取。</p><p><img src="https://notplus-picgo.oss-cn-shanghai.aliyuncs.com/img/image-20210412203825071.png" alt="image-20210412203825071"></p><p>请你计算，一共有多少种不同的剪取方法。</p><p>请填写表示方案数目的整数。<br>注意：你提交的应该是一个整数，不要填写任何多余的内容或说明性文字。</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>本题考虑全排列问题，可以通过递归+回溯或者<code>next_permutation()</code>生成全排列，然后通过检测连通块个数（dfs）判断是否合格。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> g<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span>    g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;=</span><span class="token number">2</span> <span class="token operator">&amp;&amp;</span> g<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token number">-1</span><span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> g<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span>i<span class="token number">-1</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;=</span><span class="token number">3</span> <span class="token operator">&amp;&amp;</span> g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>j<span class="token number">-1</span><span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> g<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">4</span><span class="token operator">+</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>                g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">dfs</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>                cnt<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token keyword">return</span> cnt<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> per<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">do</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>per<span class="token punctuation">)</span><span class="token punctuation">)</span>            ans<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">next_permutation</span><span class="token punctuation">(</span>per<span class="token punctuation">,</span>per<span class="token operator">+</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//它的每个排列代表着12选5的一个方案</span><span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> g<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span>    g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;=</span><span class="token number">2</span> <span class="token operator">&amp;&amp;</span> g<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token number">-1</span><span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> g<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span>i<span class="token number">-1</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;=</span><span class="token number">3</span> <span class="token operator">&amp;&amp;</span> g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>j<span class="token number">-1</span><span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> g<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">4</span><span class="token operator">+</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>                g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">dfs</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>                cnt<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token keyword">return</span> cnt<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> vis<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> path<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">12</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            ans<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">12</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">></span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>a<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//现在准备选取的元素和上一个元素相同，但是上一个元素还没被使用</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>            path<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token function">f</span><span class="token punctuation">(</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>            vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> path<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">f</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Lanqiao </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>全排列问题</title>
      <link href="/2021/04/12/full-arrangement/"/>
      <url>/2021/04/12/full-arrangement/</url>
      
        <content type="html"><![CDATA[<h1 id="全排列问题"><a href="#全排列问题" class="headerlink" title="全排列问题"></a>全排列问题</h1><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>全排列+检查 递归+回溯（剪枝）</p><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 转换为一维问题</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">int</span> a<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>k<span class="token operator">==</span>n<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            ans<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token punctuation">{</span><span class="token keyword">int</span> t<span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>t<span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token function">f</span><span class="token punctuation">(</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 递归</span>        <span class="token punctuation">{</span><span class="token keyword">int</span> t<span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>t<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 回溯</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">f</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     std<span class="token operator">::</span>cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>std<span class="token operator">::</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 二维情况</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">bool</span> vis<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>xx<span class="token punctuation">]</span><span class="token punctuation">[</span>yy<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token operator">==</span> <span class="token operator">&amp;&amp;</span> y<span class="token operator">==</span> <span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 到达边界</span>    <span class="token punctuation">{</span>        ans<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token boolean">false</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token operator">==</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 剪枝</span>            <span class="token punctuation">{</span>                a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>init_num<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 恢复</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 递归</span>            vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 回溯</span>            a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>init_num<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 回溯</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 使用 next_permutation() 生成全排列</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> per<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> per<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">do</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>per<span class="token punctuation">)</span><span class="token punctuation">)</span>            ans<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">next_permutation</span><span class="token punctuation">(</span>per<span class="token punctuation">,</span>per<span class="token operator">+</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="2016-省赛-CA-3"><a href="#2016-省赛-CA-3" class="headerlink" title="2016-省赛-CA-3"></a>2016-省赛-CA-3</h3><blockquote><p>方格填数</p><p>如下的10个格子<br>   +–+–+–+<br>   |  |  |  |<br>+–+–+–+–+<br>|  |  |  |  |<br>+–+–+–+–+<br>|  |  |  |<br>+–+–+–+</p><p>填入0~9的数字。要求：连续的两个数字不能相邻。<br>（左右、上下、对角都算相邻）</p><p><img src="https://notplus-picgo.oss-cn-shanghai.aliyuncs.com/img/image-20210412111357021.png" alt="image-20210412111357021"></p><p>一共有多少种可能的填数方案？</p></blockquote><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token operator">||</span>            <span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token operator">||</span>            <span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token operator">||</span>            <span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token operator">||</span>            <span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token operator">||</span>            <span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token operator">||</span>            <span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token operator">||</span>            <span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>a<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token operator">||</span>            <span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">-</span>a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token operator">||</span>            <span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">-</span>a<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token operator">||</span>            <span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">-</span>a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token operator">||</span>            <span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">-</span>a<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token operator">||</span>            <span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">-</span>a<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token operator">||</span>            <span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">-</span>a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token operator">||</span>            <span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">-</span>a<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token operator">||</span>            <span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">-</span>a<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token operator">||</span>            <span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">-</span>a<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token operator">||</span>            <span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">-</span>a<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token operator">||</span>            <span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">-</span>a<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token operator">||</span>            <span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">-</span>a<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token operator">||</span>            <span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">-</span>a<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token operator">||</span>            <span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">-</span>a<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token operator">||</span>            <span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token operator">-</span>a<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>             <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            ans<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>k<span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token punctuation">{</span><span class="token keyword">int</span> t<span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>t<span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token function">f</span><span class="token punctuation">(</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">{</span><span class="token keyword">int</span> t<span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>t<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">f</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> vis<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> x <span class="token operator">&lt;=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> y <span class="token operator">=</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> y <span class="token operator">&lt;=</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> y<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">-</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> y <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        ans<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">check</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 剪枝</span>            <span class="token punctuation">{</span>                a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span>                <span class="token function">f</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2016-省赛-CA-6"><a href="#2016-省赛-CA-6" class="headerlink" title="2016-省赛-CA-6"></a>2016-省赛-CA-6</h3><blockquote><p>寒假作业</p><p>现在小学的数学题目也不是那么好玩的。<br>看看这个寒假作业：</p><p>  □ + □ = □<br>  □ - □ = □<br>  □ × □ = □<br>  □ ÷ □ = □</p><p>  (如果显示不出来，可以参见【图1.jpg】)</p><p>每个方块代表1~13中的某一个数字，但不能重复。<br>比如：<br>6  + 7 = 13<br>9  - 8 = 1<br>3  * 4 = 12<br>10 / 2 = 5</p><p>以及：<br>7  + 6 = 13<br>9  - 8 = 1<br>3  * 4 = 12<br>10 / 2 = 5</p><p>就算两种解法。（加法，乘法交换律后算不同的方案）</p><p>你一共找到了多少种方案？</p></blockquote><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span>        a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">-</span> a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">==</span> a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span>        a<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">*</span> a<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">==</span> a<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span>        a<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">%</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>        a<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">/</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">==</span> a<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">13</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            ans<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> x<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">13</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> t <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>            a<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">5</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">-</span> a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">!=</span> a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token punctuation">{</span>                <span class="token keyword">int</span> t <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>                a<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">f</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> t <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>            a<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">f</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Lanqiao </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥杯 2018省赛 C/C++ A T7</title>
      <link href="/2021/04/06/lanqiao-2018p-ca-t7/"/>
      <url>/2021/04/06/lanqiao-2018p-ca-t7/</url>
      
        <content type="html"><![CDATA[<h1 id="蓝桥杯-2018省赛-C-C-A-T7"><a href="#蓝桥杯-2018省赛-C-C-A-T7" class="headerlink" title="蓝桥杯 2018省赛 C/C++ A T7"></a>蓝桥杯 2018省赛 C/C++ A T7</h1><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p>二分、查分</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><blockquote><p> 标题：三体攻击</p><p> 【题目描述】<br> 三体人将对地球发起攻击。为了抵御攻击，地球人派出了 A × B × C 艘战舰，在太空中排成一个 A 层 B 行 C 列的立方体。其中，第 i 层第 j 行第 k 列的战舰（记为战舰 (i, j, k)）的生命值为 d(i, j, k)。</p><p> 三体人将会对地球发起 m 轮“立方体攻击”，每次攻击会对一个小立方体中的所有战舰都造成相同的伤害。具体地，第 t 轮攻击用 7 个参数 lat, rat, lbt, rbt, lct, rct, ht 描述；<br> 所有满足 i ∈ [lat, rat],j ∈ [lbt, rbt],k ∈ [lct, rct] 的战舰 (i, j, k) 会受到 ht 的伤害。如果一个战舰累计受到的总伤害超过其防御力，那么这个战舰会爆炸。</p><p> 地球指挥官希望你能告诉他，第一艘爆炸的战舰是在哪一轮攻击后爆炸的。</p><p> 【输入格式】<br> 从标准输入读入数据。</p><p> 第一行包括 4 个正整数 A, B, C, m；<br> 第二行包含 A × B × C 个整数，其中第 ((i − 1)×B + (j − 1)) × C + (k − 1)+1 个数为 d(i, j, k)；<br> 第 3 到第 m + 2 行中，第 (t − 2) 行包含 7 个正整数 lat, rat, lbt, rbt, lct, rct, ht。</p><p> 【输出格式】<br> 输出到标准输出。</p><p> 输出第一个爆炸的战舰是在哪一轮攻击后爆炸的。保证一定存在这样的战舰。</p><p> 【样例输入】<br> 2 2 2 3<br> 1 1 1 1 1 1 1 1<br> 1 2 1 2 1 1 1<br> 1 1 1 2 1 2 1<br> 1 1 1 1 1 1 2</p><p> 【样例输出】<br> 2</p><p> 【样例解释】<br> 在第 2 轮攻击后，战舰 (1,1,1) 总共受到了 2 点伤害，超出其防御力导致爆炸。</p><p> 【数据约定】<br> 对于 10% 的数据，B = C = 1；<br> 对于 20% 的数据，C = 1；<br> 对于 40% 的数据，A × B × C, m ≤ 10, 000；<br> 对于 70% 的数据，A, B, C ≤ 200；<br> 对于所有数据，A × B × C ≤ 10^6, m ≤ 10^6, 0 ≤ d(i, j, k), ht ≤ 10^9。</p><p> 资源约定：<br> 峰值内存消耗（含虚拟机） &lt; 256M<br> CPU消耗  &lt; 2000ms</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>首先想到的是暴力枚举法，时间复杂度为 $O(m<em>A</em>B*C)$，对于$10^6$量级的数据，会超时。</p><p>对于暴力枚举法有以下常见的三种优化方式：</p><ul><li>减少枚举层数</li><li>减少枚举范围</li><li>尝试二分</li></ul><p>在本道题目中，由于对飞船攻击范围可能是全范围的，所以减少枚举层数、减少枚举范围的方法无法使用。从飞船生命线性递减的性质中确定可以使用二分方法。</p><p>但如果简单的使用二分法，时间复杂度为$O(log_2(m)<em>k</em>A<em>B</em>C)$，其中$k$为二分后区间攻击次数，这样的时间复杂度在某些情况下仍是性能较差的，那么就需要针对$A<em>B</em>C$进行优化。</p><p>将本道题目进行抽象为持续变更一个区间范围的值，求最后状态。针对这类问题，可以使用<strong>查分</strong>方法进行优化。</p><p>以下介绍差分算法：</p><ul><li>如果数组A是B的前缀和，则B是A的差分</li><li>前缀和：数列前n项的和 适用于频繁求区间<ul><li>$O(N)$ 维护数组</li><li>$O(1)$ 求区间和</li></ul></li><li>差分：适用于频繁改变区间<ul><li>$O(1)$ 改变区间值</li><li>$O(N)$ 求单点最终值</li></ul></li></ul><p>本道题目需要使用三维情况的差分算法</p><p><img src="https://notplus-picgo.oss-cn-shanghai.aliyuncs.com/img/image-20210406200939489.png" alt="image-20210406200939489"></p><p>通过使用二分和差分算法，优化后时间复杂度为$O(log_2(m)<em>(m+A</em>B*C))$</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span><span class="token keyword">int</span> A<span class="token punctuation">,</span> B<span class="token punctuation">,</span> C<span class="token punctuation">,</span> m<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> getX(i, j, k) (((i)-1) * b + ((j)-1)) * c + (k)</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>LL cc<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> h<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> a <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> b <span class="token operator">&amp;&amp;</span> k <span class="token operator">&lt;</span> c<span class="token punctuation">)</span>        cc<span class="token punctuation">[</span><span class="token function">getX</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> h<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">op</span><span class="token punctuation">(</span>LL cc<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>atk<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> lat <span class="token operator">=</span> atk<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> rat <span class="token operator">=</span> atk<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> lbt <span class="token operator">=</span> atk<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> rbt <span class="token operator">=</span> atk<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> lct <span class="token operator">=</span> atk<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> rct <span class="token operator">=</span> atk<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ht <span class="token operator">=</span> x <span class="token operator">*</span> atk<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">add</span><span class="token punctuation">(</span>cc<span class="token punctuation">,</span> lat<span class="token punctuation">,</span> lbt<span class="token punctuation">,</span> lct<span class="token punctuation">,</span> ht<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">add</span><span class="token punctuation">(</span>cc<span class="token punctuation">,</span> lat<span class="token punctuation">,</span> rbt <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> lct<span class="token punctuation">,</span> <span class="token operator">-</span>ht<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">add</span><span class="token punctuation">(</span>cc<span class="token punctuation">,</span> lat<span class="token punctuation">,</span> lbt<span class="token punctuation">,</span> rct <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span>ht<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">add</span><span class="token punctuation">(</span>cc<span class="token punctuation">,</span> lat<span class="token punctuation">,</span> rbt <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> rct <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> ht<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">add</span><span class="token punctuation">(</span>cc<span class="token punctuation">,</span> rat <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> lbt<span class="token punctuation">,</span> lct<span class="token punctuation">,</span> <span class="token operator">-</span>ht<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">add</span><span class="token punctuation">(</span>cc<span class="token punctuation">,</span> rat <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> rbt <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> lct<span class="token punctuation">,</span> ht<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">add</span><span class="token punctuation">(</span>cc<span class="token punctuation">,</span> rat <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> lbt<span class="token punctuation">,</span> rct <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> ht<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">add</span><span class="token punctuation">(</span>cc<span class="token punctuation">,</span> rat <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> rbt <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> rct <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span>ht<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span>LL sum<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> LL d<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> A<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> B<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> C<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>                sum<span class="token punctuation">[</span><span class="token function">getX</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> sum<span class="token punctuation">[</span><span class="token function">getX</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> A<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> B<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> C<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>                sum<span class="token punctuation">[</span><span class="token function">getX</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> sum<span class="token punctuation">[</span><span class="token function">getX</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> A<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> B<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> C<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>                sum<span class="token punctuation">[</span><span class="token function">getX</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> sum<span class="token punctuation">[</span><span class="token function">getX</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> A<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> B<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> C<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>sum<span class="token punctuation">[</span><span class="token function">getX</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">></span> d<span class="token punctuation">[</span><span class="token function">getX</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>A<span class="token punctuation">,</span> <span class="token operator">&amp;</span>B<span class="token punctuation">,</span> <span class="token operator">&amp;</span>C<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    a <span class="token operator">=</span> A <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    b <span class="token operator">=</span> B <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    c <span class="token operator">=</span> C <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    LL <span class="token operator">*</span>cc <span class="token operator">=</span> <span class="token keyword">new</span> LL<span class="token punctuation">[</span>a <span class="token operator">*</span> b <span class="token operator">*</span> c<span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 差分数组</span>    LL <span class="token operator">*</span>d <span class="token operator">=</span> <span class="token keyword">new</span> LL<span class="token punctuation">[</span>a <span class="token operator">*</span> b <span class="token operator">*</span> c<span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 原始血量</span>    LL <span class="token operator">*</span>sum <span class="token operator">=</span> <span class="token keyword">new</span> LL<span class="token punctuation">[</span>a <span class="token operator">*</span> b <span class="token operator">*</span> c<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 差分数组前缀和</span>    <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span>atk<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//攻击数据</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> A<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> B<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> C<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%Ld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>d<span class="token punctuation">[</span><span class="token function">getX</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d %d %d %d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>atk<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>atk<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>atk<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>atk<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>atk<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>atk<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>atk<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> r <span class="token operator">=</span> m<span class="token punctuation">,</span> last_mid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>last_mid <span class="token operator">&lt;</span> mid<span class="token punctuation">)</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> last_mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> mid<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token function">op</span><span class="token punctuation">(</span>cc<span class="token punctuation">,</span> atk<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>last_mid <span class="token operator">></span> mid<span class="token punctuation">)</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> last_mid<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token function">op</span><span class="token punctuation">(</span>cc<span class="token punctuation">,</span> atk<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">memcpy</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> cc<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>LL<span class="token punctuation">)</span> <span class="token operator">*</span> a <span class="token operator">*</span> b <span class="token operator">*</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">)</span>            r <span class="token operator">=</span> mid<span class="token punctuation">;</span>        <span class="token keyword">else</span>            l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        last_mid <span class="token operator">=</span> mid<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> r <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cc<span class="token punctuation">;</span>    <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> d<span class="token punctuation">;</span>    <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sum<span class="token punctuation">;</span>    <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> atk<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://oi-wiki.org/basic/prefix-sum/" target="_blank" rel="noopener">前缀和 &amp; 差分</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Lanqiao </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥杯 2018省赛 C/C++ A T4</title>
      <link href="/2021/04/06/lanqiao-2018p-ca-t4/"/>
      <url>/2021/04/06/lanqiao-2018p-ca-t4/</url>
      
        <content type="html"><![CDATA[<h1 id="蓝桥杯-2018省赛-C-C-A-T4"><a href="#蓝桥杯-2018省赛-C-C-A-T4" class="headerlink" title="蓝桥杯 2018省赛 C/C++ A T4"></a>蓝桥杯 2018省赛 C/C++ A T4</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>标题：第几个幸运数</p><p>到x星球旅行的游客都被发给一个整数，作为游客编号。<br>x星的国王有个怪癖，他只喜欢数字3,5和7。<br>国王规定，游客的编号如果只含有因子：3,5,7,就可以获得一份奖品。</p><p>我们来看前10个幸运数字是：<br>3 5 7 9 15 21 25 27 35 45<br>因而第11个幸运数字是：49</p><p>小明领到了一个幸运数字 59084709587505，他去领奖的时候，人家要求他准确地说出这是第几个幸运数字，否则领不到奖品。</p><p>请你帮小明计算一下，59084709587505是第几个幸运数字。</p><p>需要提交的是一个整数，请不要填写任何多余内容。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul><li>暴力法：循环进行直至最大值。耗时几十个小时，不可行</li><li>生成法：依次生成幸运数，确定第几个。<ul><li>生成过程中会出现重复元素，如何去除？</li><li>生成过程中元素并非有序，如何排序？</li></ul></li></ul><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>使用C++ STL 数据类型<code>set</code> 有序且保证元素唯一</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;set></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> MAX 59084709587505</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> t <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    set<span class="token operator">&lt;</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">></span> s<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">long</span> <span class="token keyword">long</span> tt <span class="token operator">=</span> t <span class="token operator">*</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tt <span class="token operator">&lt;=</span> MAX<span class="token punctuation">)</span>                s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>tt<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        t <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">upper_bound</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">>=</span> MAX<span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Lanqiao </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Few-shot Learning 概述</title>
      <link href="/2020/03/07/few-shot-learning-gai-shu/"/>
      <url>/2020/03/07/few-shot-learning-gai-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="Few-shot-Learning-概述"><a href="#Few-shot-Learning-概述" class="headerlink" title="Few-shot Learning 概述"></a>Few-shot Learning 概述</h1><h2 id="What-is-few-shot-Learning"><a href="#What-is-few-shot-Learning" class="headerlink" title="What is few-shot Learning?"></a>What is few-shot Learning?</h2><p>Few-shot Learning 是 Meta Learning 在监督学习领域的应用。<br>Meta Learning，又称为learning to learn，在meta training阶段将数据集分解为不同的meta task，去学习类别变化的情况下模型的泛化能力，在meta testing阶段，面对全新的类别，不需要变动已有的模型，就可以完成分类。</p><p>few-shot的训练集中包含了很多的类别，每个类别中有多个样本。<br>在训练阶段，会在训练集中随机抽取C个类别，每个类别K个样本（总共CK个数据），构建一个 meta-task，作为模型的支撑集（support set）输入；<br>再从这C个类中剩余的数据中抽取一批（batch）样本作为模型的预测对象（batch set）。<br>即要求模型从C*K个数据中学会如何区分这C个类别，这样的任务被称为C-way K-shot(C类，每个类K个样本)问题。<br>训练过程中，每次训练 (episode)都会采样得到不同meta-task。这种机制使得模型学会不同meta-task中的共性部分，比如如何提取重要特征及比较样本相似等，忘掉 meta-task中task相关部分，因此，在面对新的未见过的 meta-task时，也能较好地进行分类。[1]</p><h2 id="Models"><a href="#Models" class="headerlink" title="Models"></a>Models</h2><h3 id="Optimization-based"><a href="#Optimization-based" class="headerlink" title="Optimization based"></a>Optimization based</h3><ol><li><p>MAML [2]<br>基本思路是通过学习模型的初始化参数使得其在一步或多步迭代下实现精度最大化。<br><img src="https://raw.githubusercontent.com/wuliutx/upload-pic/master/20200210185652.png" alt="MAML">[3] </p></li><li><p>Reptile [4]<br>基本思路与MAML一致，一样是学习初始化参数，区别在于MAML训练时只一次迭代，取第二次迭代参数梯度更新；Reptile训练时多次迭代，参数向最后迭代方向作为更新方向。<br><img src="https://raw.githubusercontent.com/wuliutx/upload-pic/master/20200210183327.png" alt="Reptile">[5] </p></li><li><p>Gradient Descent as LSTM [6]<br>通过LSTM，将梯度下降看作LSTM的一种特例，通过学习forget gate &amp; input gate 参数(正则化强度 &amp; 学习率)，以期得到一种比梯度下降更好的优化算法。<br><img src="https://raw.githubusercontent.com/wuliutx/upload-pic/master/20200210185441.png" alt="Gradient Descent as LSTM">[7] </p></li></ol><h3 id="Metric-based"><a href="#Metric-based" class="headerlink" title="Metric based"></a>Metric based</h3><ol><li><p>Siamese neural networks [8]<br>输入两张图片,一张训练,一张为测试,通过CNN提取特征,再经过embedding,比较相似度,计算分数.</p></li><li><p>Prototypical Network [9]<br>寻找类别在高维空间的投影,以期通过聚类方式解决分类问题.<br><img src="https://raw.githubusercontent.com/wuliutx/upload-pic/master/20200210192535.png" alt="Prototypical Network">[10]   </p></li><li><p>Relation Network [11]<br>relation network在计算相似度时通过一个cnn来学习计算.<br><img src="https://raw.githubusercontent.com/wuliutx/upload-pic/master/20200210193006.png" alt="Relation Network">[11]   </p></li></ol><h3 id="Model-based"><a href="#Model-based" class="headerlink" title="Model based"></a>Model based</h3><ol><li>Memory-Augmented Neural Networks[12]<br><img src="https://raw.githubusercontent.com/wuliutx/upload-pic/master/20200210194232.png" alt="Model based">[13]</li></ol><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li>[1] <a href="https://daiwk.github.io/posts/ml-few-shot-learning.html" target="_blank" rel="noopener">few-shot learning</a></li><li>[2] <a href="https://arxiv.org/abs/1703.03400" target="_blank" rel="noopener">Model-Agnostic Meta-Learning for Fast Adaptation of Deep Networks</a></li><li>[3] <a href="https://youtu.be/vUwOA3SNb_E" target="_blank" rel="noopener">Meta Learning – MAML (5/9)</a></li><li>[4] <a href="https://arxiv.org/abs/1803.02999" target="_blank" rel="noopener">On First-Order Meta-Learning Algorithms</a></li><li>[5] <a href="https://youtu.be/9jJe2AD35P8" target="_blank" rel="noopener">Meta Learning – MAML (9/9)</a></li><li>[6] <a href="https://openreview.net/pdf?id=rJY0-Kcll" target="_blank" rel="noopener">Optimization as a Model for Few-Shot Learning</a></li><li>[7] <a href="https://youtu.be/G_xYYq772NQ" target="_blank" rel="noopener">Meta Learning - Gradient Descent as LSTM (2/3)</a></li><li>[8] <a href="https://www.cs.cmu.edu/~rsalakhu/papers/oneshot1.pdf" target="_blank" rel="noopener">Siamese neural networks for one-shot image recognition</a></li><li>[9] <a href="https://arxiv.org/abs/1703.05175" target="_blank" rel="noopener">Prototypical networks for few-shot learning</a></li><li>[10] <a href="https://youtu.be/semSxPP2Yzg" target="_blank" rel="noopener">Meta Learning – Metric-based (3/3)</a></li><li>[11] <a href="https://arxiv.org/abs/1711.06025" target="_blank" rel="noopener">Learning to Compare: Relation Network for Few-Shot Learning</a></li><li>[12] <a href="https://arxiv.org/abs/1605.06065" target="_blank" rel="noopener">One-shot Learning with Memory-Augmented Neural Networks</a></li><li>[13] <a href="https://zhuanlan.zhihu.com/p/61037404" target="_blank" rel="noopener">Meta-Learning(2)—Memory based方法</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Deep Learing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deep Learning </tag>
            
            <tag> Few-shot Learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS231 Assignment 2 Q5-PyTorch</title>
      <link href="/2020/01/17/assignment-2-q5-pytorch.15/"/>
      <url>/2020/01/17/assignment-2-q5-pytorch.15/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>本文为斯坦福大学CS231n课程作业及总结，若有错误，欢迎指正。<br>所有代码均已上传到GitHub项目<a href="https://github.com/notplus/cs231n-assignment/tree/master/assignment2" target="_blank" rel="noopener">cs231n-assignment2</a></p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><h3 id="1-实现一个三层全连接神经网络"><a href="#1-实现一个三层全连接神经网络" class="headerlink" title="1. 实现一个三层全连接神经网络"></a>1. 实现一个三层全连接神经网络</h3><p><strong>实现思路:</strong> 通过PyTorch实现一个三层神经网络 使用全连接层  根据官方文档进行组合即可 </p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">three_layer_convnet</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Performs the forward pass of a three-layer convolutional network with the    architecture defined above.    Inputs:    - x: A PyTorch Tensor of shape (N, 3, H, W) giving a minibatch of images    - params: A list of PyTorch Tensors giving the weights and biases for the      network; should contain the following:      - conv_w1: PyTorch Tensor of shape (channel_1, 3, KH1, KW1) giving weights        for the first convolutional layer      - conv_b1: PyTorch Tensor of shape (channel_1,) giving biases for the first        convolutional layer      - conv_w2: PyTorch Tensor of shape (channel_2, channel_1, KH2, KW2) giving        weights for the second convolutional layer      - conv_b2: PyTorch Tensor of shape (channel_2,) giving biases for the second        convolutional layer      - fc_w: PyTorch Tensor giving weights for the fully-connected layer. Can you        figure out what the shape should be?      - fc_b: PyTorch Tensor giving biases for the fully-connected layer. Can you        figure out what the shape should be?    Returns:    - scores: PyTorch Tensor of shape (N, C) giving classification scores for x    """</span>    conv_w1<span class="token punctuation">,</span> conv_b1<span class="token punctuation">,</span> conv_w2<span class="token punctuation">,</span> conv_b2<span class="token punctuation">,</span> fc_w<span class="token punctuation">,</span> fc_b <span class="token operator">=</span> params    scores <span class="token operator">=</span> None    <span class="token comment" spellcheck="true">################################################################################</span>    <span class="token comment" spellcheck="true"># TODO: Implement the forward pass for the three-layer ConvNet.                #</span>    <span class="token comment" spellcheck="true">################################################################################</span>    <span class="token comment" spellcheck="true"># *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>    channel_1<span class="token punctuation">,</span> _<span class="token punctuation">,</span> KH1<span class="token punctuation">,</span> KW1 <span class="token operator">=</span> conv_w1<span class="token punctuation">.</span>shape    channel_2<span class="token punctuation">,</span> _<span class="token punctuation">,</span> KH2<span class="token punctuation">,</span> KW2 <span class="token operator">=</span> conv_w2<span class="token punctuation">.</span>shape    conv_1 <span class="token operator">=</span> F<span class="token punctuation">.</span>conv2d<span class="token punctuation">(</span>x<span class="token punctuation">,</span> conv_w1<span class="token punctuation">,</span> bias<span class="token operator">=</span>conv_b1<span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>    relu_1 <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>conv_1<span class="token punctuation">)</span>    conv_2 <span class="token operator">=</span> F<span class="token punctuation">.</span>conv2d<span class="token punctuation">(</span>relu_1<span class="token punctuation">,</span> conv_w2<span class="token punctuation">,</span> bias<span class="token operator">=</span>conv_b2<span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    relu_2 <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>conv_2<span class="token punctuation">)</span>    faltten_1 <span class="token operator">=</span> flatten<span class="token punctuation">(</span>relu_2<span class="token punctuation">)</span>    fc_1 <span class="token operator">=</span> faltten_1<span class="token punctuation">.</span>mm<span class="token punctuation">(</span>fc_w<span class="token punctuation">)</span>    scores <span class="token operator">=</span> fc_1 <span class="token operator">+</span> fc_b    <span class="token comment" spellcheck="true"># *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>    <span class="token comment" spellcheck="true">################################################################################</span>    <span class="token comment" spellcheck="true">#                                 END OF YOUR CODE                             #</span>    <span class="token comment" spellcheck="true">################################################################################</span>    <span class="token keyword">return</span> scores</code></pre><h3 id="2-参数初始化"><a href="#2-参数初始化" class="headerlink" title="2. 参数初始化"></a>2. 参数初始化</h3><p><strong>实现思路：</strong> 调用函数进行参数初始化          </p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">################################################################################</span><span class="token comment" spellcheck="true"># TODO: Initialize the parameters of a three-layer ConvNet.                    #</span><span class="token comment" spellcheck="true">################################################################################</span><span class="token comment" spellcheck="true"># *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>conv_w1 <span class="token operator">=</span> random_weight<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>conv_b1 <span class="token operator">=</span> zero_weight<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>conv_w2 <span class="token operator">=</span> random_weight<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>conv_b2 <span class="token operator">=</span> zero_weight<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span>fc_w <span class="token operator">=</span> random_weight<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">16384</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>fc_b <span class="token operator">=</span> zero_weight<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span><span class="token comment" spellcheck="true">################################################################################</span><span class="token comment" spellcheck="true">#                                 END OF YOUR CODE                             #</span><span class="token comment" spellcheck="true">################################################################################</span>params <span class="token operator">=</span> <span class="token punctuation">[</span>conv_w1<span class="token punctuation">,</span> conv_b1<span class="token punctuation">,</span> conv_w2<span class="token punctuation">,</span> conv_b2<span class="token punctuation">,</span> fc_w<span class="token punctuation">,</span> fc_b<span class="token punctuation">]</span>train_part2<span class="token punctuation">(</span>three_layer_convnet<span class="token punctuation">,</span> params<span class="token punctuation">,</span> learning_rate<span class="token punctuation">)</span></code></pre><h3 id="3-实现一个三层卷积神经网络"><a href="#3-实现一个三层卷积神经网络" class="headerlink" title="3. 实现一个三层卷积神经网络"></a>3. 实现一个三层卷积神经网络</h3><p><strong>实现思路：</strong> 根据官方文档实现即可        </p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ThreeLayerConvNet</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> in_channel<span class="token punctuation">,</span> channel_1<span class="token punctuation">,</span> channel_2<span class="token punctuation">,</span> num_classes<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">########################################################################</span>        <span class="token comment" spellcheck="true"># TODO: Set up the layers you need for a three-layer ConvNet with the  #</span>        <span class="token comment" spellcheck="true"># architecture defined above.                                          #</span>        <span class="token comment" spellcheck="true">########################################################################</span>        <span class="token comment" spellcheck="true"># *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>        self<span class="token punctuation">.</span>conv_1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_channel<span class="token punctuation">,</span> channel_1<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>        nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>kaiming_normal_<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv_1<span class="token punctuation">.</span>weight<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#nn.init.kaiming_normal_(self.conv1.bias)</span>        self<span class="token punctuation">.</span>conv_2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>channel_1<span class="token punctuation">,</span> channel_2<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>kaiming_normal_<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv_2<span class="token punctuation">.</span>weight<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#nn.init.kaiming_normal_(self.conv_2.bias)</span>        self<span class="token punctuation">.</span>fc <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>channel_2<span class="token operator">*</span><span class="token number">32</span><span class="token operator">*</span><span class="token number">32</span><span class="token punctuation">,</span>num_classes<span class="token punctuation">)</span>        nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>kaiming_normal_<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fc<span class="token punctuation">.</span>weight<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>        <span class="token comment" spellcheck="true">########################################################################</span>        <span class="token comment" spellcheck="true">#                          END OF YOUR CODE                            #       </span>        <span class="token comment" spellcheck="true">########################################################################</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        scores <span class="token operator">=</span> None        <span class="token comment" spellcheck="true">########################################################################</span>        <span class="token comment" spellcheck="true"># TODO: Implement the forward function for a 3-layer ConvNet. you      #</span>        <span class="token comment" spellcheck="true"># should use the layers you defined in __init__ and specify the        #</span>        <span class="token comment" spellcheck="true"># connectivity of those layers in forward()                            #</span>        <span class="token comment" spellcheck="true">########################################################################</span>        <span class="token comment" spellcheck="true"># *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>conv_1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>conv_2<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> flatten<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>fc<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        scores <span class="token operator">=</span> x        <span class="token comment" spellcheck="true"># *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>        <span class="token comment" spellcheck="true">########################################################################</span>        <span class="token comment" spellcheck="true">#                             END OF YOUR CODE                         #</span>        <span class="token comment" spellcheck="true">########################################################################</span>        <span class="token keyword">return</span> scores</code></pre><h3 id="4-通过序列API实现三层神经网络"><a href="#4-通过序列API实现三层神经网络" class="headerlink" title="4. 通过序列API实现三层神经网络"></a>4. 通过序列API实现三层神经网络</h3><p><strong>实现思路：</strong> 搭建网络很简单，参数的初始化如果按照题目要求的使用<code>random_weight</code>函数，结果很差     </p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">################################################################################</span><span class="token comment" spellcheck="true"># TODO: Rewrite the 2-layer ConvNet with bias from Part III with the           #</span><span class="token comment" spellcheck="true"># Sequential API.                                                              #</span><span class="token comment" spellcheck="true">################################################################################</span><span class="token comment" spellcheck="true"># *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>model <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>    nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>channel_1<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>channel_1<span class="token punctuation">,</span>channel_2<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    Flatten<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>channel_2<span class="token operator">*</span><span class="token number">32</span><span class="token operator">*</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>lr<span class="token operator">=</span>learning_rate<span class="token punctuation">,</span>momentum<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">,</span>nesterov<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># def init_weights(m):</span><span class="token comment" spellcheck="true">#     if type(m) == nn.Conv2d or type(m) == nn.Linear:</span><span class="token comment" spellcheck="true">#         m.weight.data = random_weight(m.weight.size())</span><span class="token comment" spellcheck="true">#         #m.weight.data = nn.init.kaiming_normal_(m.weight)</span><span class="token comment" spellcheck="true">#         m.bias.data = zero_weight(m.bias.size())</span><span class="token comment" spellcheck="true"># model.apply(init_weights)</span><span class="token comment" spellcheck="true"># *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span><span class="token comment" spellcheck="true">################################################################################</span><span class="token comment" spellcheck="true">#                                 END OF YOUR CODE                             </span><span class="token comment" spellcheck="true">################################################################################</span></code></pre><h3 id="5-自行搭建网络对CIFAR-10进行分类"><a href="#5-自行搭建网络对CIFAR-10进行分类" class="headerlink" title="5. 自行搭建网络对CIFAR-10进行分类"></a>5. 自行搭建网络对CIFAR-10进行分类</h3><p>以下是我参考<a href="http://zh.d2l.ai/chapter_convolutional-neural-networks/resnet.html" target="_blank" rel="noopener">resnet</a>实现的Resnet-18</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">################################################################################</span><span class="token comment" spellcheck="true"># TODO:                                                                        #         </span><span class="token comment" spellcheck="true"># Experiment with any architectures, optimizers, and hyperparameters.          #</span><span class="token comment" spellcheck="true"># Achieve AT LEAST 70% accuracy on the *validation set* within 10 epochs.      #</span><span class="token comment" spellcheck="true">#                                                                              #</span><span class="token comment" spellcheck="true"># Note that you can use the check_accuracy function to evaluate on either      #</span><span class="token comment" spellcheck="true"># the test set or the validation set, by passing either loader_test or         #</span><span class="token comment" spellcheck="true"># loader_val as the second argument to check_accuracy. You should not touch    #</span><span class="token comment" spellcheck="true"># the test set until you have finished your architecture and  hyperparameter   #</span><span class="token comment" spellcheck="true"># tuning, and only run the test set once at the end to report a final value.   #</span><span class="token comment" spellcheck="true">################################################################################</span>model <span class="token operator">=</span> Noneoptimizer <span class="token operator">=</span> None<span class="token comment" spellcheck="true"># *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span><span class="token keyword">class</span> <span class="token class-name">Residual</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> in_channel<span class="token punctuation">,</span> out_channels<span class="token punctuation">,</span> use_1x1_conv<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> strides<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv_1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_channel<span class="token punctuation">,</span> out_channels<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> stride<span class="token operator">=</span>strides<span class="token punctuation">)</span>        nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>kaiming_normal_<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv_1<span class="token punctuation">.</span>weight<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv_2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>out_channels<span class="token punctuation">,</span> out_channels<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>kaiming_normal_<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv_2<span class="token punctuation">.</span>weight<span class="token punctuation">)</span>        <span class="token keyword">if</span> use_1x1_conv<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>conv_3 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_channel<span class="token punctuation">,</span>out_channels<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>stride<span class="token operator">=</span>strides<span class="token punctuation">)</span>            nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>kaiming_normal_<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv_3<span class="token punctuation">.</span>weight<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>conv_3 <span class="token operator">=</span> None        self<span class="token punctuation">.</span>use_1x1_conv <span class="token operator">=</span> use_1x1_conv        self<span class="token punctuation">.</span>bn_1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span>out_channels<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bn_2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span>out_channels<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        Y <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>bn_1<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv_1<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        Y <span class="token operator">=</span> self<span class="token punctuation">.</span>bn_2<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv_2<span class="token punctuation">(</span>Y<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>conv_3<span class="token punctuation">:</span>            x <span class="token operator">=</span> self<span class="token punctuation">.</span>conv_3<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>Y<span class="token operator">+</span>x<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">resnet_block</span><span class="token punctuation">(</span>nn_module<span class="token punctuation">,</span> in_channels<span class="token punctuation">,</span> out_channels<span class="token punctuation">,</span> num_residuals<span class="token punctuation">,</span> block_index<span class="token punctuation">,</span> first_block<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>num_residuals<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">and</span> <span class="token operator">not</span> first_block<span class="token punctuation">:</span>            stride <span class="token operator">=</span> <span class="token number">1</span>            <span class="token keyword">if</span> block_index <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">:</span>                stride <span class="token operator">=</span> <span class="token number">2</span>            nn_module<span class="token punctuation">.</span>add_module<span class="token punctuation">(</span><span class="token string">'resnet_block_{:d}_{:d}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>block_index<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span>Residual<span class="token punctuation">(</span>in_channels<span class="token punctuation">,</span> out_channels<span class="token punctuation">,</span>use_1x1_conv<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>strides<span class="token operator">=</span>stride<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            nn_module<span class="token punctuation">.</span>add_module<span class="token punctuation">(</span><span class="token string">'resnet_block_{:d}_{:d}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>block_index<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span>Residual<span class="token punctuation">(</span>in_channels<span class="token punctuation">,</span> out_channels<span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token keyword">else</span><span class="token punctuation">:</span>            nn_module<span class="token punctuation">.</span>add_module<span class="token punctuation">(</span><span class="token string">'resnet_block_{:d}_{:d}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>block_index<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span>Residual<span class="token punctuation">(</span>out_channels<span class="token punctuation">,</span> out_channels<span class="token punctuation">)</span><span class="token punctuation">)</span> model <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>    nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span>stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>resnet_block<span class="token punctuation">(</span>model<span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>first_block<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>resnet_block<span class="token punctuation">(</span>model<span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>resnet_block<span class="token punctuation">(</span>model<span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>resnet_block<span class="token punctuation">(</span>model<span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">,</span><span class="token number">512</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add_module<span class="token punctuation">(</span><span class="token string">'avgpool'</span><span class="token punctuation">,</span>nn<span class="token punctuation">.</span>AdaptiveAvgPool2d<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add_module<span class="token punctuation">(</span><span class="token string">'flatten'</span><span class="token punctuation">,</span>nn<span class="token punctuation">.</span>Flatten<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add_module<span class="token punctuation">(</span><span class="token string">'linear'</span><span class="token punctuation">,</span>nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>lr<span class="token operator">=</span><span class="token number">1e</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span>momentum<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">,</span>nesterov<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span><span class="token comment" spellcheck="true">################################################################################</span><span class="token comment" spellcheck="true">#                                 END OF YOUR CODE                             </span><span class="token comment" spellcheck="true">################################################################################</span><span class="token comment" spellcheck="true"># You should get at least 70% accuracy</span>train_part34<span class="token punctuation">(</span>model<span class="token punctuation">,</span> optimizer<span class="token punctuation">,</span> epochs<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span></code></pre><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>本次作业主要是关于PyTorch的使用，大概了解了PyTorch的用法，可以看一些网络的代码，其实大同小异。</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="http://zh.d2l.ai/chapter_convolutional-neural-networks/resnet.html" target="_blank" rel="noopener">5.11. 残差网络（ResNet）</a></li><li><a href="https://pytorch.org/docs/stable/nn.html#conv2d" target="_blank" rel="noopener">TORCH.NN</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> CS231 Assignment </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deep Learning </tag>
            
            <tag> Assignment </tag>
            
            <tag> CS231n </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS231 Assignment 2 Q4-ConvNet</title>
      <link href="/2020/01/16/assignment-2-q4-convnet/"/>
      <url>/2020/01/16/assignment-2-q4-convnet/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>本文为斯坦福大学CS231n课程作业及总结，若有错误，欢迎指正。<br>所有代码均已上传到GitHub项目<a href="https://github.com/notplus/cs231n-assignment/tree/master/assignment2" target="_blank" rel="noopener">cs231n-assignment2</a></p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><h3 id="1-Convolution-Naive-forward"><a href="#1-Convolution-Naive-forward" class="headerlink" title="1. Convolution: Naive forward"></a>1. Convolution: Naive forward</h3><p><strong>实现思路:</strong> 通过循环计算卷积层前向传播，效率较低</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">conv_forward_naive</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> w<span class="token punctuation">,</span> b<span class="token punctuation">,</span> conv_param<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    A naive implementation of the forward pass for a convolutional layer.    The input consists of N data points, each with C channels, height H and    width W. We convolve each input with F different filters, where each filter    spans all C channels and has height HH and width WW.    Input:    - x: Input data of shape (N, C, H, W)    - w: Filter weights of shape (F, C, HH, WW)    - b: Biases, of shape (F,)    - conv_param: A dictionary with the following keys:      - 'stride': The number of pixels between adjacent receptive fields in the        horizontal and vertical directions.      - 'pad': The number of pixels that will be used to zero-pad the input.    During padding, 'pad' zeros should be placed symmetrically (i.e equally on both sides)    along the height and width axes of the input. Be careful not to modfiy the original    input x directly.    Returns a tuple of:    - out: Output data, of shape (N, F, H', W') where H' and W' are given by      H' = 1 + (H + 2 * pad - HH) / stride      W' = 1 + (W + 2 * pad - WW) / stride    - cache: (x, w, b, conv_param)    """</span>    out <span class="token operator">=</span> None    <span class="token comment" spellcheck="true">###########################################################################</span>    <span class="token comment" spellcheck="true"># TODO: Implement the convolutional forward pass.                         #</span>    <span class="token comment" spellcheck="true"># Hint: you can use the function np.pad for padding.                      #</span>    <span class="token comment" spellcheck="true">###########################################################################</span>    <span class="token comment" spellcheck="true"># *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>    pad <span class="token operator">=</span> conv_param<span class="token punctuation">[</span><span class="token string">'pad'</span><span class="token punctuation">]</span>    stride <span class="token operator">=</span> conv_param<span class="token punctuation">[</span><span class="token string">'stride'</span><span class="token punctuation">]</span>    x_new <span class="token operator">=</span> np<span class="token punctuation">.</span>pad<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>pad<span class="token punctuation">,</span>pad<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>pad<span class="token punctuation">,</span>pad<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'constant'</span><span class="token punctuation">)</span>    N<span class="token punctuation">,</span> C<span class="token punctuation">,</span> H<span class="token punctuation">,</span> W <span class="token operator">=</span> x<span class="token punctuation">.</span>shape    F<span class="token punctuation">,</span> _<span class="token punctuation">,</span> HH<span class="token punctuation">,</span> WW <span class="token operator">=</span> w<span class="token punctuation">.</span>shape    H_new <span class="token operator">=</span> int<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span>H <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> pad <span class="token operator">-</span> HH<span class="token punctuation">)</span> <span class="token operator">/</span> stride<span class="token punctuation">)</span>    W_new <span class="token operator">=</span> int<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span>W <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> pad <span class="token operator">-</span> WW<span class="token punctuation">)</span> <span class="token operator">/</span> stride<span class="token punctuation">)</span>    out <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>N<span class="token punctuation">,</span>F<span class="token punctuation">,</span>H_new<span class="token punctuation">,</span>W_new<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>H_new<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>W_new<span class="token punctuation">)</span><span class="token punctuation">:</span>        x_masked <span class="token operator">=</span> x_new<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span>i<span class="token operator">*</span>stride<span class="token punctuation">:</span>i<span class="token operator">*</span>stride<span class="token operator">+</span>HH<span class="token punctuation">,</span>j<span class="token operator">*</span>stride<span class="token punctuation">:</span>j<span class="token operator">*</span>stride<span class="token operator">+</span>WW<span class="token punctuation">]</span>                <span class="token keyword">for</span> c <span class="token keyword">in</span> range<span class="token punctuation">(</span>F<span class="token punctuation">)</span><span class="token punctuation">:</span>          out<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>c<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>x_masked <span class="token operator">*</span> w<span class="token punctuation">[</span>c<span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token punctuation">[</span>c<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>    <span class="token comment" spellcheck="true">###########################################################################</span>    <span class="token comment" spellcheck="true">#                             END OF YOUR CODE                            #</span>    <span class="token comment" spellcheck="true">###########################################################################</span>    cache <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> w<span class="token punctuation">,</span> b<span class="token punctuation">,</span> conv_param<span class="token punctuation">)</span>    <span class="token keyword">return</span> out<span class="token punctuation">,</span> cache</code></pre><h3 id="2-convolutional-backward"><a href="#2-convolutional-backward" class="headerlink" title="2. convolutional backward"></a>2. convolutional backward</h3><p><strong>实现思路：</strong> 求导计算梯度，进行反向传播      </p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">conv_backward_naive</span><span class="token punctuation">(</span>dout<span class="token punctuation">,</span> cache<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    A naive implementation of the backward pass for a convolutional layer.    Inputs:    - dout: Upstream derivatives.    - cache: A tuple of (x, w, b, conv_param) as in conv_forward_naive    Returns a tuple of:    - dx: Gradient with respect to x    - dw: Gradient with respect to w    - db: Gradient with respect to b    """</span>    dx<span class="token punctuation">,</span> dw<span class="token punctuation">,</span> db <span class="token operator">=</span> None<span class="token punctuation">,</span> None<span class="token punctuation">,</span> None    <span class="token comment" spellcheck="true">###########################################################################</span>    <span class="token comment" spellcheck="true"># TODO: Implement the convolutional backward pass.                        #</span>    <span class="token comment" spellcheck="true">###########################################################################</span>    <span class="token comment" spellcheck="true"># *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>    x<span class="token punctuation">,</span> w<span class="token punctuation">,</span> b<span class="token punctuation">,</span> conv_param <span class="token operator">=</span> cache    pad <span class="token operator">=</span> conv_param<span class="token punctuation">[</span><span class="token string">'pad'</span><span class="token punctuation">]</span>    stride <span class="token operator">=</span> conv_param<span class="token punctuation">[</span><span class="token string">'stride'</span><span class="token punctuation">]</span>    x_pad <span class="token operator">=</span> np<span class="token punctuation">.</span>pad<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>pad<span class="token punctuation">,</span>pad<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>pad<span class="token punctuation">,</span>pad<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'constant'</span><span class="token punctuation">)</span>    N<span class="token punctuation">,</span> C<span class="token punctuation">,</span> H<span class="token punctuation">,</span> W <span class="token operator">=</span> x<span class="token punctuation">.</span>shape    F<span class="token punctuation">,</span> _<span class="token punctuation">,</span> HH<span class="token punctuation">,</span> WW <span class="token operator">=</span> w<span class="token punctuation">.</span>shape    H_new <span class="token operator">=</span> int<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span>H <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> pad <span class="token operator">-</span> HH<span class="token punctuation">)</span> <span class="token operator">/</span> stride<span class="token punctuation">)</span>    W_new <span class="token operator">=</span> int<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span>W <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> pad <span class="token operator">-</span> WW<span class="token punctuation">)</span> <span class="token operator">/</span> stride<span class="token punctuation">)</span>    dx <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros_like<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    dw <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros_like<span class="token punctuation">(</span>w<span class="token punctuation">)</span>    db <span class="token operator">=</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>dout<span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    dx_pad <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros_like<span class="token punctuation">(</span>x_pad<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>H_new<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>W_new<span class="token punctuation">)</span><span class="token punctuation">:</span>        x_masked <span class="token operator">=</span> x_pad<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span>i<span class="token operator">*</span>stride<span class="token punctuation">:</span>i<span class="token operator">*</span>stride<span class="token operator">+</span>HH<span class="token punctuation">,</span>j<span class="token operator">*</span>stride<span class="token punctuation">:</span>j<span class="token operator">*</span>stride<span class="token operator">+</span>WW<span class="token punctuation">]</span>                <span class="token keyword">for</span> c <span class="token keyword">in</span> range<span class="token punctuation">(</span>F<span class="token punctuation">)</span><span class="token punctuation">:</span>          dw<span class="token punctuation">[</span>c <span class="token punctuation">,</span><span class="token punctuation">:</span> <span class="token punctuation">,</span><span class="token punctuation">:</span> <span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">+=</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>x_masked <span class="token operator">*</span> <span class="token punctuation">(</span>dout<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> None<span class="token punctuation">,</span> None<span class="token punctuation">,</span> None<span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> n <span class="token keyword">in</span> range<span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">:</span>          dx_pad<span class="token punctuation">[</span>n<span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span>i<span class="token operator">*</span>stride<span class="token punctuation">:</span>i<span class="token operator">*</span>stride<span class="token operator">+</span>HH<span class="token punctuation">,</span>j<span class="token operator">*</span>stride<span class="token punctuation">:</span>j<span class="token operator">*</span>stride<span class="token operator">+</span>WW<span class="token punctuation">]</span> <span class="token operator">+=</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>w<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>dout<span class="token punctuation">[</span>n<span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>None<span class="token punctuation">,</span>None<span class="token punctuation">,</span>None<span class="token punctuation">]</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    dx <span class="token operator">=</span> dx_pad<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span>pad<span class="token punctuation">:</span><span class="token operator">-</span>pad<span class="token punctuation">,</span>pad<span class="token punctuation">:</span><span class="token operator">-</span>pad<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>    <span class="token comment" spellcheck="true">###########################################################################</span>    <span class="token comment" spellcheck="true">#                             END OF YOUR CODE                            #</span>    <span class="token comment" spellcheck="true">###########################################################################</span>    <span class="token keyword">return</span> dx<span class="token punctuation">,</span> dw<span class="token punctuation">,</span> db</code></pre><h3 id="3-Max-Pooling-Naive-forward"><a href="#3-Max-Pooling-Naive-forward" class="headerlink" title="3. Max-Pooling: Naive forward"></a>3. Max-Pooling: Naive forward</h3><p><strong>实现思路：</strong> 简单方式计算Maxpooling前向传播      </p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">max_pool_forward_naive</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> pool_param<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    A naive implementation of the forward pass for a max-pooling layer.    Inputs:    - x: Input data, of shape (N, C, H, W)    - pool_param: dictionary with the following keys:      - 'pool_height': The height of each pooling region      - 'pool_width': The width of each pooling region      - 'stride': The distance between adjacent pooling regions    No padding is necessary here. Output size is given by    Returns a tuple of:    - out: Output data, of shape (N, C, H', W') where H' and W' are given by      H' = 1 + (H - pool_height) / stride      W' = 1 + (W - pool_width) / stride    - cache: (x, pool_param)    """</span>    out <span class="token operator">=</span> None    <span class="token comment" spellcheck="true">###########################################################################</span>    <span class="token comment" spellcheck="true"># TODO: Implement the max-pooling forward pass                            #</span>    <span class="token comment" spellcheck="true">###########################################################################</span>    <span class="token comment" spellcheck="true"># *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>    N<span class="token punctuation">,</span> C<span class="token punctuation">,</span> H<span class="token punctuation">,</span> W <span class="token operator">=</span> x<span class="token punctuation">.</span>shape    pool_height <span class="token operator">=</span> pool_param<span class="token punctuation">[</span><span class="token string">'pool_height'</span><span class="token punctuation">]</span>    pool_width <span class="token operator">=</span> pool_param<span class="token punctuation">[</span><span class="token string">'pool_width'</span><span class="token punctuation">]</span>    stride <span class="token operator">=</span> pool_param<span class="token punctuation">[</span><span class="token string">'stride'</span><span class="token punctuation">]</span>    H_out <span class="token operator">=</span> int<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span>H <span class="token operator">-</span> pool_height<span class="token punctuation">)</span> <span class="token operator">/</span> stride<span class="token punctuation">)</span>    W_out <span class="token operator">=</span> int<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span>W <span class="token operator">-</span> pool_width<span class="token punctuation">)</span> <span class="token operator">/</span> stride<span class="token punctuation">)</span>    out <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>N<span class="token punctuation">,</span>C<span class="token punctuation">,</span>H_out<span class="token punctuation">,</span>W_out<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>H_out<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>W_out<span class="token punctuation">)</span><span class="token punctuation">:</span>        x_masked <span class="token operator">=</span> x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span>i<span class="token operator">*</span>stride<span class="token punctuation">:</span>i<span class="token operator">*</span>stride<span class="token operator">+</span>pool_height<span class="token punctuation">,</span>j<span class="token operator">*</span>stride<span class="token punctuation">:</span>j<span class="token operator">*</span>stride<span class="token operator">+</span>pool_width<span class="token punctuation">]</span>        out<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>max<span class="token punctuation">(</span>x_masked<span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>    <span class="token comment" spellcheck="true">###########################################################################</span>    <span class="token comment" spellcheck="true">#                             END OF YOUR CODE                            #</span>    <span class="token comment" spellcheck="true">###########################################################################</span>    cache <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> pool_param<span class="token punctuation">)</span>    <span class="token keyword">return</span> out<span class="token punctuation">,</span> cache</code></pre><h3 id="4-Max-Pooling-Naive-backward"><a href="#4-Max-Pooling-Naive-backward" class="headerlink" title="4. Max-Pooling: Naive backward"></a>4. Max-Pooling: Naive backward</h3><p><strong>实现思路：</strong> 简单方式计算Maxpooling反向传播      </p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">max_pool_backward_naive</span><span class="token punctuation">(</span>dout<span class="token punctuation">,</span> cache<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    A naive implementation of the backward pass for a max-pooling layer.    Inputs:    - dout: Upstream derivatives    - cache: A tuple of (x, pool_param) as in the forward pass.    Returns:    - dx: Gradient with respect to x    """</span>    dx <span class="token operator">=</span> None    <span class="token comment" spellcheck="true">###########################################################################</span>    <span class="token comment" spellcheck="true"># TODO: Implement the max-pooling backward pass                           #</span>    <span class="token comment" spellcheck="true">###########################################################################</span>    <span class="token comment" spellcheck="true"># *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>    x<span class="token punctuation">,</span> pool_param <span class="token operator">=</span> cache    dx <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros_like<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    N<span class="token punctuation">,</span> C<span class="token punctuation">,</span> H<span class="token punctuation">,</span> W <span class="token operator">=</span> x<span class="token punctuation">.</span>shape    pool_height <span class="token operator">=</span> pool_param<span class="token punctuation">[</span><span class="token string">'pool_height'</span><span class="token punctuation">]</span>    pool_width <span class="token operator">=</span> pool_param<span class="token punctuation">[</span><span class="token string">'pool_width'</span><span class="token punctuation">]</span>    stride <span class="token operator">=</span> pool_param<span class="token punctuation">[</span><span class="token string">'stride'</span><span class="token punctuation">]</span>    H_out <span class="token operator">=</span> int<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span>H <span class="token operator">-</span> pool_height<span class="token punctuation">)</span> <span class="token operator">/</span> stride<span class="token punctuation">)</span>    W_out <span class="token operator">=</span> int<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span>W <span class="token operator">-</span> pool_width<span class="token punctuation">)</span> <span class="token operator">/</span> stride<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>H_out<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>W_out<span class="token punctuation">)</span><span class="token punctuation">:</span>        x_masked <span class="token operator">=</span> x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span>i<span class="token operator">*</span>stride<span class="token punctuation">:</span>i<span class="token operator">*</span>stride<span class="token operator">+</span>pool_height<span class="token punctuation">,</span>j<span class="token operator">*</span>stride<span class="token punctuation">:</span>j<span class="token operator">*</span>stride<span class="token operator">+</span>pool_width<span class="token punctuation">]</span>        max_mask <span class="token operator">=</span> np<span class="token punctuation">.</span>max<span class="token punctuation">(</span>x_masked<span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        temp_mask <span class="token operator">=</span> x_masked <span class="token operator">==</span> <span class="token punctuation">(</span>max_mask<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span>None<span class="token punctuation">,</span>None<span class="token punctuation">]</span>        dx<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span>i<span class="token operator">*</span>stride<span class="token punctuation">:</span>i<span class="token operator">*</span>stride<span class="token operator">+</span>pool_height<span class="token punctuation">,</span>j<span class="token operator">*</span>stride<span class="token punctuation">:</span>j<span class="token operator">*</span>stride<span class="token operator">+</span>pool_width<span class="token punctuation">]</span> <span class="token operator">+=</span> temp_mask <span class="token operator">*</span> <span class="token punctuation">(</span>dout<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span>None<span class="token punctuation">,</span>None<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>    <span class="token comment" spellcheck="true">###########################################################################</span>    <span class="token comment" spellcheck="true">#                             END OF YOUR CODE                            #</span>    <span class="token comment" spellcheck="true">###########################################################################</span>    <span class="token keyword">return</span> dx</code></pre><h3 id="5-Max-Pooling-Naive-backward"><a href="#5-Max-Pooling-Naive-backward" class="headerlink" title="5. Max-Pooling: Naive backward"></a>5. Max-Pooling: Naive backward</h3><p><strong>实现思路：</strong> 简单方式计算Maxpooling反向传播      </p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">max_pool_backward_naive</span><span class="token punctuation">(</span>dout<span class="token punctuation">,</span> cache<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    A naive implementation of the backward pass for a max-pooling layer.    Inputs:    - dout: Upstream derivatives    - cache: A tuple of (x, pool_param) as in the forward pass.    Returns:    - dx: Gradient with respect to x    """</span>    dx <span class="token operator">=</span> None    <span class="token comment" spellcheck="true">###########################################################################</span>    <span class="token comment" spellcheck="true"># TODO: Implement the max-pooling backward pass                           #</span>    <span class="token comment" spellcheck="true">###########################################################################</span>    <span class="token comment" spellcheck="true"># *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>    x<span class="token punctuation">,</span> pool_param <span class="token operator">=</span> cache    dx <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros_like<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    N<span class="token punctuation">,</span> C<span class="token punctuation">,</span> H<span class="token punctuation">,</span> W <span class="token operator">=</span> x<span class="token punctuation">.</span>shape    pool_height <span class="token operator">=</span> pool_param<span class="token punctuation">[</span><span class="token string">'pool_height'</span><span class="token punctuation">]</span>    pool_width <span class="token operator">=</span> pool_param<span class="token punctuation">[</span><span class="token string">'pool_width'</span><span class="token punctuation">]</span>    stride <span class="token operator">=</span> pool_param<span class="token punctuation">[</span><span class="token string">'stride'</span><span class="token punctuation">]</span>    H_out <span class="token operator">=</span> int<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span>H <span class="token operator">-</span> pool_height<span class="token punctuation">)</span> <span class="token operator">/</span> stride<span class="token punctuation">)</span>    W_out <span class="token operator">=</span> int<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span>W <span class="token operator">-</span> pool_width<span class="token punctuation">)</span> <span class="token operator">/</span> stride<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>H_out<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>W_out<span class="token punctuation">)</span><span class="token punctuation">:</span>        x_masked <span class="token operator">=</span> x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span>i<span class="token operator">*</span>stride<span class="token punctuation">:</span>i<span class="token operator">*</span>stride<span class="token operator">+</span>pool_height<span class="token punctuation">,</span>j<span class="token operator">*</span>stride<span class="token punctuation">:</span>j<span class="token operator">*</span>stride<span class="token operator">+</span>pool_width<span class="token punctuation">]</span>        max_mask <span class="token operator">=</span> np<span class="token punctuation">.</span>max<span class="token punctuation">(</span>x_masked<span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        temp_mask <span class="token operator">=</span> x_masked <span class="token operator">==</span> <span class="token punctuation">(</span>max_mask<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span>None<span class="token punctuation">,</span>None<span class="token punctuation">]</span>        dx<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span>i<span class="token operator">*</span>stride<span class="token punctuation">:</span>i<span class="token operator">*</span>stride<span class="token operator">+</span>pool_height<span class="token punctuation">,</span>j<span class="token operator">*</span>stride<span class="token punctuation">:</span>j<span class="token operator">*</span>stride<span class="token operator">+</span>pool_width<span class="token punctuation">]</span> <span class="token operator">+=</span> temp_mask <span class="token operator">*</span> <span class="token punctuation">(</span>dout<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span>None<span class="token punctuation">,</span>None<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>    <span class="token comment" spellcheck="true">###########################################################################</span>    <span class="token comment" spellcheck="true">#                             END OF YOUR CODE                            #</span>    <span class="token comment" spellcheck="true">###########################################################################</span>    <span class="token keyword">return</span> dx</code></pre><h3 id="6-简单三层卷积神经网络"><a href="#6-简单三层卷积神经网络" class="headerlink" title="6 简单三层卷积神经网络"></a>6 简单三层卷积神经网络</h3><p><strong>实现思路：</strong></p><ul><li>初始化和之前相同，权重采用高斯分布，偏差使用零初始化</li><li>前向传播和反向传播与之前三层全连接层实现类似，都是通过已经写好的前向/反向传播组合计算</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ThreeLayerConvNet</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    A three-layer convolutional network with the following architecture:    conv - relu - 2x2 max pool - affine - relu - affine - softmax    The network operates on minibatches of data that have shape (N, C, H, W)    consisting of N images, each with height H and width W and with C input    channels.    """</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> input_dim<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span> num_filters<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span> filter_size<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">,</span>                 hidden_dim<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> num_classes<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> weight_scale<span class="token operator">=</span><span class="token number">1e</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> reg<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">,</span>                 dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Initialize a new network.        Inputs:        - input_dim: Tuple (C, H, W) giving size of input data        - num_filters: Number of filters to use in the convolutional layer        - filter_size: Width/height of filters to use in the convolutional layer        - hidden_dim: Number of units to use in the fully-connected hidden layer        - num_classes: Number of scores to produce from the final affine layer.        - weight_scale: Scalar giving standard deviation for random initialization          of weights.        - reg: Scalar giving L2 regularization strength        - dtype: numpy datatype to use for computation.        """</span>        self<span class="token punctuation">.</span>params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        self<span class="token punctuation">.</span>reg <span class="token operator">=</span> reg        self<span class="token punctuation">.</span>dtype <span class="token operator">=</span> dtype        <span class="token comment" spellcheck="true">############################################################################</span>        <span class="token comment" spellcheck="true"># TODO: Initialize weights and biases for the three-layer convolutional    #</span>        <span class="token comment" spellcheck="true"># network. Weights should be initialized from a Gaussian centered at 0.0   #</span>        <span class="token comment" spellcheck="true"># with standard deviation equal to weight_scale; biases should be          #</span>        <span class="token comment" spellcheck="true"># initialized to zero. All weights and biases should be stored in the      #</span>        <span class="token comment" spellcheck="true">#  dictionary self.params. Store weights and biases for the convolutional  #</span>        <span class="token comment" spellcheck="true"># layer using the keys 'W1' and 'b1'; use keys 'W2' and 'b2' for the       #</span>        <span class="token comment" spellcheck="true"># weights and biases of the hidden affine layer, and keys 'W3' and 'b3'    #</span>        <span class="token comment" spellcheck="true"># for the weights and biases of the output affine layer.                   #</span>        <span class="token comment" spellcheck="true">#                                                                          #</span>        <span class="token comment" spellcheck="true"># IMPORTANT: For this assignment, you can assume that the padding          #</span>        <span class="token comment" spellcheck="true"># and stride of the first convolutional layer are chosen so that           #</span>        <span class="token comment" spellcheck="true"># **the width and height of the input are preserved**. Take a look at      #</span>        <span class="token comment" spellcheck="true"># the start of the loss() function to see how that happens.                #                           </span>        <span class="token comment" spellcheck="true">############################################################################</span>        <span class="token comment" spellcheck="true"># *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>        C<span class="token punctuation">,</span> H<span class="token punctuation">,</span> W <span class="token operator">=</span> input_dim        self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'W1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span>scale<span class="token operator">=</span>weight_scale<span class="token punctuation">,</span>size<span class="token operator">=</span><span class="token punctuation">(</span>num_filters<span class="token punctuation">,</span>C<span class="token punctuation">,</span>filter_size<span class="token punctuation">,</span>filter_size<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'b1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>num_filters<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'W2'</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span>scale<span class="token operator">=</span>weight_scale<span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span>int<span class="token punctuation">(</span>H<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">*</span>int<span class="token punctuation">(</span>W<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">*</span>num_filters<span class="token punctuation">,</span>hidden_dim<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'b2'</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>hidden_dim<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'W3'</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span>scale<span class="token operator">=</span>weight_scale<span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span>hidden_dim<span class="token punctuation">,</span>num_classes<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'b3'</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>num_classes<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>        <span class="token comment" spellcheck="true">############################################################################</span>        <span class="token comment" spellcheck="true">#                             END OF YOUR CODE                             #</span>        <span class="token comment" spellcheck="true">############################################################################</span>        <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> self<span class="token punctuation">.</span>params<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>params<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">.</span>astype<span class="token punctuation">(</span>dtype<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">loss</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> X<span class="token punctuation">,</span> y<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Evaluate loss and gradient for the three-layer convolutional network.        Input / output: Same API as TwoLayerNet in fc_net.py.        """</span>        W1<span class="token punctuation">,</span> b1 <span class="token operator">=</span> self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'W1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'b1'</span><span class="token punctuation">]</span>        W2<span class="token punctuation">,</span> b2 <span class="token operator">=</span> self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'W2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'b2'</span><span class="token punctuation">]</span>        W3<span class="token punctuation">,</span> b3 <span class="token operator">=</span> self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'W3'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'b3'</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># pass conv_param to the forward pass for the convolutional layer</span>        <span class="token comment" spellcheck="true"># Padding and stride chosen to preserve the input spatial size</span>        filter_size <span class="token operator">=</span> W1<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>        conv_param <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'stride'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'pad'</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>filter_size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true"># pass pool_param to the forward pass for the max-pooling layer</span>        pool_param <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'pool_height'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'pool_width'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'stride'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span>        scores <span class="token operator">=</span> None        <span class="token comment" spellcheck="true">############################################################################</span>        <span class="token comment" spellcheck="true"># TODO: Implement the forward pass for the three-layer convolutional net,  #</span>        <span class="token comment" spellcheck="true"># computing the class scores for X and storing them in the scores          #</span>        <span class="token comment" spellcheck="true"># variable.                                                                #</span>        <span class="token comment" spellcheck="true">#                                                                          #</span>        <span class="token comment" spellcheck="true"># Remember you can use the functions defined in cs231n/fast_layers.py and  #</span>        <span class="token comment" spellcheck="true"># cs231n/layer_utils.py in your implementation (already imported).         #</span>        <span class="token comment" spellcheck="true">############################################################################</span>        <span class="token comment" spellcheck="true"># *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>        a1<span class="token punctuation">,</span> a1_cache <span class="token operator">=</span> conv_relu_pool_forward<span class="token punctuation">(</span>X<span class="token punctuation">,</span>self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'W1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'b1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>conv_param<span class="token punctuation">,</span>pool_param<span class="token punctuation">)</span>        a2<span class="token punctuation">,</span> a2_cache <span class="token operator">=</span> affine_relu_forward<span class="token punctuation">(</span>a1<span class="token punctuation">,</span> self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'W2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'b2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        a3<span class="token punctuation">,</span> a3_cache <span class="token operator">=</span> affine_forward<span class="token punctuation">(</span>a2<span class="token punctuation">,</span> self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'W3'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'b3'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        scores <span class="token operator">=</span> a3        <span class="token comment" spellcheck="true"># *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>        <span class="token comment" spellcheck="true">############################################################################</span>        <span class="token comment" spellcheck="true">#                             END OF YOUR CODE                             #</span>        <span class="token comment" spellcheck="true">############################################################################</span>        <span class="token keyword">if</span> y <span class="token keyword">is</span> None<span class="token punctuation">:</span>            <span class="token keyword">return</span> scores        loss<span class="token punctuation">,</span> grads <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">############################################################################</span>        <span class="token comment" spellcheck="true"># TODO: Implement the backward pass for the three-layer convolutional net, #</span>        <span class="token comment" spellcheck="true"># storing the loss and gradients in the loss and grads variables. Compute  #</span>        <span class="token comment" spellcheck="true"># data loss using softmax, and make sure that grads[k] holds the gradients #</span>        <span class="token comment" spellcheck="true"># for self.params[k]. Don't forget to add L2 regularization!               #</span>        <span class="token comment" spellcheck="true">#                                                                          #</span>        <span class="token comment" spellcheck="true"># NOTE: To ensure that your implementation matches ours and you pass the   #</span>        <span class="token comment" spellcheck="true"># automated tests, make sure that your L2 regularization includes a factor #</span>        <span class="token comment" spellcheck="true"># of 0.5 to simplify the expression for the gradient.                      #</span>        <span class="token comment" spellcheck="true">############################################################################</span>        <span class="token comment" spellcheck="true"># *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>        loss<span class="token punctuation">,</span> dscores <span class="token operator">=</span> softmax_loss<span class="token punctuation">(</span>scores<span class="token punctuation">,</span> y<span class="token punctuation">)</span>        loss <span class="token operator">+=</span> <span class="token number">0.5</span> <span class="token operator">*</span> self<span class="token punctuation">.</span>reg <span class="token operator">*</span> <span class="token punctuation">(</span>np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'W1'</span><span class="token punctuation">]</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'W2'</span><span class="token punctuation">]</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'W3'</span><span class="token punctuation">]</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        dx<span class="token punctuation">,</span> grads<span class="token punctuation">[</span><span class="token string">'W3'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> grads<span class="token punctuation">[</span><span class="token string">'b3'</span><span class="token punctuation">]</span> <span class="token operator">=</span> affine_backward<span class="token punctuation">(</span>dscores<span class="token punctuation">,</span>a3_cache<span class="token punctuation">)</span>        dx<span class="token punctuation">,</span> grads<span class="token punctuation">[</span><span class="token string">'W2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> grads<span class="token punctuation">[</span><span class="token string">'b2'</span><span class="token punctuation">]</span> <span class="token operator">=</span> affine_relu_backward<span class="token punctuation">(</span>dx<span class="token punctuation">,</span> a2_cache<span class="token punctuation">)</span>        dx<span class="token punctuation">,</span> grads<span class="token punctuation">[</span><span class="token string">'W1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> grads<span class="token punctuation">[</span><span class="token string">'b1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> conv_relu_pool_backward<span class="token punctuation">(</span>dx<span class="token punctuation">,</span> a1_cache<span class="token punctuation">)</span>        grads<span class="token punctuation">[</span><span class="token string">'W3'</span><span class="token punctuation">]</span> <span class="token operator">+=</span> self<span class="token punctuation">.</span>reg <span class="token operator">*</span> self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'W3'</span><span class="token punctuation">]</span>        grads<span class="token punctuation">[</span><span class="token string">'W2'</span><span class="token punctuation">]</span> <span class="token operator">+=</span> self<span class="token punctuation">.</span>reg <span class="token operator">*</span> self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'W2'</span><span class="token punctuation">]</span>        grads<span class="token punctuation">[</span><span class="token string">'W1'</span><span class="token punctuation">]</span> <span class="token operator">+=</span> self<span class="token punctuation">.</span>reg <span class="token operator">*</span> self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'W1'</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>        <span class="token comment" spellcheck="true">############################################################################</span>        <span class="token comment" spellcheck="true">#                             END OF YOUR CODE                             #</span>        <span class="token comment" spellcheck="true">############################################################################</span>        <span class="token keyword">return</span> loss<span class="token punctuation">,</span> grads</code></pre><h3 id="7-spatial-batch-normalization-forward-amp-amp-backward"><a href="#7-spatial-batch-normalization-forward-amp-amp-backward" class="headerlink" title="7. spatial batch normalization forward &amp;&amp; backward"></a>7. spatial batch normalization forward &amp;&amp; backward</h3><p><strong>实现思路：</strong></p><ul><li>参考论文 [1] ，batch normalization 在卷积层的实现，不同于全连接的实现，由于要保留原有的空间结构且减少计算量，故将每一个channel作为feature进行归一化    </li><li>由于与之前实现的全连接bn层十分类似，可以直接调用之前的函数，只需对输入输出进行reshape   </li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">spatial_batchnorm_forward</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> gamma<span class="token punctuation">,</span> beta<span class="token punctuation">,</span> bn_param<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Computes the forward pass for spatial batch normalization.    Inputs:    - x: Input data of shape (N, C, H, W)    - gamma: Scale parameter, of shape (C,)    - beta: Shift parameter, of shape (C,)    - bn_param: Dictionary with the following keys:      - mode: 'train' or 'test'; required      - eps: Constant for numeric stability      - momentum: Constant for running mean / variance. momentum=0 means that        old information is discarded completely at every time step, while        momentum=1 means that new information is never incorporated. The        default of momentum=0.9 should work well in most situations.      - running_mean: Array of shape (D,) giving running mean of features      - running_var Array of shape (D,) giving running variance of features    Returns a tuple of:    - out: Output data, of shape (N, C, H, W)    - cache: Values needed for the backward pass    """</span>    out<span class="token punctuation">,</span> cache <span class="token operator">=</span> None<span class="token punctuation">,</span> None    <span class="token comment" spellcheck="true">###########################################################################</span>    <span class="token comment" spellcheck="true"># TODO: Implement the forward pass for spatial batch normalization.       #</span>    <span class="token comment" spellcheck="true">#                                                                         #</span>    <span class="token comment" spellcheck="true"># HINT: You can implement spatial batch normalization by calling the      #</span>    <span class="token comment" spellcheck="true"># vanilla version of batch normalization you implemented above.           #</span>    <span class="token comment" spellcheck="true"># Your implementation should be very short; ours is less than five lines. #</span>    <span class="token comment" spellcheck="true">###########################################################################</span>    <span class="token comment" spellcheck="true"># *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>    <span class="token comment" spellcheck="true"># (N,D) (D,)</span>    N<span class="token punctuation">,</span> C<span class="token punctuation">,</span> H<span class="token punctuation">,</span> W <span class="token operator">=</span> x<span class="token punctuation">.</span>shape    temp_out<span class="token punctuation">,</span> cache <span class="token operator">=</span> batchnorm_forward<span class="token punctuation">(</span>x<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span>N<span class="token operator">*</span>H<span class="token operator">*</span>W<span class="token punctuation">,</span>C<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>gamma<span class="token punctuation">,</span>beta<span class="token punctuation">,</span>bn_param<span class="token punctuation">)</span>    out <span class="token operator">=</span> temp_out<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>N<span class="token punctuation">,</span> W<span class="token punctuation">,</span> H<span class="token punctuation">,</span> C<span class="token punctuation">)</span><span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>    <span class="token comment" spellcheck="true">###########################################################################</span>    <span class="token comment" spellcheck="true">#                             END OF YOUR CODE                            #</span>    <span class="token comment" spellcheck="true">###########################################################################</span>    <span class="token keyword">return</span> out<span class="token punctuation">,</span> cache<span class="token keyword">def</span> <span class="token function">spatial_batchnorm_backward</span><span class="token punctuation">(</span>dout<span class="token punctuation">,</span> cache<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Computes the backward pass for spatial batch normalization.    Inputs:    - dout: Upstream derivatives, of shape (N, C, H, W)    - cache: Values from the forward pass    Returns a tuple of:    - dx: Gradient with respect to inputs, of shape (N, C, H, W)    - dgamma: Gradient with respect to scale parameter, of shape (C,)    - dbeta: Gradient with respect to shift parameter, of shape (C,)    """</span>    dx<span class="token punctuation">,</span> dgamma<span class="token punctuation">,</span> dbeta <span class="token operator">=</span> None<span class="token punctuation">,</span> None<span class="token punctuation">,</span> None    <span class="token comment" spellcheck="true">###########################################################################</span>    <span class="token comment" spellcheck="true"># TODO: Implement the backward pass for spatial batch normalization.      #</span>    <span class="token comment" spellcheck="true">#                                                                         #</span>    <span class="token comment" spellcheck="true"># HINT: You can implement spatial batch normalization by calling the      #</span>    <span class="token comment" spellcheck="true"># vanilla version of batch normalization you implemented above.           #</span>    <span class="token comment" spellcheck="true"># Your implementation should be very short; ours is less than five lines. #</span>    <span class="token comment" spellcheck="true">###########################################################################</span>    <span class="token comment" spellcheck="true"># *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>    N<span class="token punctuation">,</span> C<span class="token punctuation">,</span> H<span class="token punctuation">,</span> W <span class="token operator">=</span> dout<span class="token punctuation">.</span>shape    dx<span class="token punctuation">,</span> dgamma<span class="token punctuation">,</span> dbeta <span class="token operator">=</span> batchnorm_backward_alt<span class="token punctuation">(</span>dout<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>N<span class="token operator">*</span>H<span class="token operator">*</span>W<span class="token punctuation">,</span>C<span class="token punctuation">)</span><span class="token punctuation">,</span> cache<span class="token punctuation">)</span>    dx <span class="token operator">=</span> dx<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>N<span class="token punctuation">,</span>W<span class="token punctuation">,</span>H<span class="token punctuation">,</span>C<span class="token punctuation">)</span><span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>    <span class="token comment" spellcheck="true">###########################################################################</span>    <span class="token comment" spellcheck="true">#                             END OF YOUR CODE                            #</span>    <span class="token comment" spellcheck="true">###########################################################################</span>    <span class="token keyword">return</span> dx<span class="token punctuation">,</span> dgamma<span class="token punctuation">,</span> dbeta</code></pre><h3 id="8-spatial-groupnorm-forward-amp-amp-backward"><a href="#8-spatial-groupnorm-forward-amp-amp-backward" class="headerlink" title="8. spatial groupnorm forward &amp;&amp; backward"></a>8. spatial groupnorm forward &amp;&amp; backward</h3><p><strong>实现思路：</strong></p><ul><li>参考论文[2] 分组进行归一化   </li></ul><p><img src="https://raw.githubusercontent.com/wuliutx/upload-pic/master/20200207211202.png" alt="20200207211202.png"></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">spatial_groupnorm_forward</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> gamma<span class="token punctuation">,</span> beta<span class="token punctuation">,</span> G<span class="token punctuation">,</span> gn_param<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Computes the forward pass for spatial group normalization.    In contrast to layer normalization, group normalization splits each entry     in the data into G contiguous pieces, which it then normalizes independently.    Per feature shifting and scaling are then applied to the data, in a manner identical to that of batch normalization and layer normalization.    Inputs:    - x: Input data of shape (N, C, H, W)    - gamma: Scale parameter, of shape (C,)    - beta: Shift parameter, of shape (C,)    - G: Integer mumber of groups to split into, should be a divisor of C    - gn_param: Dictionary with the following keys:      - eps: Constant for numeric stability    Returns a tuple of:    - out: Output data, of shape (N, C, H, W)    - cache: Values needed for the backward pass    """</span>    out<span class="token punctuation">,</span> cache <span class="token operator">=</span> None<span class="token punctuation">,</span> None    eps <span class="token operator">=</span> gn_param<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'eps'</span><span class="token punctuation">,</span><span class="token number">1e</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">###########################################################################</span>    <span class="token comment" spellcheck="true"># TODO: Implement the forward pass for spatial group normalization.       #</span>    <span class="token comment" spellcheck="true"># This will be extremely similar to the layer norm implementation.        #</span>    <span class="token comment" spellcheck="true"># In particular, think about how you could transform the matrix so that   #</span>    <span class="token comment" spellcheck="true"># the bulk of the code is similar to both train-time batch normalization  #</span>    <span class="token comment" spellcheck="true"># and layer normalization!                                                # </span>    <span class="token comment" spellcheck="true">###########################################################################</span>    <span class="token comment" spellcheck="true"># *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>    N<span class="token punctuation">,</span> C<span class="token punctuation">,</span> H<span class="token punctuation">,</span> W <span class="token operator">=</span> x<span class="token punctuation">.</span>shape    x_trans <span class="token operator">=</span> x<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>N<span class="token punctuation">,</span> G<span class="token punctuation">,</span> C <span class="token operator">//</span> G<span class="token punctuation">,</span> H<span class="token punctuation">,</span> W<span class="token punctuation">)</span>    sample_mean <span class="token operator">=</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>x_trans<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> keepdims<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    sample_var <span class="token operator">=</span> np<span class="token punctuation">.</span>var<span class="token punctuation">(</span>x_trans<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> keepdims<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    x_hat <span class="token operator">=</span> <span class="token punctuation">(</span>x_trans <span class="token operator">-</span> sample_mean<span class="token punctuation">)</span> <span class="token operator">/</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>sample_var <span class="token operator">+</span> eps<span class="token punctuation">)</span>    x_hat <span class="token operator">=</span> x_hat<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>N<span class="token punctuation">,</span> C<span class="token punctuation">,</span> H<span class="token punctuation">,</span> W<span class="token punctuation">)</span>    out <span class="token operator">=</span> gamma <span class="token operator">*</span> x_hat <span class="token operator">+</span> beta    cache <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> gamma<span class="token punctuation">,</span> sample_mean<span class="token punctuation">,</span> sample_var<span class="token punctuation">,</span> eps<span class="token punctuation">,</span> x_hat<span class="token punctuation">,</span> G<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>    <span class="token comment" spellcheck="true">###########################################################################</span>    <span class="token comment" spellcheck="true">#                             END OF YOUR CODE                            #</span>    <span class="token comment" spellcheck="true">###########################################################################</span>    <span class="token keyword">return</span> out<span class="token punctuation">,</span> cache<span class="token keyword">def</span> <span class="token function">spatial_groupnorm_backward</span><span class="token punctuation">(</span>dout<span class="token punctuation">,</span> cache<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Computes the backward pass for spatial group normalization.    Inputs:    - dout: Upstream derivatives, of shape (N, C, H, W)    - cache: Values from the forward pass    Returns a tuple of:    - dx: Gradient with respect to inputs, of shape (N, C, H, W)    - dgamma: Gradient with respect to scale parameter, of shape (C,)    - dbeta: Gradient with respect to shift parameter, of shape (C,)    """</span>    dx<span class="token punctuation">,</span> dgamma<span class="token punctuation">,</span> dbeta <span class="token operator">=</span> None<span class="token punctuation">,</span> None<span class="token punctuation">,</span> None    <span class="token comment" spellcheck="true">###########################################################################</span>    <span class="token comment" spellcheck="true"># TODO: Implement the backward pass for spatial group normalization.      #</span>    <span class="token comment" spellcheck="true"># This will be extremely similar to the layer norm implementation.        #</span>    <span class="token comment" spellcheck="true">###########################################################################</span>    <span class="token comment" spellcheck="true"># *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>    x<span class="token punctuation">,</span> gamma<span class="token punctuation">,</span> mean<span class="token punctuation">,</span> var<span class="token punctuation">,</span> eps<span class="token punctuation">,</span> x_hat<span class="token punctuation">,</span> G <span class="token operator">=</span> cache    dgamma <span class="token operator">=</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>dout <span class="token operator">*</span> x_hat<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> keepdims<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    dbeta <span class="token operator">=</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>dout<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> keepdims<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    N<span class="token punctuation">,</span> C<span class="token punctuation">,</span> H<span class="token punctuation">,</span> W <span class="token operator">=</span> x<span class="token punctuation">.</span>shape    x_trans <span class="token operator">=</span> x<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>N<span class="token punctuation">,</span> G<span class="token punctuation">,</span> C <span class="token operator">//</span> G<span class="token punctuation">,</span> H<span class="token punctuation">,</span> W<span class="token punctuation">)</span>    m <span class="token operator">=</span> C <span class="token operator">//</span> G <span class="token operator">*</span> H <span class="token operator">*</span> W    dx_hat <span class="token operator">=</span> <span class="token punctuation">(</span>dout <span class="token operator">*</span> gamma<span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>N<span class="token punctuation">,</span> G<span class="token punctuation">,</span> C <span class="token operator">//</span> G<span class="token punctuation">,</span> H<span class="token punctuation">,</span> W<span class="token punctuation">)</span>    dvar <span class="token operator">=</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>dx_hat <span class="token operator">*</span> <span class="token punctuation">(</span>x_trans <span class="token operator">-</span> mean<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>power<span class="token punctuation">(</span><span class="token punctuation">(</span>var <span class="token operator">+</span> eps<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> keepdims<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    dmean <span class="token operator">=</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>dx_hat <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>var <span class="token operator">+</span> eps<span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> keepdims<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token operator">+</span> dvar <span class="token operator">*</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span>x_trans <span class="token operator">-</span> mean<span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> keepdims<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token operator">/</span> m    dx <span class="token operator">=</span> dx_hat <span class="token operator">/</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>var <span class="token operator">+</span> eps<span class="token punctuation">)</span> <span class="token operator">+</span> dvar <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span>x_trans <span class="token operator">-</span> mean<span class="token punctuation">)</span> <span class="token operator">/</span> m <span class="token operator">+</span> dmean <span class="token operator">/</span> m    dx <span class="token operator">=</span> dx<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>N<span class="token punctuation">,</span> C<span class="token punctuation">,</span> H<span class="token punctuation">,</span> W<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>    <span class="token comment" spellcheck="true">###########################################################################</span>    <span class="token comment" spellcheck="true">#                             END OF YOUR CODE                            #</span>    <span class="token comment" spellcheck="true">###########################################################################</span>    <span class="token keyword">return</span> dx<span class="token punctuation">,</span> dgamma<span class="token punctuation">,</span> dbeta</code></pre><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>本次作业主要是有关卷积神经网络的一系列实现，包括卷积层、池化层、BN层的前反向传播实现，对于Group BN 还是没弄清楚。</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li>[1] <a href="https://arxiv.org/abs/1502.03167" target="_blank" rel="noopener">Sergey Ioffe and Christian Szegedy, “Batch Normalization: Accelerating Deep Network Training by Reducing Internal Covariate Shift”, ICML 2015.</a></li><li>[2] <a href="https://arxiv.org/abs/1803.08494" target="_blank" rel="noopener">Wu, Yuxin, and Kaiming He. “Group Normalization.” arXiv preprint arXiv:1803.08494 (2018).</a></li><li><a href="https://zhuanlan.zhihu.com/p/21560667" target="_blank" rel="noopener">CS231n课程笔记翻译：神经网络笔记 2</a></li><li><a href="https://blog.csdn.net/mooneve/article/details/83858012" target="_blank" rel="noopener">Group Normalization</a></li><li><a href="https://github.com/lightaime/cs231n" target="_blank" rel="noopener">lightaime/cs231n</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> CS231 Assignment </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deep Learning </tag>
            
            <tag> Assignment </tag>
            
            <tag> CS231n </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS231 Assignment 2 Q3-Dropout</title>
      <link href="/2020/01/15/assignment-2-q3-dropout/"/>
      <url>/2020/01/15/assignment-2-q3-dropout/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>本文为斯坦福大学CS231n课程作业及总结，若有错误，欢迎指正。<br>所有代码均已上传到GitHub项目<a href="https://github.com/notplus/cs231n-assignment/tree/master/assignment2" target="_blank" rel="noopener">cs231n-assignment2</a></p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><h3 id="1-dropout-forward"><a href="#1-dropout-forward" class="headerlink" title="1. dropout forward"></a>1. dropout forward</h3><p><strong>实现思路:</strong> 参考论文[1],整体实现还是比较简单，需要注意p为保留的概率</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">dropout_forward</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> dropout_param<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Performs the forward pass for (inverted) dropout.    Inputs:    - x: Input data, of any shape    - dropout_param: A dictionary with the following keys:      - p: Dropout parameter. We keep each neuron output with probability p.      - mode: 'test' or 'train'. If the mode is train, then perform dropout;        if the mode is test, then just return the input.      - seed: Seed for the random number generator. Passing seed makes this        function deterministic, which is needed for gradient checking but not        in real networks.    Outputs:    - out: Array of the same shape as x.    - cache: tuple (dropout_param, mask). In training mode, mask is the dropout      mask that was used to multiply the input; in test mode, mask is None.    NOTE: Please implement **inverted** dropout, not the vanilla version of dropout.    See http://cs231n.github.io/neural-networks-2/#reg for more details.    NOTE 2: Keep in mind that p is the probability of **keep** a neuron    output; this might be contrary to some sources, where it is referred to    as the probability of dropping a neuron output.    """</span>    p<span class="token punctuation">,</span> mode <span class="token operator">=</span> dropout_param<span class="token punctuation">[</span><span class="token string">'p'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dropout_param<span class="token punctuation">[</span><span class="token string">'mode'</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token string">'seed'</span> <span class="token keyword">in</span> dropout_param<span class="token punctuation">:</span>        np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span>dropout_param<span class="token punctuation">[</span><span class="token string">'seed'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    mask <span class="token operator">=</span> None    out <span class="token operator">=</span> None    <span class="token keyword">if</span> mode <span class="token operator">==</span> <span class="token string">'train'</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#######################################################################</span>        <span class="token comment" spellcheck="true"># TODO: Implement training phase forward pass for inverted dropout.   #</span>        <span class="token comment" spellcheck="true"># Store the dropout mask in the mask variable.                        #</span>        <span class="token comment" spellcheck="true">#######################################################################</span>        <span class="token comment" spellcheck="true"># *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>        mask <span class="token operator">=</span> <span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token operator">*</span>x<span class="token punctuation">.</span>shape<span class="token punctuation">)</span> <span class="token operator">&lt;</span> p<span class="token punctuation">)</span> <span class="token operator">/</span> p        out <span class="token operator">=</span> mask <span class="token operator">*</span> x        <span class="token comment" spellcheck="true"># *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>        <span class="token comment" spellcheck="true">#######################################################################</span>        <span class="token comment" spellcheck="true">#                           END OF YOUR CODE                          #</span>        <span class="token comment" spellcheck="true">#######################################################################</span>    <span class="token keyword">elif</span> mode <span class="token operator">==</span> <span class="token string">'test'</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#######################################################################</span>        <span class="token comment" spellcheck="true"># TODO: Implement the test phase forward pass for inverted dropout.   #</span>        <span class="token comment" spellcheck="true">#######################################################################</span>        <span class="token comment" spellcheck="true"># *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>        out <span class="token operator">=</span> x        <span class="token comment" spellcheck="true"># *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>        <span class="token comment" spellcheck="true">#######################################################################</span>        <span class="token comment" spellcheck="true">#                            END OF YOUR CODE                         #</span>        <span class="token comment" spellcheck="true">#######################################################################</span>    cache <span class="token operator">=</span> <span class="token punctuation">(</span>dropout_param<span class="token punctuation">,</span> mask<span class="token punctuation">)</span>    out <span class="token operator">=</span> out<span class="token punctuation">.</span>astype<span class="token punctuation">(</span>x<span class="token punctuation">.</span>dtype<span class="token punctuation">,</span> copy<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> out<span class="token punctuation">,</span> cache</code></pre><h3 id="2-dropout-backward"><a href="#2-dropout-backward" class="headerlink" title="2. dropout backward"></a>2. dropout backward</h3><p><strong>实现思路：</strong> 求导计算梯度，进行反向传播       </p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">dropout_backward</span><span class="token punctuation">(</span>dout<span class="token punctuation">,</span> cache<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Perform the backward pass for (inverted) dropout.    Inputs:    - dout: Upstream derivatives, of any shape    - cache: (dropout_param, mask) from dropout_forward.    """</span>    dropout_param<span class="token punctuation">,</span> mask <span class="token operator">=</span> cache    mode <span class="token operator">=</span> dropout_param<span class="token punctuation">[</span><span class="token string">'mode'</span><span class="token punctuation">]</span>    dx <span class="token operator">=</span> None    <span class="token keyword">if</span> mode <span class="token operator">==</span> <span class="token string">'train'</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#######################################################################</span>        <span class="token comment" spellcheck="true"># TODO: Implement training phase backward pass for inverted dropout   #</span>        <span class="token comment" spellcheck="true">#######################################################################</span>        <span class="token comment" spellcheck="true"># *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>        dx <span class="token operator">=</span> dout <span class="token operator">*</span> mask        <span class="token comment" spellcheck="true"># *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>        <span class="token comment" spellcheck="true">#######################################################################</span>        <span class="token comment" spellcheck="true">#                          END OF YOUR CODE                           #</span>        <span class="token comment" spellcheck="true">#######################################################################</span>    <span class="token keyword">elif</span> mode <span class="token operator">==</span> <span class="token string">'test'</span><span class="token punctuation">:</span>        dx <span class="token operator">=</span> dout    <span class="token keyword">return</span> dx</code></pre><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>本次作业主要是dropout的前向、反向传播实现，较为简单。</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li>[1] <a href="https://arxiv.org/abs/1207.0580" target="_blank" rel="noopener">Geoffrey E. Hinton et al, “Improving neural networks by preventing co-adaptation of feature detectors”, arXiv 2012</a></li><li><a href="https://zhuanlan.zhihu.com/p/21560667" target="_blank" rel="noopener">CS231n课程笔记翻译：神经网络笔记 2</a></li><li><a href="https://github.com/lightaime/cs231n" target="_blank" rel="noopener">lightaime/cs231n</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> CS231 Assignment </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deep Learning </tag>
            
            <tag> Assignment </tag>
            
            <tag> CS231n </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS231 Assignment 2 Q2-BatchNormalization</title>
      <link href="/2020/01/14/assignment-2-q2-batchnormalization/"/>
      <url>/2020/01/14/assignment-2-q2-batchnormalization/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>本文为斯坦福大学CS231n课程作业及总结，若有错误，欢迎指正。<br>所有代码均已上传到GitHub项目<a href="https://github.com/notplus/cs231n-assignment/tree/master/assignment2" target="_blank" rel="noopener">cs231n-assignment2</a></p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><h3 id="1-batch-normalization-forward"><a href="#1-batch-normalization-forward" class="headerlink" title="1. batch normalization forward"></a>1. batch normalization forward</h3><p><strong>实现思路:</strong> 参考论文[1]，通过如下公式计算<br><img src="https://raw.githubusercontent.com/wuliutx/upload-pic/master/20200203194911.png" alt="20200203194911.png"></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">batchnorm_forward</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> gamma<span class="token punctuation">,</span> beta<span class="token punctuation">,</span> bn_param<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Forward pass for batch normalization.    During training the sample mean and (uncorrected) sample variance are    computed from minibatch statistics and used to normalize the incoming data.    During training we also keep an exponentially decaying running mean of the    mean and variance of each feature, and these averages are used to normalize    data at test-time.    At each timestep we update the running averages for mean and variance using    an exponential decay based on the momentum parameter:    running_mean = momentum * running_mean + (1 - momentum) * sample_mean    running_var = momentum * running_var + (1 - momentum) * sample_var    Note that the batch normalization paper suggests a different test-time    behavior: they compute sample mean and variance for each feature using a    large number of training images rather than using a running average. For    this implementation we have chosen to use running averages instead since    they do not require an additional estimation step; the torch7    implementation of batch normalization also uses running averages.    Input:    - x: Data of shape (N, D)    - gamma: Scale parameter of shape (D,)    - beta: Shift paremeter of shape (D,)    - bn_param: Dictionary with the following keys:      - mode: 'train' or 'test'; required      - eps: Constant for numeric stability      - momentum: Constant for running mean / variance.      - running_mean: Array of shape (D,) giving running mean of features      - running_var Array of shape (D,) giving running variance of features    Returns a tuple of:    - out: of shape (N, D)    - cache: A tuple of values needed in the backward pass    """</span>    mode <span class="token operator">=</span> bn_param<span class="token punctuation">[</span><span class="token string">'mode'</span><span class="token punctuation">]</span>    eps <span class="token operator">=</span> bn_param<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'eps'</span><span class="token punctuation">,</span> <span class="token number">1e</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span>    momentum <span class="token operator">=</span> bn_param<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'momentum'</span><span class="token punctuation">,</span> <span class="token number">0.9</span><span class="token punctuation">)</span>    N<span class="token punctuation">,</span> D <span class="token operator">=</span> x<span class="token punctuation">.</span>shape    running_mean <span class="token operator">=</span> bn_param<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'running_mean'</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>D<span class="token punctuation">,</span> dtype<span class="token operator">=</span>x<span class="token punctuation">.</span>dtype<span class="token punctuation">)</span><span class="token punctuation">)</span>    running_var <span class="token operator">=</span> bn_param<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'running_var'</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>D<span class="token punctuation">,</span> dtype<span class="token operator">=</span>x<span class="token punctuation">.</span>dtype<span class="token punctuation">)</span><span class="token punctuation">)</span>    out<span class="token punctuation">,</span> cache <span class="token operator">=</span> None<span class="token punctuation">,</span> None    <span class="token keyword">if</span> mode <span class="token operator">==</span> <span class="token string">'train'</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#######################################################################</span>        <span class="token comment" spellcheck="true"># TODO: Implement the training-time forward pass for batch norm.      #</span>        <span class="token comment" spellcheck="true"># Use minibatch statistics to compute the mean and variance, use      #</span>        <span class="token comment" spellcheck="true"># these statistics to normalize the incoming data, and scale and      #</span>        <span class="token comment" spellcheck="true"># shift the normalized data using gamma and beta.                     #</span>        <span class="token comment" spellcheck="true">#                                                                     #</span>        <span class="token comment" spellcheck="true"># You should store the output in the variable out. Any intermediates  #</span>        <span class="token comment" spellcheck="true"># that you need for the backward pass should be stored in the cache   #</span>        <span class="token comment" spellcheck="true"># variable.                                                           #</span>        <span class="token comment" spellcheck="true">#                                                                     #</span>        <span class="token comment" spellcheck="true"># You should also use your computed sample mean and variance together #</span>        <span class="token comment" spellcheck="true"># with the momentum variable to update the running mean and running   #</span>        <span class="token comment" spellcheck="true"># variance, storing your result in the running_mean and running_var   #</span>        <span class="token comment" spellcheck="true"># variables.                                                          #</span>        <span class="token comment" spellcheck="true">#                                                                     #</span>        <span class="token comment" spellcheck="true"># Note that though you should be keeping track of the running         #</span>        <span class="token comment" spellcheck="true"># variance, you should normalize the data based on the standard       #</span>        <span class="token comment" spellcheck="true"># deviation (square root of variance) instead!                        # </span>        <span class="token comment" spellcheck="true"># Referencing the original paper (https://arxiv.org/abs/1502.03167)   #</span>        <span class="token comment" spellcheck="true"># might prove to be helpful.                                          #</span>        <span class="token comment" spellcheck="true">#######################################################################</span>        <span class="token comment" spellcheck="true"># *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>        sample_mean <span class="token operator">=</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>x<span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>        sample_var <span class="token operator">=</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">-</span> sample_mean<span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>        x_hat <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> sample_mean<span class="token punctuation">)</span> <span class="token operator">/</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>sample_var <span class="token operator">+</span> eps<span class="token punctuation">)</span>        out <span class="token operator">=</span> gamma <span class="token operator">*</span> x_hat <span class="token operator">+</span> beta        cache <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> gamma<span class="token punctuation">,</span> sample_mean<span class="token punctuation">,</span> sample_var<span class="token punctuation">,</span> eps<span class="token punctuation">,</span> x_hat<span class="token punctuation">)</span>        running_mean <span class="token operator">=</span> momentum <span class="token operator">*</span> running_mean <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> momentum<span class="token punctuation">)</span> <span class="token operator">*</span> sample_mean        running_var <span class="token operator">=</span> momentum <span class="token operator">*</span> running_var <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> momentum<span class="token punctuation">)</span> <span class="token operator">*</span> sample_var                <span class="token comment" spellcheck="true"># *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>        <span class="token comment" spellcheck="true">#######################################################################</span>        <span class="token comment" spellcheck="true">#                           END OF YOUR CODE                          #</span>        <span class="token comment" spellcheck="true">#######################################################################</span>    <span class="token keyword">elif</span> mode <span class="token operator">==</span> <span class="token string">'test'</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#######################################################################</span>        <span class="token comment" spellcheck="true"># TODO: Implement the test-time forward pass for batch normalization. #</span>        <span class="token comment" spellcheck="true"># Use the running mean and variance to normalize the incoming data,   #</span>        <span class="token comment" spellcheck="true"># then scale and shift the normalized data using gamma and beta.      #</span>        <span class="token comment" spellcheck="true"># Store the result in the out variable.                               #</span>        <span class="token comment" spellcheck="true">#######################################################################</span>        <span class="token comment" spellcheck="true"># *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>        x_hat <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> running_mean<span class="token punctuation">)</span> <span class="token operator">/</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>running_var <span class="token operator">+</span> eps<span class="token punctuation">)</span>        out <span class="token operator">=</span> gamma <span class="token operator">*</span> x_hat <span class="token operator">+</span> beta        <span class="token comment" spellcheck="true"># *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>        <span class="token comment" spellcheck="true">#######################################################################</span>        <span class="token comment" spellcheck="true">#                          END OF YOUR CODE                           #</span>        <span class="token comment" spellcheck="true">#######################################################################</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">'Invalid forward batchnorm mode "%s"'</span> <span class="token operator">%</span> mode<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Store the updated running means back into bn_param</span>    bn_param<span class="token punctuation">[</span><span class="token string">'running_mean'</span><span class="token punctuation">]</span> <span class="token operator">=</span> running_mean    bn_param<span class="token punctuation">[</span><span class="token string">'running_var'</span><span class="token punctuation">]</span> <span class="token operator">=</span> running_var    <span class="token keyword">return</span> out<span class="token punctuation">,</span> cache</code></pre><h3 id="2-batch-normalization-backward"><a href="#2-batch-normalization-backward" class="headerlink" title="2. batch normalization backward"></a>2. batch normalization backward</h3><p><strong>实现思路：</strong> 通过计算图反向传播计算梯度，较为繁琐，可参考下一个实现    </p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">batchnorm_backward</span><span class="token punctuation">(</span>dout<span class="token punctuation">,</span> cache<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Backward pass for batch normalization.    For this implementation, you should write out a computation graph for    batch normalization on paper and propagate gradients backward through    intermediate nodes.    Inputs:    - dout: Upstream derivatives, of shape (N, D)    - cache: Variable of intermediates from batchnorm_forward.    Returns a tuple of:    - dx: Gradient with respect to inputs x, of shape (N, D)    - dgamma: Gradient with respect to scale parameter gamma, of shape (D,)    - dbeta: Gradient with respect to shift parameter beta, of shape (D,)    """</span>    dx<span class="token punctuation">,</span> dgamma<span class="token punctuation">,</span> dbeta <span class="token operator">=</span> None<span class="token punctuation">,</span> None<span class="token punctuation">,</span> None    <span class="token comment" spellcheck="true">###########################################################################</span>    <span class="token comment" spellcheck="true"># TODO: Implement the backward pass for batch normalization. Store the    #</span>    <span class="token comment" spellcheck="true"># results in the dx, dgamma, and dbeta variables.                         #</span>    <span class="token comment" spellcheck="true"># Referencing the original paper (https://arxiv.org/abs/1502.03167)       #</span>    <span class="token comment" spellcheck="true"># might prove to be helpful.                                              #</span>    <span class="token comment" spellcheck="true">###########################################################################</span>    <span class="token comment" spellcheck="true"># *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>    x<span class="token punctuation">,</span> gamma<span class="token punctuation">,</span> mean<span class="token punctuation">,</span> var<span class="token punctuation">,</span> eps<span class="token punctuation">,</span> x_hat <span class="token operator">=</span> cache    m <span class="token operator">=</span> x<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    dx_hat <span class="token operator">=</span> dout <span class="token operator">*</span> gamma    dvar <span class="token operator">=</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>dx_hat <span class="token operator">*</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> mean<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>power<span class="token punctuation">(</span><span class="token punctuation">(</span>var <span class="token operator">+</span> eps<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    dmean <span class="token operator">=</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>dx_hat <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>var <span class="token operator">+</span> eps<span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> dvar <span class="token operator">*</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> mean<span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">/</span> m    dx <span class="token operator">=</span> dx_hat <span class="token operator">/</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>var <span class="token operator">+</span> eps<span class="token punctuation">)</span> <span class="token operator">+</span> dvar <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> mean<span class="token punctuation">)</span> <span class="token operator">/</span> m <span class="token operator">+</span> dmean <span class="token operator">/</span> m    dx_1 <span class="token operator">=</span> dout <span class="token operator">*</span> gamma    dx_2_b <span class="token operator">=</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">-</span> mean<span class="token punctuation">)</span> <span class="token operator">*</span> dx_1<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    dx_2_a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>var <span class="token operator">+</span> eps<span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token operator">-</span><span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">*</span> dx_1    dx_3_b <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">0.5</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>var <span class="token operator">+</span> eps<span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token operator">-</span><span class="token number">1.5</span><span class="token punctuation">)</span> <span class="token operator">*</span> dx_2_b    dx_4_b <span class="token operator">=</span> dx_3_b <span class="token operator">*</span> <span class="token number">1</span>    dx_5_b <span class="token operator">=</span> np<span class="token punctuation">.</span>ones_like<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">/</span> m <span class="token operator">*</span> dx_4_b    dx_6_b <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> mean<span class="token punctuation">)</span> <span class="token operator">*</span> dx_5_b    dx_7_a <span class="token operator">=</span> dx_6_b <span class="token operator">*</span> <span class="token number">1</span> <span class="token operator">+</span> dx_2_a <span class="token operator">*</span> <span class="token number">1</span>    dx_7_b <span class="token operator">=</span> dx_6_b <span class="token operator">*</span> <span class="token number">1</span> <span class="token operator">+</span> dx_2_a <span class="token operator">*</span> <span class="token number">1</span>    dx_8_b <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>dx_7_b<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    dx_9_b <span class="token operator">=</span> np<span class="token punctuation">.</span>ones_like<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">/</span> m <span class="token operator">*</span> dx_8_b    dx_10 <span class="token operator">=</span> dx_9_b <span class="token operator">+</span> dx_7_a    dx <span class="token operator">=</span> dx_10    dgamma <span class="token operator">=</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>dout <span class="token operator">*</span> x_hat<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    dbeta <span class="token operator">=</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>dout<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>    <span class="token comment" spellcheck="true">###########################################################################</span>    <span class="token comment" spellcheck="true">#                             END OF YOUR CODE                            #</span>    <span class="token comment" spellcheck="true">###########################################################################</span>    <span class="token keyword">return</span> dx<span class="token punctuation">,</span> dgamma<span class="token punctuation">,</span> dbeta</code></pre><h3 id="3-batch-normalization-backward-更为简洁的实现"><a href="#3-batch-normalization-backward-更为简洁的实现" class="headerlink" title="3. batch normalization backward 更为简洁的实现"></a>3. batch normalization backward 更为简洁的实现</h3><p><strong>实现思路:</strong><br>通过论文[1]所给公式计算，可以自己推导一遍<br><img src="https://raw.githubusercontent.com/wuliutx/upload-pic/master/20200203195253.png" alt="20200203195253.png">    </p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">batchnorm_backward_alt</span><span class="token punctuation">(</span>dout<span class="token punctuation">,</span> cache<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Alternative backward pass for batch normalization.    For this implementation you should work out the derivatives for the batch    normalizaton backward pass on paper and simplify as much as possible. You    should be able to derive a simple expression for the backward pass.     See the jupyter notebook for more hints.    Note: This implementation should expect to receive the same cache variable    as batchnorm_backward, but might not use all of the values in the cache.    Inputs / outputs: Same as batchnorm_backward    """</span>    dx<span class="token punctuation">,</span> dgamma<span class="token punctuation">,</span> dbeta <span class="token operator">=</span> None<span class="token punctuation">,</span> None<span class="token punctuation">,</span> None    <span class="token comment" spellcheck="true">###########################################################################</span>    <span class="token comment" spellcheck="true"># TODO: Implement the backward pass for batch normalization. Store the    #</span>    <span class="token comment" spellcheck="true"># results in the dx, dgamma, and dbeta variables.                         #</span>    <span class="token comment" spellcheck="true">#                                                                         #</span>    <span class="token comment" spellcheck="true"># After computing the gradient with respect to the centered inputs, you   #</span>    <span class="token comment" spellcheck="true"># should be able to compute gradients with respect to the inputs in a     #</span>    <span class="token comment" spellcheck="true"># single statement; our implementation fits on a single 80-character line.#</span>    <span class="token comment" spellcheck="true">###########################################################################</span>    <span class="token comment" spellcheck="true"># *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>    x<span class="token punctuation">,</span> gamma<span class="token punctuation">,</span> mean<span class="token punctuation">,</span> var<span class="token punctuation">,</span> eps<span class="token punctuation">,</span> x_hat <span class="token operator">=</span> cache    m <span class="token operator">=</span> x<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    dx_hat <span class="token operator">=</span> dout <span class="token operator">*</span> gamma    dvar <span class="token operator">=</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>dx_hat <span class="token operator">*</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> mean<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>power<span class="token punctuation">(</span><span class="token punctuation">(</span>var <span class="token operator">+</span> eps<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    dmean <span class="token operator">=</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>dx_hat <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>var <span class="token operator">+</span> eps<span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> dvar <span class="token operator">*</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> mean<span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">/</span> m    dx <span class="token operator">=</span> dx_hat <span class="token operator">/</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>var <span class="token operator">+</span> eps<span class="token punctuation">)</span> <span class="token operator">+</span> dvar <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> mean<span class="token punctuation">)</span> <span class="token operator">/</span> m <span class="token operator">+</span> dmean <span class="token operator">/</span> m    dgamma <span class="token operator">=</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>dout <span class="token operator">*</span> x_hat<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    dbeta <span class="token operator">=</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>dout<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>    <span class="token comment" spellcheck="true">###########################################################################</span>    <span class="token comment" spellcheck="true">#                             END OF YOUR CODE                            #</span>    <span class="token comment" spellcheck="true">###########################################################################</span>    <span class="token keyword">return</span> dx<span class="token punctuation">,</span> dgamma<span class="token punctuation">,</span> dbeta</code></pre><h3 id="4-layer-normalization-forward-amp-backward"><a href="#4-layer-normalization-forward-amp-backward" class="headerlink" title="4. layer normalization forward &amp; backward"></a>4. layer normalization forward &amp; backward</h3><p><strong>实现思路:</strong> 根据论文[2]，layer normalization与batch normalization在实现上极为相似，只需加入转置</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">layernorm_forward</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> gamma<span class="token punctuation">,</span> beta<span class="token punctuation">,</span> ln_param<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Forward pass for layer normalization.    During both training and test-time, the incoming data is normalized per data-point,    before being scaled by gamma and beta parameters identical to that of batch normalization.    Note that in contrast to batch normalization, the behavior during train and test-time for    layer normalization are identical, and we do not need to keep track of running averages    of any sort.    Input:    - x: Data of shape (N, D)    - gamma: Scale parameter of shape (D,)    - beta: Shift paremeter of shape (D,)    - ln_param: Dictionary with the following keys:        - eps: Constant for numeric stability    Returns a tuple of:    - out: of shape (N, D)    - cache: A tuple of values needed in the backward pass    """</span>    out<span class="token punctuation">,</span> cache <span class="token operator">=</span> None<span class="token punctuation">,</span> None    eps <span class="token operator">=</span> ln_param<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'eps'</span><span class="token punctuation">,</span> <span class="token number">1e</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">###########################################################################</span>    <span class="token comment" spellcheck="true"># TODO: Implement the training-time forward pass for layer norm.          #</span>    <span class="token comment" spellcheck="true"># Normalize the incoming data, and scale and  shift the normalized data   #</span>    <span class="token comment" spellcheck="true">#  using gamma and beta.                                                  #</span>    <span class="token comment" spellcheck="true"># HINT: this can be done by slightly modifying your training-time         #</span>    <span class="token comment" spellcheck="true"># implementation of  batch normalization, and inserting a line or two of  #</span>    <span class="token comment" spellcheck="true"># well-placed code. In particular, can you think of any matrix            #</span>    <span class="token comment" spellcheck="true"># transformations you could perform, that would enable you to copy over   #</span>    <span class="token comment" spellcheck="true"># the batch norm code and leave it almost unchanged?                      #</span>    <span class="token comment" spellcheck="true">###########################################################################</span>    <span class="token comment" spellcheck="true"># *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>    x <span class="token operator">=</span> x<span class="token punctuation">.</span>T    sample_mean <span class="token operator">=</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>x<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    sample_var <span class="token operator">=</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">-</span> sample_mean<span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    x_hat <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> sample_mean<span class="token punctuation">)</span> <span class="token operator">/</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>sample_var <span class="token operator">+</span> eps<span class="token punctuation">)</span>    out <span class="token operator">=</span> gamma <span class="token operator">*</span> x_hat<span class="token punctuation">.</span>T <span class="token operator">+</span> beta    cache <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> gamma<span class="token punctuation">,</span> sample_mean<span class="token punctuation">,</span> sample_var<span class="token punctuation">,</span> eps<span class="token punctuation">,</span> x_hat<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>    <span class="token comment" spellcheck="true">###########################################################################</span>    <span class="token comment" spellcheck="true">#                             END OF YOUR CODE                            #</span>    <span class="token comment" spellcheck="true">###########################################################################</span>    <span class="token keyword">return</span> out<span class="token punctuation">,</span> cache<span class="token keyword">def</span> <span class="token function">layernorm_backward</span><span class="token punctuation">(</span>dout<span class="token punctuation">,</span> cache<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Backward pass for layer normalization.    For this implementation, you can heavily rely on the work you've done already    for batch normalization.    Inputs:    - dout: Upstream derivatives, of shape (N, D)    - cache: Variable of intermediates from layernorm_forward.    Returns a tuple of:    - dx: Gradient with respect to inputs x, of shape (N, D)    - dgamma: Gradient with respect to scale parameter gamma, of shape (D,)    - dbeta: Gradient with respect to shift parameter beta, of shape (D,)    """</span>    dx<span class="token punctuation">,</span> dgamma<span class="token punctuation">,</span> dbeta <span class="token operator">=</span> None<span class="token punctuation">,</span> None<span class="token punctuation">,</span> None    <span class="token comment" spellcheck="true">###########################################################################</span>    <span class="token comment" spellcheck="true"># TODO: Implement the backward pass for layer norm.                       #</span>    <span class="token comment" spellcheck="true">#                                                                         #</span>    <span class="token comment" spellcheck="true"># HINT: this can be done by slightly modifying your training-time         #</span>    <span class="token comment" spellcheck="true"># implementation of batch normalization. The hints to the forward pass    #</span>    <span class="token comment" spellcheck="true"># still apply!                                                            #</span>    <span class="token comment" spellcheck="true">###########################################################################</span>    <span class="token comment" spellcheck="true"># *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>    x<span class="token punctuation">,</span> gamma<span class="token punctuation">,</span> mean<span class="token punctuation">,</span> var<span class="token punctuation">,</span> eps<span class="token punctuation">,</span> x_hat <span class="token operator">=</span> cache    m <span class="token operator">=</span> x<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    dx_hat <span class="token operator">=</span> <span class="token punctuation">(</span>dout <span class="token operator">*</span> gamma<span class="token punctuation">)</span><span class="token punctuation">.</span>T    dvar <span class="token operator">=</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>dx_hat <span class="token operator">*</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> mean<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>power<span class="token punctuation">(</span><span class="token punctuation">(</span>var <span class="token operator">+</span> eps<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    dmean <span class="token operator">=</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>dx_hat <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>var <span class="token operator">+</span> eps<span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> dvar <span class="token operator">*</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> mean<span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">/</span> m    dx <span class="token operator">=</span> dx_hat <span class="token operator">/</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>var <span class="token operator">+</span> eps<span class="token punctuation">)</span> <span class="token operator">+</span> dvar <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> mean<span class="token punctuation">)</span> <span class="token operator">/</span> m <span class="token operator">+</span> dmean <span class="token operator">/</span> m    dx <span class="token operator">=</span> dx<span class="token punctuation">.</span>T    dgamma <span class="token operator">=</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>dout <span class="token operator">*</span> x_hat<span class="token punctuation">.</span>T<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    dbeta <span class="token operator">=</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>dout<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>    <span class="token comment" spellcheck="true">###########################################################################</span>    <span class="token comment" spellcheck="true">#                             END OF YOUR CODE                            #</span>    <span class="token comment" spellcheck="true">###########################################################################</span>    <span class="token keyword">return</span> dx<span class="token punctuation">,</span> dgamma<span class="token punctuation">,</span> dbeta</code></pre><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>本次作业主要是batch normalization 和 layer normalization 层的前向、反向传播实现，通过BN、LN层可大大加快神经网络训练<br>速度，并且加入BN层对于权重的初始化较不敏感。作业难点在与梯度计算，但论文已给出相关公式。</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li>[1] <a href="https://arxiv.org/abs/1502.03167" target="_blank" rel="noopener">Sergey Ioffe and Christian Szegedy, “Batch Normalization: Accelerating Deep Network Training by Reducing Internal Covariate Shift”, ICML 2015.</a></li><li>[2] <a href="https://arxiv.org/pdf/1607.06450.pdf" target="_blank" rel="noopener">Ba, Jimmy Lei, Jamie Ryan Kiros, and Geoffrey E. Hinton. “Layer Normalization.” stat 1050 (2016): 21.</a></li><li><a href="https://zhuanlan.zhihu.com/p/21560667" target="_blank" rel="noopener">CS231n课程笔记翻译：神经网络笔记 2</a></li><li><a href="http://blog.a-stack.com/2019/01/12/Batch-Normalization-%E6%89%B9%E9%87%8F%E5%BD%92%E4%B8%80%E5%8C%96/" target="_blank" rel="noopener">Batch-Normalization(批量归一化)</a></li><li><a href="https://blog.csdn.net/duan_zhihua/article/details/83107615" target="_blank" rel="noopener">cs 231 Batch Normalization 求导推导及代码复现(BN,LN</a></li><li><a href="https://github.com/lightaime/cs231n" target="_blank" rel="noopener">lightaime/cs231n</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> CS231 Assignment </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deep Learning </tag>
            
            <tag> Assignment </tag>
            
            <tag> CS231n </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS231 Assignment 2 Q1-FullyConnectedNet</title>
      <link href="/2020/01/13/assignment-2-q1-fullyconnectednet/"/>
      <url>/2020/01/13/assignment-2-q1-fullyconnectednet/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>本文为斯坦福大学CS231n课程作业及总结，若有错误，欢迎指正。<br>所有代码均已上传到GitHub项目<a href="https://github.com/notplus/cs231n-assignment/tree/master/assignment2" target="_blank" rel="noopener">cs231n-assignment2</a></p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><h3 id="1-affine-layer-forward-amp-backward"><a href="#1-affine-layer-forward-amp-backward" class="headerlink" title="1. affine layer forward &amp; backward"></a>1. affine layer forward &amp; backward</h3><p><strong>实现思路:</strong>    </p><ul><li>前向传播直接进行点积即可，需注意<code>reshape</code>  </li><li>反向传播依据求导公式计算即可</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">affine_forward</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> w<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Computes the forward pass for an affine (fully-connected) layer.    The input x has shape (N, d_1, ..., d_k) and contains a minibatch of N    examples, where each example x[i] has shape (d_1, ..., d_k). We will    reshape each input into a vector of dimension D = d_1 * ... * d_k, and    then transform it to an output vector of dimension M.    Inputs:    - x: A numpy array containing input data, of shape (N, d_1, ..., d_k)    - w: A numpy array of weights, of shape (D, M)    - b: A numpy array of biases, of shape (M,)    Returns a tuple of:    - out: output, of shape (N, M)    - cache: (x, w, b)    """</span>    out <span class="token operator">=</span> None    <span class="token comment" spellcheck="true">###########################################################################</span>    <span class="token comment" spellcheck="true"># TODO: Implement the affine forward pass. Store the result in out. You   #</span>    <span class="token comment" spellcheck="true"># will need to reshape the input into rows.                               #</span>    <span class="token comment" spellcheck="true">###########################################################################</span>    <span class="token comment" spellcheck="true"># *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>    X <span class="token operator">=</span> x<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>x<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    out <span class="token operator">=</span> X<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>w<span class="token punctuation">)</span> <span class="token operator">+</span> b    <span class="token comment" spellcheck="true"># *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>    <span class="token comment" spellcheck="true">###########################################################################</span>    <span class="token comment" spellcheck="true">#                             END OF YOUR CODE                            #</span>    <span class="token comment" spellcheck="true">###########################################################################</span>    cache <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> w<span class="token punctuation">,</span> b<span class="token punctuation">)</span>    <span class="token keyword">return</span> out<span class="token punctuation">,</span> cache<span class="token keyword">def</span> <span class="token function">affine_backward</span><span class="token punctuation">(</span>dout<span class="token punctuation">,</span> cache<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Computes the backward pass for an affine layer.    Inputs:    - dout: Upstream derivative, of shape (N, M)    - cache: Tuple of:      - x: Input data, of shape (N, d_1, ... d_k)      - w: Weights, of shape (D, M)      - b: Biases, of shape (M,)    Returns a tuple of:    - dx: Gradient with respect to x, of shape (N, d1, ..., d_k)    - dw: Gradient with respect to w, of shape (D, M)    - db: Gradient with respect to b, of shape (M,)    """</span>    x<span class="token punctuation">,</span> w<span class="token punctuation">,</span> b <span class="token operator">=</span> cache    dx<span class="token punctuation">,</span> dw<span class="token punctuation">,</span> db <span class="token operator">=</span> None<span class="token punctuation">,</span> None<span class="token punctuation">,</span> None    <span class="token comment" spellcheck="true">###########################################################################</span>    <span class="token comment" spellcheck="true"># TODO: Implement the affine backward pass.                               #</span>    <span class="token comment" spellcheck="true">###########################################################################</span>    <span class="token comment" spellcheck="true"># *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>    x_reshape <span class="token operator">=</span> x<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>x<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    dx <span class="token operator">=</span> dout<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>w<span class="token punctuation">.</span>T<span class="token punctuation">)</span>    dx <span class="token operator">=</span> dx<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>x<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>    dw <span class="token operator">=</span> x_reshape<span class="token punctuation">.</span>T<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>dout<span class="token punctuation">)</span>    db <span class="token operator">=</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>dout<span class="token punctuation">,</span>axis <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>    <span class="token comment" spellcheck="true">###########################################################################</span>    <span class="token comment" spellcheck="true">#                             END OF YOUR CODE                            #</span>    <span class="token comment" spellcheck="true">###########################################################################</span>    <span class="token keyword">return</span> dx<span class="token punctuation">,</span> dw<span class="token punctuation">,</span> db</code></pre><h3 id="2-ReLU-layer-forward-amp-backward"><a href="#2-ReLU-layer-forward-amp-backward" class="headerlink" title="2. ReLU layer forward &amp; backward"></a>2. ReLU layer forward &amp; backward</h3><p><strong>实现思路:</strong>    </p><ul><li>前向传播通过索引令<code>x&lt;0</code>部分为0</li><li>反向传播依据求导公式计算即可，即大于0导数为1</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">relu_forward</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Computes the forward pass for a layer of rectified linear units (ReLUs).    Input:    - x: Inputs, of any shape    Returns a tuple of:    - out: Output, of the same shape as x    - cache: x    """</span>    out <span class="token operator">=</span> None    <span class="token comment" spellcheck="true">###########################################################################</span>    <span class="token comment" spellcheck="true"># TODO: Implement the ReLU forward pass.                                  #</span>    <span class="token comment" spellcheck="true">###########################################################################</span>    <span class="token comment" spellcheck="true"># *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>    out <span class="token operator">=</span> x<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>    out<span class="token punctuation">[</span>x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment" spellcheck="true"># *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>    <span class="token comment" spellcheck="true">###########################################################################</span>    <span class="token comment" spellcheck="true">#                             END OF YOUR CODE                            #</span>    <span class="token comment" spellcheck="true">###########################################################################</span>    cache <span class="token operator">=</span> x    <span class="token keyword">return</span> out<span class="token punctuation">,</span> cache<span class="token keyword">def</span> <span class="token function">relu_backward</span><span class="token punctuation">(</span>dout<span class="token punctuation">,</span> cache<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Computes the backward pass for a layer of rectified linear units (ReLUs).    Input:    - dout: Upstream derivatives, of any shape    - cache: Input x, of same shape as dout    Returns:    - dx: Gradient with respect to x    """</span>    dx<span class="token punctuation">,</span> x <span class="token operator">=</span> None<span class="token punctuation">,</span> cache    <span class="token comment" spellcheck="true">###########################################################################</span>    <span class="token comment" spellcheck="true"># TODO: Implement the ReLU backward pass.                                 #</span>    <span class="token comment" spellcheck="true">###########################################################################</span>    <span class="token comment" spellcheck="true"># *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>    dx <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> dout    <span class="token comment" spellcheck="true"># *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>    <span class="token comment" spellcheck="true">###########################################################################</span>    <span class="token comment" spellcheck="true">#                             END OF YOUR CODE                            #</span>    <span class="token comment" spellcheck="true">###########################################################################</span>    <span class="token keyword">return</span> dx</code></pre><h3 id="3-完成-TwoLayerNet-类"><a href="#3-完成-TwoLayerNet-类" class="headerlink" title="3. 完成 TwoLayerNet 类"></a>3. 完成 TwoLayerNet 类</h3><p><strong>实现思路:</strong>   </p><ul><li>权重初始化按照要求服从相应高斯分布，通过<code>np.random.normal()</code>函数生成</li><li>前向传播通过<code>layer_utils.py</code>整合的层进行</li><li>反向传播通过组合多个<code>backward</code>函数，需注意加入正则化</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">TwoLayerNet</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    A two-layer fully-connected neural network with ReLU nonlinearity and    softmax loss that uses a modular layer design. We assume an input dimension    of D, a hidden dimension of H, and perform classification over C classes.    The architecure should be affine - relu - affine - softmax.    Note that this class does not implement gradient descent; instead, it    will interact with a separate Solver object that is responsible for running    optimization.    The learnable parameters of the model are stored in the dictionary    self.params that maps parameter names to numpy arrays.    """</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> input_dim<span class="token operator">=</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">32</span><span class="token operator">*</span><span class="token number">32</span><span class="token punctuation">,</span> hidden_dim<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> num_classes<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>                 weight_scale<span class="token operator">=</span><span class="token number">1e</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> reg<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Initialize a new network.        Inputs:        - input_dim: An integer giving the size of the input        - hidden_dim: An integer giving the size of the hidden layer        - num_classes: An integer giving the number of classes to classify        - weight_scale: Scalar giving the standard deviation for random          initialization of the weights.        - reg: Scalar giving L2 regularization strength.        """</span>        self<span class="token punctuation">.</span>params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        self<span class="token punctuation">.</span>reg <span class="token operator">=</span> reg        <span class="token comment" spellcheck="true">############################################################################</span>        <span class="token comment" spellcheck="true"># TODO: Initialize the weights and biases of the two-layer net. Weights    #</span>        <span class="token comment" spellcheck="true"># should be initialized from a Gaussian centered at 0.0 with               #</span>        <span class="token comment" spellcheck="true"># standard deviation equal to weight_scale, and biases should be           #</span>        <span class="token comment" spellcheck="true"># initialized to zero. All weights and biases should be stored in the      #</span>        <span class="token comment" spellcheck="true"># dictionary self.params, with first layer weights                         #</span>        <span class="token comment" spellcheck="true"># and biases using the keys 'W1' and 'b1' and second layer                 #</span>        <span class="token comment" spellcheck="true"># weights and biases using the keys 'W2' and 'b2'.                         #</span>        <span class="token comment" spellcheck="true">############################################################################</span>        <span class="token comment" spellcheck="true"># *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>        self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'W1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">,</span> scale<span class="token operator">=</span>weight_scale<span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span>input_dim<span class="token punctuation">,</span>hidden_dim<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'b1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>hidden_dim<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'W2'</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">,</span> scale<span class="token operator">=</span>weight_scale<span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span>hidden_dim<span class="token punctuation">,</span>num_classes<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'b2'</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>num_classes<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>        <span class="token comment" spellcheck="true">############################################################################</span>        <span class="token comment" spellcheck="true">#                             END OF YOUR CODE                             #</span>        <span class="token comment" spellcheck="true">############################################################################</span>    <span class="token keyword">def</span> <span class="token function">loss</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> X<span class="token punctuation">,</span> y<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Compute loss and gradient for a minibatch of data.        Inputs:        - X: Array of input data of shape (N, d_1, ..., d_k)        - y: Array of labels, of shape (N,). y[i] gives the label for X[i].        Returns:        If y is None, then run a test-time forward pass of the model and return:        - scores: Array of shape (N, C) giving classification scores, where          scores[i, c] is the classification score for X[i] and class c.        If y is not None, then run a training-time forward and backward pass and        return a tuple of:        - loss: Scalar value giving the loss        - grads: Dictionary with the same keys as self.params, mapping parameter          names to gradients of the loss with respect to those parameters.        """</span>        scores <span class="token operator">=</span> None        <span class="token comment" spellcheck="true">############################################################################</span>        <span class="token comment" spellcheck="true"># TODO: Implement the forward pass for the two-layer net, computing the    #</span>        <span class="token comment" spellcheck="true"># class scores for X and storing them in the scores variable.              #</span>        <span class="token comment" spellcheck="true">############################################################################</span>        <span class="token comment" spellcheck="true"># *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>        a1<span class="token punctuation">,</span> a1_cache <span class="token operator">=</span> affine_relu_forward<span class="token punctuation">(</span>X<span class="token punctuation">,</span> self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'W1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'b1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        a2<span class="token punctuation">,</span> a2_cache <span class="token operator">=</span> affine_forward<span class="token punctuation">(</span>a1<span class="token punctuation">,</span> self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'W2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'b2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        scores <span class="token operator">=</span> a2        <span class="token comment" spellcheck="true"># *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>        <span class="token comment" spellcheck="true">############################################################################</span>        <span class="token comment" spellcheck="true">#                             END OF YOUR CODE                             #</span>        <span class="token comment" spellcheck="true">############################################################################</span>        <span class="token comment" spellcheck="true"># If y is None then we are in test mode so just return scores</span>        <span class="token keyword">if</span> y <span class="token keyword">is</span> None<span class="token punctuation">:</span>            <span class="token keyword">return</span> scores        loss<span class="token punctuation">,</span> grads <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">############################################################################</span>        <span class="token comment" spellcheck="true"># TODO: Implement the backward pass for the two-layer net. Store the loss  #</span>        <span class="token comment" spellcheck="true"># in the loss variable and gradients in the grads dictionary. Compute data #</span>        <span class="token comment" spellcheck="true"># loss using softmax, and make sure that grads[k] holds the gradients for  #</span>        <span class="token comment" spellcheck="true"># self.params[k]. Don't forget to add L2 regularization!                   #</span>        <span class="token comment" spellcheck="true">#                                                                          #</span>        <span class="token comment" spellcheck="true"># NOTE: To ensure that your implementation matches ours and you pass the   #</span>        <span class="token comment" spellcheck="true"># automated tests, make sure that your L2 regularization includes a factor #</span>        <span class="token comment" spellcheck="true"># of 0.5 to simplify the expression for the gradient.                      #</span>        <span class="token comment" spellcheck="true">############################################################################</span>        <span class="token comment" spellcheck="true"># *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>        loss<span class="token punctuation">,</span> dscores <span class="token operator">=</span> softmax_loss<span class="token punctuation">(</span>scores<span class="token punctuation">,</span> y<span class="token punctuation">)</span>        loss <span class="token operator">+=</span> <span class="token number">0.5</span> <span class="token operator">*</span> self<span class="token punctuation">.</span>reg <span class="token operator">*</span> <span class="token punctuation">(</span>np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'W1'</span><span class="token punctuation">]</span> <span class="token operator">*</span> self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'W1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'W2'</span><span class="token punctuation">]</span> <span class="token operator">*</span> self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'W2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        da2<span class="token punctuation">,</span> grads<span class="token punctuation">[</span><span class="token string">'W2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> grads<span class="token punctuation">[</span><span class="token string">'b2'</span><span class="token punctuation">]</span> <span class="token operator">=</span> affine_backward<span class="token punctuation">(</span>dscores<span class="token punctuation">,</span>a2_cache<span class="token punctuation">)</span>        da1<span class="token punctuation">,</span> grads<span class="token punctuation">[</span><span class="token string">'W1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> grads<span class="token punctuation">[</span><span class="token string">'b1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> affine_relu_backward<span class="token punctuation">(</span>da2<span class="token punctuation">,</span>a1_cache<span class="token punctuation">)</span>        grads<span class="token punctuation">[</span><span class="token string">'W2'</span><span class="token punctuation">]</span> <span class="token operator">+=</span> self<span class="token punctuation">.</span>reg <span class="token operator">*</span> self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'W2'</span><span class="token punctuation">]</span>        grads<span class="token punctuation">[</span><span class="token string">'W1'</span><span class="token punctuation">]</span> <span class="token operator">+=</span> self<span class="token punctuation">.</span>reg <span class="token operator">*</span> self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'W1'</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>        <span class="token comment" spellcheck="true">############################################################################</span>        <span class="token comment" spellcheck="true">#                             END OF YOUR CODE                             #</span>        <span class="token comment" spellcheck="true">############################################################################</span>        <span class="token keyword">return</span> loss<span class="token punctuation">,</span> grads</code></pre><h3 id="4-训练一个双层神经网络"><a href="#4-训练一个双层神经网络" class="headerlink" title="4. 训练一个双层神经网络"></a>4. 训练一个双层神经网络</h3><p><strong>实现思路:</strong><br>通过<code>TwoLayerNet</code>类构造神经网络，<code>Solver</code>调节超参数</p><pre class=" language-python"><code class="language-python">model <span class="token operator">=</span> TwoLayerNet<span class="token punctuation">(</span><span class="token punctuation">)</span>solver <span class="token operator">=</span> None<span class="token comment" spellcheck="true">##############################################################################</span><span class="token comment" spellcheck="true"># TODO: Use a Solver instance to train a TwoLayerNet that achieves at least  #</span><span class="token comment" spellcheck="true"># 50% accuracy on the validation set.                                        #</span><span class="token comment" spellcheck="true">##############################################################################</span><span class="token comment" spellcheck="true"># *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>model <span class="token operator">=</span> TwoLayerNet<span class="token punctuation">(</span>reg<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span>solver <span class="token operator">=</span> Solver<span class="token punctuation">(</span>model<span class="token punctuation">,</span> data<span class="token punctuation">,</span>                update_rule<span class="token operator">=</span><span class="token string">'sgd'</span><span class="token punctuation">,</span>                optim_config<span class="token operator">=</span><span class="token punctuation">{</span>                    <span class="token string">'learning_rate'</span><span class="token punctuation">:</span> <span class="token number">1e</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                lr_decay<span class="token operator">=</span><span class="token number">0.95</span><span class="token punctuation">,</span>                num_epochs<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span>                print_every<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>solver<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>scores <span class="token operator">=</span> model<span class="token punctuation">.</span>loss<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'X_test'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>y_pred <span class="token operator">=</span> np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>scores<span class="token punctuation">,</span> axis <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>acc <span class="token operator">=</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>y_pred <span class="token operator">==</span> data<span class="token punctuation">[</span><span class="token string">'y_test'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'test acc: %f'</span><span class="token operator">%</span>acc<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span><span class="token comment" spellcheck="true">##############################################################################</span><span class="token comment" spellcheck="true">#                             END OF YOUR CODE                               #</span><span class="token comment" spellcheck="true">##############################################################################</span></code></pre><h3 id="5-完成-FullyConnectedNet-类"><a href="#5-完成-FullyConnectedNet-类" class="headerlink" title="5. 完成 FullyConnectedNet 类"></a>5. 完成 FullyConnectedNet 类</h3><p><strong>实现思路：</strong></p><ul><li>通过循环来进行前向传播</li><li>batchnorm normalization 和 layer normalization 初始化 gamma=1, beta=0</li><li>权重还是按照高斯分布初始化</li><li>反向传播仍然通过循环进行，多个层的反向传播函数进行组合</li><li>注：<code>affine_bn_relu_forward</code> <code>affine_bn_relu_backward</code> <code>affine_ln_relu_forward</code><br>  <code>affine_ln_relu_backward</code> 四个函数位于<code>layer_utils.py</code>文件，笔者自行加入</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">FullyConnectedNet</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    A fully-connected neural network with an arbitrary number of hidden layers,    ReLU nonlinearities, and a softmax loss function. This will also implement    dropout and batch/layer normalization as options. For a network with L layers,    the architecture will be    {affine - [batch/layer norm] - relu - [dropout]} x (L - 1) - affine - softmax    where batch/layer normalization and dropout are optional, and the {...} block is    repeated L - 1 times.    Similar to the TwoLayerNet above, learnable parameters are stored in the    self.params dictionary and will be learned using the Solver class.    """</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> hidden_dims<span class="token punctuation">,</span> input_dim<span class="token operator">=</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">32</span><span class="token operator">*</span><span class="token number">32</span><span class="token punctuation">,</span> num_classes<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>                 dropout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> normalization<span class="token operator">=</span>None<span class="token punctuation">,</span> reg<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">,</span>                 weight_scale<span class="token operator">=</span><span class="token number">1e</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">,</span> seed<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Initialize a new FullyConnectedNet.        Inputs:        - hidden_dims: A list of integers giving the size of each hidden layer.        - input_dim: An integer giving the size of the input.        - num_classes: An integer giving the number of classes to classify.        - dropout: Scalar between 0 and 1 giving dropout strength. If dropout=1 then          the network should not use dropout at all.        - normalization: What type of normalization the network should use. Valid values          are "batchnorm", "layernorm", or None for no normalization (the default).        - reg: Scalar giving L2 regularization strength.        - weight_scale: Scalar giving the standard deviation for random          initialization of the weights.        - dtype: A numpy datatype object; all computations will be performed using          this datatype. float32 is faster but less accurate, so you should use          float64 for numeric gradient checking.        - seed: If not None, then pass this random seed to the dropout layers. This          will make the dropout layers deteriminstic so we can gradient check the          model.        """</span>        self<span class="token punctuation">.</span>normalization <span class="token operator">=</span> normalization        self<span class="token punctuation">.</span>use_dropout <span class="token operator">=</span> dropout <span class="token operator">!=</span> <span class="token number">1</span>        self<span class="token punctuation">.</span>reg <span class="token operator">=</span> reg        self<span class="token punctuation">.</span>num_layers <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> len<span class="token punctuation">(</span>hidden_dims<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>dtype <span class="token operator">=</span> dtype        self<span class="token punctuation">.</span>params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">############################################################################</span>        <span class="token comment" spellcheck="true"># TODO: Initialize the parameters of the network, storing all values in    #</span>        <span class="token comment" spellcheck="true"># the self.params dictionary. Store weights and biases for the first layer #</span>        <span class="token comment" spellcheck="true"># in W1 and b1; for the second layer use W2 and b2, etc. Weights should be #</span>        <span class="token comment" spellcheck="true"># initialized from a normal distribution centered at 0 with standard       #</span>        <span class="token comment" spellcheck="true"># deviation equal to weight_scale. Biases should be initialized to zero.   #</span>        <span class="token comment" spellcheck="true">#                                                                          #</span>        <span class="token comment" spellcheck="true"># When using batch normalization, store scale and shift parameters for the #</span>        <span class="token comment" spellcheck="true"># first layer in gamma1 and beta1; for the second layer use gamma2 and     #</span>        <span class="token comment" spellcheck="true"># beta2, etc. Scale parameters should be initialized to ones and shift     #</span>        <span class="token comment" spellcheck="true"># parameters should be initialized to zeros.                               #</span>        <span class="token comment" spellcheck="true">############################################################################</span>        <span class="token comment" spellcheck="true"># *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>        layer_input_dim <span class="token operator">=</span> input_dim        <span class="token keyword">for</span> i<span class="token punctuation">,</span> hid <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>hidden_dims<span class="token punctuation">)</span><span class="token punctuation">:</span>          self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'W%d'</span><span class="token operator">%</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">,</span> scale<span class="token operator">=</span>weight_scale<span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span>layer_input_dim<span class="token punctuation">,</span>hid<span class="token punctuation">)</span><span class="token punctuation">)</span>          self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'b%d'</span><span class="token operator">%</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>hid<span class="token punctuation">)</span>          <span class="token keyword">if</span> self<span class="token punctuation">.</span>normalization <span class="token operator">==</span> <span class="token string">'batchnorm'</span> <span class="token operator">or</span> self<span class="token punctuation">.</span>normalization <span class="token operator">==</span> <span class="token string">'layernorm'</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'gamma%d'</span><span class="token operator">%</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span>hid<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'beta%d'</span><span class="token operator">%</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>hid<span class="token punctuation">)</span>          layer_input_dim <span class="token operator">=</span> hid        self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'W%d'</span><span class="token operator">%</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>num_layers<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">,</span> scale<span class="token operator">=</span>weight_scale<span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span>layer_input_dim<span class="token punctuation">,</span>num_classes<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'b%d'</span><span class="token operator">%</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>num_layers<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>num_classes<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>        <span class="token comment" spellcheck="true">############################################################################</span>        <span class="token comment" spellcheck="true">#                             END OF YOUR CODE                             #</span>        <span class="token comment" spellcheck="true">############################################################################</span>        <span class="token comment" spellcheck="true"># When using dropout we need to pass a dropout_param dictionary to each</span>        <span class="token comment" spellcheck="true"># dropout layer so that the layer knows the dropout probability and the mode</span>        <span class="token comment" spellcheck="true"># (train / test). You can pass the same dropout_param to each dropout layer.</span>        self<span class="token punctuation">.</span>dropout_param <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>use_dropout<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>dropout_param <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'mode'</span><span class="token punctuation">:</span> <span class="token string">'train'</span><span class="token punctuation">,</span> <span class="token string">'p'</span><span class="token punctuation">:</span> dropout<span class="token punctuation">}</span>            <span class="token keyword">if</span> seed <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>                self<span class="token punctuation">.</span>dropout_param<span class="token punctuation">[</span><span class="token string">'seed'</span><span class="token punctuation">]</span> <span class="token operator">=</span> seed        <span class="token comment" spellcheck="true"># With batch normalization we need to keep track of running means and</span>        <span class="token comment" spellcheck="true"># variances, so we need to pass a special bn_param object to each batch</span>        <span class="token comment" spellcheck="true"># normalization layer. You should pass self.bn_params[0] to the forward pass</span>        <span class="token comment" spellcheck="true"># of the first batch normalization layer, self.bn_params[1] to the forward</span>        <span class="token comment" spellcheck="true"># pass of the second batch normalization layer, etc.</span>        self<span class="token punctuation">.</span>bn_params <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>normalization<span class="token operator">==</span><span class="token string">'batchnorm'</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>bn_params <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">'mode'</span><span class="token punctuation">:</span> <span class="token string">'train'</span><span class="token punctuation">}</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>self<span class="token punctuation">.</span>num_layers <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>normalization<span class="token operator">==</span><span class="token string">'layernorm'</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>bn_params <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>self<span class="token punctuation">.</span>num_layers <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># Cast all parameters to the correct datatype</span>        <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> self<span class="token punctuation">.</span>params<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>params<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">.</span>astype<span class="token punctuation">(</span>dtype<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">loss</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> X<span class="token punctuation">,</span> y<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Compute loss and gradient for the fully-connected net.        Input / output: Same as TwoLayerNet above.        """</span>        X <span class="token operator">=</span> X<span class="token punctuation">.</span>astype<span class="token punctuation">(</span>self<span class="token punctuation">.</span>dtype<span class="token punctuation">)</span>        mode <span class="token operator">=</span> <span class="token string">'test'</span> <span class="token keyword">if</span> y <span class="token keyword">is</span> None <span class="token keyword">else</span> <span class="token string">'train'</span>        <span class="token comment" spellcheck="true"># Set train/test mode for batchnorm params and dropout param since they</span>        <span class="token comment" spellcheck="true"># behave differently during training and testing.</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>use_dropout<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>dropout_param<span class="token punctuation">[</span><span class="token string">'mode'</span><span class="token punctuation">]</span> <span class="token operator">=</span> mode        <span class="token keyword">if</span> self<span class="token punctuation">.</span>normalization<span class="token operator">==</span><span class="token string">'batchnorm'</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> bn_param <span class="token keyword">in</span> self<span class="token punctuation">.</span>bn_params<span class="token punctuation">:</span>                bn_param<span class="token punctuation">[</span><span class="token string">'mode'</span><span class="token punctuation">]</span> <span class="token operator">=</span> mode        scores <span class="token operator">=</span> None        <span class="token comment" spellcheck="true">############################################################################</span>        <span class="token comment" spellcheck="true"># TODO: Implement the forward pass for the fully-connected net, computing  #</span>        <span class="token comment" spellcheck="true"># the class scores for X and storing them in the scores variable.          #</span>        <span class="token comment" spellcheck="true">#                                                                          #</span>        <span class="token comment" spellcheck="true"># When using dropout, you'll need to pass self.dropout_param to each       #</span>        <span class="token comment" spellcheck="true"># dropout forward pass.                                                    #</span>        <span class="token comment" spellcheck="true">#                                                                          #</span>        <span class="token comment" spellcheck="true"># When using batch normalization, you'll need to pass self.bn_params[0] to #</span>        <span class="token comment" spellcheck="true"># the forward pass for the first batch normalization layer, pass           #</span>        <span class="token comment" spellcheck="true"># self.bn_params[1] to the forward pass for the second batch normalization #</span>        <span class="token comment" spellcheck="true"># layer, etc.                                                              #</span>        <span class="token comment" spellcheck="true">############################################################################</span>        <span class="token comment" spellcheck="true"># *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>        layer_input <span class="token operator">=</span> X        ar_cache <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        dp_cache <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>self<span class="token punctuation">.</span>num_layers<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token keyword">if</span> self<span class="token punctuation">.</span>normalization <span class="token operator">==</span> None<span class="token punctuation">:</span>            layer_input<span class="token punctuation">,</span> ar_cache<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> affine_relu_forward<span class="token punctuation">(</span>layer_input<span class="token punctuation">,</span>self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'W%d'</span><span class="token operator">%</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'b%d'</span><span class="token operator">%</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                  <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> self<span class="token punctuation">.</span>normalization <span class="token operator">==</span> <span class="token string">'batchnorm'</span><span class="token punctuation">:</span>              layer_input<span class="token punctuation">,</span> ar_cache<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> affine_bn_relu_forward<span class="token punctuation">(</span>layer_input<span class="token punctuation">,</span>self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'W%d'</span><span class="token operator">%</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'b%d'</span><span class="token operator">%</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                                                                self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'gamma%d'</span><span class="token operator">%</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'beta%d'</span><span class="token operator">%</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>bn_params<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> self<span class="token punctuation">.</span>normalization <span class="token operator">==</span> <span class="token string">'layernorm'</span><span class="token punctuation">:</span>              layer_input<span class="token punctuation">,</span> ar_cache<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> affine_ln_relu_forward<span class="token punctuation">(</span>layer_input<span class="token punctuation">,</span>self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'W%d'</span><span class="token operator">%</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'b%d'</span><span class="token operator">%</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                                                                self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'gamma%d'</span><span class="token operator">%</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'beta%d'</span><span class="token operator">%</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>bn_params<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>          <span class="token keyword">if</span> self<span class="token punctuation">.</span>use_dropout<span class="token punctuation">:</span>            layer_input<span class="token punctuation">,</span> dp_cache<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dropout_forward<span class="token punctuation">(</span>layer_input<span class="token punctuation">,</span>self<span class="token punctuation">.</span>dropout_param<span class="token punctuation">)</span>        ar_out<span class="token punctuation">,</span> ar_cache<span class="token punctuation">[</span>self<span class="token punctuation">.</span>num_layers<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">=</span> affine_forward<span class="token punctuation">(</span>layer_input<span class="token punctuation">,</span>self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'W%d'</span><span class="token operator">%</span>self<span class="token punctuation">.</span>num_layers<span class="token punctuation">]</span><span class="token punctuation">,</span>self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'b%d'</span><span class="token operator">%</span>self<span class="token punctuation">.</span>num_layers<span class="token punctuation">]</span><span class="token punctuation">)</span>        scores <span class="token operator">=</span> ar_out           <span class="token comment" spellcheck="true"># *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>        <span class="token comment" spellcheck="true">############################################################################</span>        <span class="token comment" spellcheck="true">#                             END OF YOUR CODE                             #</span>        <span class="token comment" spellcheck="true">############################################################################</span>        <span class="token comment" spellcheck="true"># If test mode return early</span>        <span class="token keyword">if</span> mode <span class="token operator">==</span> <span class="token string">'test'</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> scores        loss<span class="token punctuation">,</span> grads <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">############################################################################</span>        <span class="token comment" spellcheck="true"># TODO: Implement the backward pass for the fully-connected net. Store the #</span>        <span class="token comment" spellcheck="true"># loss in the loss variable and gradients in the grads dictionary. Compute #</span>        <span class="token comment" spellcheck="true"># data loss using softmax, and make sure that grads[k] holds the gradients #</span>        <span class="token comment" spellcheck="true"># for self.params[k]. Don't forget to add L2 regularization!               #</span>        <span class="token comment" spellcheck="true">#                                                                          #</span>        <span class="token comment" spellcheck="true"># When using batch/layer normalization, you don't need to regularize the scale   #</span>        <span class="token comment" spellcheck="true"># and shift parameters.                                                    #</span>        <span class="token comment" spellcheck="true">#                                                                          #</span>        <span class="token comment" spellcheck="true"># NOTE: To ensure that your implementation matches ours and you pass the   #</span>        <span class="token comment" spellcheck="true"># automated tests, make sure that your L2 regularization includes a factor #</span>        <span class="token comment" spellcheck="true"># of 0.5 to simplify the expression for the gradient.                      #</span>        <span class="token comment" spellcheck="true">############################################################################</span>        <span class="token comment" spellcheck="true"># *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>        loss<span class="token punctuation">,</span> dscores <span class="token operator">=</span> softmax_loss<span class="token punctuation">(</span>scores<span class="token punctuation">,</span> y<span class="token punctuation">)</span>        loss <span class="token operator">+=</span> <span class="token number">0.5</span> <span class="token operator">*</span> self<span class="token punctuation">.</span>reg <span class="token operator">*</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'W%d'</span><span class="token operator">%</span>self<span class="token punctuation">.</span>num_layers<span class="token punctuation">]</span> <span class="token operator">*</span> self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'W%d'</span><span class="token operator">%</span>self<span class="token punctuation">.</span>num_layers<span class="token punctuation">]</span><span class="token punctuation">)</span>        dx<span class="token punctuation">,</span> grads<span class="token punctuation">[</span><span class="token string">'W%d'</span><span class="token operator">%</span>self<span class="token punctuation">.</span>num_layers<span class="token punctuation">]</span><span class="token punctuation">,</span> grads<span class="token punctuation">[</span><span class="token string">'b%d'</span><span class="token operator">%</span>self<span class="token punctuation">.</span>num_layers<span class="token punctuation">]</span> <span class="token operator">=</span> affine_backward<span class="token punctuation">(</span>dscores<span class="token punctuation">,</span> ar_cache<span class="token punctuation">[</span>self<span class="token punctuation">.</span>num_layers<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        grads<span class="token punctuation">[</span><span class="token string">'W%d'</span><span class="token operator">%</span>self<span class="token punctuation">.</span>num_layers<span class="token punctuation">]</span> <span class="token operator">+=</span> self<span class="token punctuation">.</span>reg <span class="token operator">*</span> self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'W%d'</span><span class="token operator">%</span>self<span class="token punctuation">.</span>num_layers<span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>self<span class="token punctuation">.</span>num_layers<span class="token number">-1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token keyword">if</span> self<span class="token punctuation">.</span>use_dropout<span class="token punctuation">:</span>            dx <span class="token operator">=</span> dropout_backward<span class="token punctuation">(</span>dx<span class="token punctuation">,</span> dp_cache<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>          <span class="token keyword">if</span> self<span class="token punctuation">.</span>normalization <span class="token operator">==</span> None<span class="token punctuation">:</span>            dx<span class="token punctuation">,</span> grads<span class="token punctuation">[</span><span class="token string">'W%d'</span><span class="token operator">%</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> grads<span class="token punctuation">[</span><span class="token string">'b%d'</span><span class="token operator">%</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> affine_relu_backward<span class="token punctuation">(</span>dx<span class="token punctuation">,</span> ar_cache<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>          <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> self<span class="token punctuation">.</span>normalization <span class="token operator">==</span> <span class="token string">'batchnorm'</span><span class="token punctuation">:</span>              dx<span class="token punctuation">,</span> grads<span class="token punctuation">[</span><span class="token string">'W%d'</span><span class="token operator">%</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> grads<span class="token punctuation">[</span><span class="token string">'b%d'</span><span class="token operator">%</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> grads<span class="token punctuation">[</span><span class="token string">'gamma%d'</span><span class="token operator">%</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> grads<span class="token punctuation">[</span><span class="token string">'beta%d'</span><span class="token operator">%</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> affine_bn_relu_backward<span class="token punctuation">(</span>dx<span class="token punctuation">,</span> ar_cache<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> self<span class="token punctuation">.</span>normalization <span class="token operator">==</span> <span class="token string">'layernorm'</span><span class="token punctuation">:</span>              dx<span class="token punctuation">,</span> grads<span class="token punctuation">[</span><span class="token string">'W%d'</span><span class="token operator">%</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> grads<span class="token punctuation">[</span><span class="token string">'b%d'</span><span class="token operator">%</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> grads<span class="token punctuation">[</span><span class="token string">'gamma%d'</span><span class="token operator">%</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> grads<span class="token punctuation">[</span><span class="token string">'beta%d'</span><span class="token operator">%</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> affine_ln_relu_backward<span class="token punctuation">(</span>dx<span class="token punctuation">,</span> ar_cache<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>          grads<span class="token punctuation">[</span><span class="token string">'W%d'</span><span class="token operator">%</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> self<span class="token punctuation">.</span>reg <span class="token operator">*</span> self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'W%d'</span><span class="token operator">%</span>i<span class="token punctuation">]</span>          loss <span class="token operator">+=</span> <span class="token number">0.5</span> <span class="token operator">*</span> self<span class="token punctuation">.</span>reg <span class="token operator">*</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'W%d'</span><span class="token operator">%</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'W%d'</span><span class="token operator">%</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>        <span class="token comment" spellcheck="true">############################################################################</span>        <span class="token comment" spellcheck="true">#                             END OF YOUR CODE                             #</span>        <span class="token comment" spellcheck="true">############################################################################</span>        <span class="token keyword">return</span> loss<span class="token punctuation">,</span> grads</code></pre><h3 id="6-SGD-with-momentum"><a href="#6-SGD-with-momentum" class="headerlink" title="6. SGD with momentum"></a>6. SGD with momentum</h3><p><strong>实现思路：</strong>  </p><ul><li>按照公式计算</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sgd_momentum</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> dw<span class="token punctuation">,</span> config<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Performs stochastic gradient descent with momentum.    config format:    - learning_rate: Scalar learning rate.    - momentum: Scalar between 0 and 1 giving the momentum value.      Setting momentum = 0 reduces to sgd.    - velocity: A numpy array of the same shape as w and dw used to store a      moving average of the gradients.    """</span>    <span class="token keyword">if</span> config <span class="token keyword">is</span> None<span class="token punctuation">:</span> config <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    config<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'learning_rate'</span><span class="token punctuation">,</span> <span class="token number">1e</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span>    config<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'momentum'</span><span class="token punctuation">,</span> <span class="token number">0.9</span><span class="token punctuation">)</span>    v <span class="token operator">=</span> config<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'velocity'</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>zeros_like<span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">)</span>    next_w <span class="token operator">=</span> None    <span class="token comment" spellcheck="true">###########################################################################</span>    <span class="token comment" spellcheck="true"># TODO: Implement the momentum update formula. Store the updated value in #</span>    <span class="token comment" spellcheck="true"># the next_w variable. You should also use and update the velocity v.     #</span>    <span class="token comment" spellcheck="true">###########################################################################</span>    <span class="token comment" spellcheck="true"># *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>    v <span class="token operator">=</span> config<span class="token punctuation">[</span><span class="token string">'momentum'</span><span class="token punctuation">]</span> <span class="token operator">*</span> v <span class="token operator">-</span> config<span class="token punctuation">[</span><span class="token string">'learning_rate'</span><span class="token punctuation">]</span> <span class="token operator">*</span> dw    next_w <span class="token operator">=</span> w <span class="token operator">+</span> v    <span class="token comment" spellcheck="true"># *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>    <span class="token comment" spellcheck="true">###########################################################################</span>    <span class="token comment" spellcheck="true">#                             END OF YOUR CODE                            #</span>    <span class="token comment" spellcheck="true">###########################################################################</span>    config<span class="token punctuation">[</span><span class="token string">'velocity'</span><span class="token punctuation">]</span> <span class="token operator">=</span> v    <span class="token keyword">return</span> next_w<span class="token punctuation">,</span> config</code></pre><h3 id="8-RMSProp-amp-Adam-算法"><a href="#8-RMSProp-amp-Adam-算法" class="headerlink" title="8. RMSProp &amp; Adam 算法"></a>8. RMSProp &amp; Adam 算法</h3><p><strong>实现思路：</strong>  </p><ul><li>按照公式计算</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">rmsprop</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> dw<span class="token punctuation">,</span> config<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Uses the RMSProp update rule, which uses a moving average of squared    gradient values to set adaptive per-parameter learning rates.    config format:    - learning_rate: Scalar learning rate.    - decay_rate: Scalar between 0 and 1 giving the decay rate for the squared      gradient cache.    - epsilon: Small scalar used for smoothing to avoid dividing by zero.    - cache: Moving average of second moments of gradients.    """</span>    <span class="token keyword">if</span> config <span class="token keyword">is</span> None<span class="token punctuation">:</span> config <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    config<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'learning_rate'</span><span class="token punctuation">,</span> <span class="token number">1e</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span>    config<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'decay_rate'</span><span class="token punctuation">,</span> <span class="token number">0.99</span><span class="token punctuation">)</span>    config<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'epsilon'</span><span class="token punctuation">,</span> <span class="token number">1e</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span>    config<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'cache'</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>zeros_like<span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">)</span>    next_w <span class="token operator">=</span> None    <span class="token comment" spellcheck="true">###########################################################################</span>    <span class="token comment" spellcheck="true"># TODO: Implement the RMSprop update formula, storing the next value of w #</span>    <span class="token comment" spellcheck="true"># in the next_w variable. Don't forget to update cache value stored in    #</span>    <span class="token comment" spellcheck="true"># config['cache'].                                                        #</span>    <span class="token comment" spellcheck="true">###########################################################################</span>    <span class="token comment" spellcheck="true"># *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>    config<span class="token punctuation">[</span><span class="token string">'cache'</span><span class="token punctuation">]</span> <span class="token operator">=</span> config<span class="token punctuation">[</span><span class="token string">'decay_rate'</span><span class="token punctuation">]</span> <span class="token operator">*</span> config<span class="token punctuation">[</span><span class="token string">'cache'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> config<span class="token punctuation">[</span><span class="token string">'decay_rate'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> dw <span class="token operator">**</span> <span class="token number">2</span>    next_w <span class="token operator">=</span> w <span class="token operator">-</span> config<span class="token punctuation">[</span><span class="token string">'learning_rate'</span><span class="token punctuation">]</span> <span class="token operator">*</span> dw <span class="token operator">/</span> <span class="token punctuation">(</span>np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>config<span class="token punctuation">[</span><span class="token string">'cache'</span><span class="token punctuation">]</span> <span class="token operator">+</span> config<span class="token punctuation">[</span><span class="token string">'epsilon'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>    <span class="token comment" spellcheck="true">###########################################################################</span>    <span class="token comment" spellcheck="true">#                             END OF YOUR CODE                            #</span>    <span class="token comment" spellcheck="true">###########################################################################</span>    <span class="token keyword">return</span> next_w<span class="token punctuation">,</span> config<span class="token keyword">def</span> <span class="token function">adam</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> dw<span class="token punctuation">,</span> config<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Uses the Adam update rule, which incorporates moving averages of both the    gradient and its square and a bias correction term.    config format:    - learning_rate: Scalar learning rate.    - beta1: Decay rate for moving average of first moment of gradient.    - beta2: Decay rate for moving average of second moment of gradient.    - epsilon: Small scalar used for smoothing to avoid dividing by zero.    - m: Moving average of gradient.    - v: Moving average of squared gradient.    - t: Iteration number.    """</span>    <span class="token keyword">if</span> config <span class="token keyword">is</span> None<span class="token punctuation">:</span> config <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    config<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'learning_rate'</span><span class="token punctuation">,</span> <span class="token number">1e</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span>    config<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'beta1'</span><span class="token punctuation">,</span> <span class="token number">0.9</span><span class="token punctuation">)</span>    config<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'beta2'</span><span class="token punctuation">,</span> <span class="token number">0.999</span><span class="token punctuation">)</span>    config<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'epsilon'</span><span class="token punctuation">,</span> <span class="token number">1e</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span>    config<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'m'</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>zeros_like<span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">)</span>    config<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'v'</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>zeros_like<span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">)</span>    config<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'t'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    next_w <span class="token operator">=</span> None    <span class="token comment" spellcheck="true">###########################################################################</span>    <span class="token comment" spellcheck="true"># TODO: Implement the Adam update formula, storing the next value of w in #</span>    <span class="token comment" spellcheck="true"># the next_w variable. Don't forget to update the m, v, and t variables   #</span>    <span class="token comment" spellcheck="true"># stored in config.                                                       #</span>    <span class="token comment" spellcheck="true">#                                                                         #</span>    <span class="token comment" spellcheck="true"># NOTE: In order to match the reference output, please modify t _before_  #</span>    <span class="token comment" spellcheck="true"># using it in any calculations.                                           #</span>    <span class="token comment" spellcheck="true">###########################################################################</span>    <span class="token comment" spellcheck="true"># *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>    config<span class="token punctuation">[</span><span class="token string">'t'</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>    config<span class="token punctuation">[</span><span class="token string">'m'</span><span class="token punctuation">]</span> <span class="token operator">=</span> config<span class="token punctuation">[</span><span class="token string">'beta1'</span><span class="token punctuation">]</span> <span class="token operator">*</span> config<span class="token punctuation">[</span><span class="token string">'m'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> config<span class="token punctuation">[</span><span class="token string">'beta1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> dw    config<span class="token punctuation">[</span><span class="token string">'v'</span><span class="token punctuation">]</span> <span class="token operator">=</span> config<span class="token punctuation">[</span><span class="token string">'beta2'</span><span class="token punctuation">]</span> <span class="token operator">*</span> config<span class="token punctuation">[</span><span class="token string">'v'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> config<span class="token punctuation">[</span><span class="token string">'beta2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>dw <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span>    m_unbias <span class="token operator">=</span> config<span class="token punctuation">[</span><span class="token string">'m'</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> config<span class="token punctuation">[</span><span class="token string">'beta1'</span><span class="token punctuation">]</span> <span class="token operator">**</span> config<span class="token punctuation">[</span><span class="token string">'t'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    v_unbias <span class="token operator">=</span> config<span class="token punctuation">[</span><span class="token string">'v'</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> config<span class="token punctuation">[</span><span class="token string">'beta2'</span><span class="token punctuation">]</span> <span class="token operator">**</span> config<span class="token punctuation">[</span><span class="token string">'t'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    next_w <span class="token operator">=</span> w <span class="token operator">-</span> config<span class="token punctuation">[</span><span class="token string">'learning_rate'</span><span class="token punctuation">]</span> <span class="token operator">*</span> m_unbias <span class="token operator">/</span> <span class="token punctuation">(</span>np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>v_unbias<span class="token punctuation">)</span> <span class="token operator">+</span> config<span class="token punctuation">[</span><span class="token string">'epsilon'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>    <span class="token comment" spellcheck="true">###########################################################################</span>    <span class="token comment" spellcheck="true">#                             END OF YOUR CODE                            #</span>    <span class="token comment" spellcheck="true">###########################################################################</span>    <span class="token keyword">return</span> next_w<span class="token punctuation">,</span> config</code></pre><h3 id="9-训练一个模型"><a href="#9-训练一个模型" class="headerlink" title="9. 训练一个模型"></a>9. 训练一个模型</h3><pre class=" language-python"><code class="language-python">best_model <span class="token operator">=</span> None<span class="token comment" spellcheck="true">################################################################################</span><span class="token comment" spellcheck="true"># TODO: Train the best FullyConnectedNet that you can on CIFAR-10. You might   #</span><span class="token comment" spellcheck="true"># find batch/layer normalization and dropout useful. Store your best model in  #</span><span class="token comment" spellcheck="true"># the best_model variable.                                                     #</span><span class="token comment" spellcheck="true">################################################################################</span><span class="token comment" spellcheck="true"># *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>learning_rate <span class="token operator">=</span> <span class="token number">3.1e-4</span>weight_scale <span class="token operator">=</span> <span class="token number">2.5e-2</span> <span class="token comment" spellcheck="true">#1e-5</span>model <span class="token operator">=</span> FullyConnectedNet<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">600</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                weight_scale<span class="token operator">=</span>weight_scale<span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>float64<span class="token punctuation">,</span> dropout<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span> normalization<span class="token operator">=</span><span class="token string">'batchnorm'</span><span class="token punctuation">,</span> reg<span class="token operator">=</span><span class="token number">1e</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span>solver <span class="token operator">=</span> Solver<span class="token punctuation">(</span>model<span class="token punctuation">,</span> data<span class="token punctuation">,</span>                print_every<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> num_epochs<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span>                update_rule<span class="token operator">=</span><span class="token string">'adam'</span><span class="token punctuation">,</span>                optim_config<span class="token operator">=</span><span class="token punctuation">{</span>                  <span class="token string">'learning_rate'</span><span class="token punctuation">:</span> learning_rate<span class="token punctuation">,</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                lr_decay<span class="token operator">=</span><span class="token number">0.9</span>         <span class="token punctuation">)</span>solver<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>best_model <span class="token operator">=</span> model<span class="token comment" spellcheck="true"># *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span><span class="token comment" spellcheck="true">################################################################################</span><span class="token comment" spellcheck="true">#                              END OF YOUR CODE                                #</span><span class="token comment" spellcheck="true">################################################################################</span></code></pre><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>本次作业亲手搭建一个神经网络，编写全连接层、ReLU层前向和反向传播，以及组合层。个人做起来还是比较吃力，<br>在实现任意层神经网络时BN层和LN层卡了很久，其实应该在实现BN层和LN层再来写相关代码，会顺畅很多。</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/21798784" target="_blank" rel="noopener">CS231n课程笔记翻译：神经网络笔记3（下）</a></li><li><a href="https://github.com/lightaime/cs231n" target="_blank" rel="noopener">lightaime/cs231n</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> CS231 Assignment </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deep Learning </tag>
            
            <tag> Assignment </tag>
            
            <tag> CS231n </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS231 Assignment 1 Q5-Feat</title>
      <link href="/2020/01/12/assignment-1-q5-feat/"/>
      <url>/2020/01/12/assignment-1-q5-feat/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>本文为斯坦福大学CS231n课程作业及总结，若有错误，欢迎指正。<br>所有代码均已上传到GitHub项目<a href="https://github.com/notplus/cs231n-assignment/tree/master/assignment1" target="_blank" rel="noopener">cs231n-assignment1</a></p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><h3 id="1-训练SVM分类器（多个学习率和正则化强度的准确率）"><a href="#1-训练SVM分类器（多个学习率和正则化强度的准确率）" class="headerlink" title="1. 训练SVM分类器（多个学习率和正则化强度的准确率）"></a>1. 训练SVM分类器（多个学习率和正则化强度的准确率）</h3><p><strong>实现思路:</strong>   </p><ul><li>多次循环计算即可</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">################################################################################</span><span class="token comment" spellcheck="true"># TODO:                                                                        #</span><span class="token comment" spellcheck="true"># Use the validation set to set the learning rate and regularization strength. #</span><span class="token comment" spellcheck="true"># This should be identical to the validation that you did for the SVM; save    #</span><span class="token comment" spellcheck="true"># the best trained classifer in best_svm. You might also want to play          #</span><span class="token comment" spellcheck="true"># with different numbers of bins in the color histogram. If you are careful    #</span><span class="token comment" spellcheck="true"># you should be able to get accuracy of near 0.44 on the validation set.       #</span><span class="token comment" spellcheck="true">################################################################################</span><span class="token comment" spellcheck="true"># *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>svm <span class="token operator">=</span> LinearSVM<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> learning_rate <span class="token keyword">in</span> learning_rates<span class="token punctuation">:</span>    <span class="token keyword">for</span> reg <span class="token keyword">in</span> regularization_strengths<span class="token punctuation">:</span>        loss_hist <span class="token operator">=</span> svm<span class="token punctuation">.</span>train<span class="token punctuation">(</span>X_train_feats<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> learning_rate<span class="token operator">=</span>learning_rate<span class="token punctuation">,</span> reg<span class="token operator">=</span>reg<span class="token punctuation">,</span>                      num_iters<span class="token operator">=</span><span class="token number">3000</span><span class="token punctuation">,</span> verbose<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        y_train_pred <span class="token operator">=</span> svm<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_train_feats<span class="token punctuation">)</span>        train_accuracy <span class="token operator">=</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>y_train <span class="token operator">==</span> y_train_pred<span class="token punctuation">)</span>        y_val_pred <span class="token operator">=</span>svm<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_val_feats<span class="token punctuation">)</span>        val_accuracy <span class="token operator">=</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>y_val <span class="token operator">==</span> y_val_pred<span class="token punctuation">)</span>        results<span class="token punctuation">[</span><span class="token punctuation">(</span>learning_rate<span class="token punctuation">,</span>reg<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>train_accuracy<span class="token punctuation">,</span>val_accuracy<span class="token punctuation">)</span>        <span class="token keyword">if</span> val_accuracy<span class="token operator">></span>best_val<span class="token punctuation">:</span>            best_val <span class="token operator">=</span> val_accuracy            best_svm <span class="token operator">=</span> svm<span class="token comment" spellcheck="true"># *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span></code></pre><h3 id="2-训练双层神经网络（参数自定）"><a href="#2-训练双层神经网络（参数自定）" class="headerlink" title="2.训练双层神经网络（参数自定）"></a>2.训练双层神经网络（参数自定）</h3><ul><li>实现思路：多个超参数多次循环进行训练，并计算val精度   </li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">################################################################################</span><span class="token comment" spellcheck="true"># TODO: Train a two-layer neural network on image features. You may want to    #</span><span class="token comment" spellcheck="true"># cross-validate various parameters as in previous sections. Store your best   #</span><span class="token comment" spellcheck="true"># model in the best_net variable.                                              #</span><span class="token comment" spellcheck="true">################################################################################</span><span class="token comment" spellcheck="true"># *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>learning_rates <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1e</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1e</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>regs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5e</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">]</span>num_iter <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">]</span>best_val <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> num_iters <span class="token keyword">in</span> num_iter<span class="token punctuation">:</span>    <span class="token keyword">for</span> learning_rate <span class="token keyword">in</span> learning_rates<span class="token punctuation">:</span>        <span class="token keyword">for</span> reg <span class="token keyword">in</span> regs<span class="token punctuation">:</span>            net<span class="token punctuation">.</span>train<span class="token punctuation">(</span>X_train_feats<span class="token punctuation">,</span>y_train<span class="token punctuation">,</span>X_val_feats<span class="token punctuation">,</span>y_val<span class="token punctuation">,</span>learning_rate<span class="token operator">=</span>learning_rate<span class="token punctuation">,</span>                learning_rate_decay<span class="token operator">=</span><span class="token number">0.95</span><span class="token punctuation">,</span>reg<span class="token operator">=</span>reg<span class="token punctuation">,</span>num_iters<span class="token operator">=</span>num_iters<span class="token punctuation">,</span>batch_size<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">,</span>verbose<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>            y_val_pred <span class="token operator">=</span> net<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_val_feats<span class="token punctuation">)</span>            val_acc <span class="token operator">=</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>y_val <span class="token operator">==</span> y_val_pred<span class="token punctuation">)</span>            <span class="token keyword">if</span> val_acc <span class="token operator">></span> best_val<span class="token punctuation">:</span>                best_val <span class="token operator">=</span> val_acc                best_net <span class="token operator">=</span> net                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Temp best validation accuracy:'</span><span class="token punctuation">,</span>val_acc<span class="token punctuation">,</span><span class="token string">'\t'</span><span class="token punctuation">,</span><span class="token string">'best hyper param: '</span><span class="token punctuation">,</span><span class="token punctuation">[</span>num_iter<span class="token punctuation">,</span>learning_rate<span class="token punctuation">,</span>reg<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span></code></pre><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>本次作业主要是体会特征改变带来的变化，本身难度并不高，与之前作业部分一致。  </p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/21462488" target="_blank" rel="noopener">CS231n课程笔记翻译：神经网络笔记1（上）</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> CS231 Assignment </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deep Learning </tag>
            
            <tag> Assignment </tag>
            
            <tag> CS231n </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS231 Assignment 1 Q4-NN</title>
      <link href="/2020/01/11/assignment-1-q4-nn/"/>
      <url>/2020/01/11/assignment-1-q4-nn/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>本文为斯坦福大学CS231n课程作业及总结，若有错误，欢迎指正。<br>所有代码均已上传到GitHub项目<a href="https://github.com/notplus/cs231n-assignment/tree/master/assignment1" target="_blank" rel="noopener">cs231n-assignment1</a></p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><h3 id="1-通过计算score-Loss和梯度"><a href="#1-通过计算score-Loss和梯度" class="headerlink" title="1. 通过计算score,Loss和梯度"></a>1. 通过计算score,Loss和梯度</h3><p><strong>实现思路:</strong> 该两层神经网络,可通过下图简要理解,注意反向传播的过程,梯度=上游*当前<br><img src="https://upload-images.jianshu.io/upload_images/2301760-f876d8918d8ab61a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2" alt="bp.jpg">    </p><p>$当j=i时$:<br>$\frac{\partial Loss}{\partial s_{j}}=-\frac{1}{a_{j}} \cdot a_{j} \cdot\left(1-a_{j}\right)=a_{i}-1$</p><p>$当j\neq i时$:<br>$\frac{\partial Loss}{\partial s_{j}}=-\frac{1}{a_{j}} \cdot-a_{j} \cdot a_{i}=a_{i}$    </p><p>$\frac{\partial Loss}{\partial W_{2}}= h \cdot \frac{\partial loss}{\partial s}$      </p><pre class=" language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">loss</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> X<span class="token punctuation">,</span> y<span class="token operator">=</span>None<span class="token punctuation">,</span> reg<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Compute the loss and gradients for a two layer fully connected neural        network.        Inputs:        - X: Input data of shape (N, D). Each X[i] is a training sample.        - y: Vector of training labels. y[i] is the label for X[i], and each y[i] is          an integer in the range 0 &lt;= y[i] &lt; C. This parameter is optional; if it          is not passed then we only return scores, and if it is passed then we          instead return the loss and gradients.        - reg: Regularization strength.        Returns:        If y is None, return a matrix scores of shape (N, C) where scores[i, c] is        the score for class c on input X[i].        If y is not None, instead return a tuple of:        - loss: Loss (data loss and regularization loss) for this batch of training          samples.        - grads: Dictionary mapping parameter names to gradients of those parameters          with respect to the loss function; has the same keys as self.params.        """</span>        <span class="token comment" spellcheck="true"># Unpack variables from the params dictionary</span>        W1<span class="token punctuation">,</span> b1 <span class="token operator">=</span> self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'W1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'b1'</span><span class="token punctuation">]</span>        W2<span class="token punctuation">,</span> b2 <span class="token operator">=</span> self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'W2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'b2'</span><span class="token punctuation">]</span>        N<span class="token punctuation">,</span> D <span class="token operator">=</span> X<span class="token punctuation">.</span>shape        <span class="token comment" spellcheck="true"># Compute the forward pass</span>        scores <span class="token operator">=</span> None        <span class="token comment" spellcheck="true">#############################################################################</span>        <span class="token comment" spellcheck="true"># TODO: Perform the forward pass, computing the class scores for the input. #</span>        <span class="token comment" spellcheck="true"># Store the result in the scores variable, which should be an array of      #</span>        <span class="token comment" spellcheck="true"># shape (N, C).                                                             #</span>        <span class="token comment" spellcheck="true">#############################################################################</span>        <span class="token comment" spellcheck="true"># *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>        h_output <span class="token operator">=</span> np<span class="token punctuation">.</span>maximum<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> X<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>W1<span class="token punctuation">)</span> <span class="token operator">+</span> b1<span class="token punctuation">)</span>        scores <span class="token operator">=</span> h_output<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>W2<span class="token punctuation">)</span> <span class="token operator">+</span> b2        <span class="token comment" spellcheck="true"># *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>        <span class="token comment" spellcheck="true"># If the targets are not given then jump out, we're done</span>        <span class="token keyword">if</span> y <span class="token keyword">is</span> None<span class="token punctuation">:</span>            <span class="token keyword">return</span> scores        <span class="token comment" spellcheck="true"># Compute the loss</span>        loss <span class="token operator">=</span> None        <span class="token comment" spellcheck="true">#############################################################################</span>        <span class="token comment" spellcheck="true"># TODO: Finish the forward pass, and compute the loss. This should include  #</span>        <span class="token comment" spellcheck="true"># both the data loss and L2 regularization for W1 and W2. Store the result  #</span>        <span class="token comment" spellcheck="true"># in the variable loss, which should be a scalar. Use the Softmax           #</span>        <span class="token comment" spellcheck="true"># classifier loss.                                                          #</span>        <span class="token comment" spellcheck="true">#############################################################################</span>        <span class="token comment" spellcheck="true"># *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>        shift_scores <span class="token operator">=</span> scores <span class="token operator">-</span> np<span class="token punctuation">.</span>max<span class="token punctuation">(</span>scores<span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>        softmax_output <span class="token operator">=</span> np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span>shift_scores<span class="token punctuation">)</span> <span class="token operator">/</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span>shift_scores<span class="token punctuation">)</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>        loss <span class="token operator">=</span> <span class="token operator">-</span>np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>np<span class="token punctuation">.</span>log<span class="token punctuation">(</span>softmax_output<span class="token punctuation">[</span>range<span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">,</span>list<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        loss <span class="token operator">=</span> loss <span class="token operator">/</span> N <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">*</span> reg <span class="token operator">*</span> <span class="token punctuation">(</span>np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>W1 <span class="token operator">*</span> W1<span class="token punctuation">)</span> <span class="token operator">+</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>W2 <span class="token operator">*</span> W2<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>        <span class="token comment" spellcheck="true"># Backward pass: compute gradients</span>        grads <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">#############################################################################</span>        <span class="token comment" spellcheck="true"># TODO: Compute the backward pass, computing the derivatives of the weights #</span>        <span class="token comment" spellcheck="true"># and biases. Store the results in the grads dictionary. For example,       #</span>        <span class="token comment" spellcheck="true"># grads['W1'] should store the gradient on W1, and be a matrix of same size #</span>        <span class="token comment" spellcheck="true">#############################################################################</span>        <span class="token comment" spellcheck="true"># *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>        dscores <span class="token operator">=</span> softmax_output<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>        dscores<span class="token punctuation">[</span>range<span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">,</span>list<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>        dscores <span class="token operator">/=</span> N        grads<span class="token punctuation">[</span><span class="token string">'W2'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>h_output<span class="token punctuation">.</span>T<span class="token punctuation">)</span><span class="token punctuation">.</span>dot<span class="token punctuation">(</span>dscores<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> reg <span class="token operator">*</span> W2        grads<span class="token punctuation">[</span><span class="token string">'b2'</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>dscores<span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>        dh <span class="token operator">=</span> dscores<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>W2<span class="token punctuation">.</span>T<span class="token punctuation">)</span>        dh_ReLU <span class="token operator">=</span> <span class="token punctuation">(</span>h_output <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> dh        grads<span class="token punctuation">[</span><span class="token string">'W1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> X<span class="token punctuation">.</span>T<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>dh_ReLU<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> reg <span class="token operator">*</span> W1        grads<span class="token punctuation">[</span><span class="token string">'b1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>dh_ReLU<span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>        <span class="token keyword">return</span> loss<span class="token punctuation">,</span> grads</code></pre><h3 id="2-完成train函数"><a href="#2-完成train函数" class="headerlink" title="2. 完成train函数"></a>2. 完成train函数</h3><p><strong>实现思路:</strong><br>通过np.random.choice随机选择batchsize大小样本用于计算loss和grad，更新权重</p><pre class=" language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">train</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> X_val<span class="token punctuation">,</span> y_val<span class="token punctuation">,</span>              learning_rate<span class="token operator">=</span><span class="token number">1e</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> learning_rate_decay<span class="token operator">=</span><span class="token number">0.95</span><span class="token punctuation">,</span>              reg<span class="token operator">=</span><span class="token number">5e</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">,</span> num_iters<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span>              batch_size<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">,</span> verbose<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Train this neural network using stochastic gradient descent.        Inputs:        - X: A numpy array of shape (N, D) giving training data.        - y: A numpy array f shape (N,) giving training labels; y[i] = c means that          X[i] has label c, where 0 &lt;= c &lt; C.        - X_val: A numpy array of shape (N_val, D) giving validation data.        - y_val: A numpy array of shape (N_val,) giving validation labels.        - learning_rate: Scalar giving learning rate for optimization.        - learning_rate_decay: Scalar giving factor used to decay the learning rate          after each epoch.        - reg: Scalar giving regularization strength.        - num_iters: Number of steps to take when optimizing.        - batch_size: Number of training examples to use per step.        - verbose: boolean; if true print progress during optimization.        """</span>        num_train <span class="token operator">=</span> X<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        iterations_per_epoch <span class="token operator">=</span> max<span class="token punctuation">(</span>num_train <span class="token operator">/</span> batch_size<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># Use SGD to optimize the parameters in self.model</span>        loss_history <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        train_acc_history <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        val_acc_history <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> it <span class="token keyword">in</span> range<span class="token punctuation">(</span>num_iters<span class="token punctuation">)</span><span class="token punctuation">:</span>            X_batch <span class="token operator">=</span> None            y_batch <span class="token operator">=</span> None            <span class="token comment" spellcheck="true">#########################################################################</span>            <span class="token comment" spellcheck="true"># TODO: Create a random minibatch of training data and labels, storing  #</span>            <span class="token comment" spellcheck="true"># them in X_batch and y_batch respectively.                             #</span>            <span class="token comment" spellcheck="true">#########################################################################</span>            <span class="token comment" spellcheck="true"># *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>            mask <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>num_train<span class="token punctuation">,</span>size<span class="token operator">=</span>batch_size<span class="token punctuation">,</span>replace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>            X_batch <span class="token operator">=</span> X<span class="token punctuation">[</span>mask<span class="token punctuation">]</span>            y_batch <span class="token operator">=</span> y<span class="token punctuation">[</span>mask<span class="token punctuation">]</span>            <span class="token comment" spellcheck="true"># *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>            <span class="token comment" spellcheck="true"># Compute loss and gradients using the current minibatch</span>            loss<span class="token punctuation">,</span> grads <span class="token operator">=</span> self<span class="token punctuation">.</span>loss<span class="token punctuation">(</span>X_batch<span class="token punctuation">,</span> y<span class="token operator">=</span>y_batch<span class="token punctuation">,</span> reg<span class="token operator">=</span>reg<span class="token punctuation">)</span>            loss_history<span class="token punctuation">.</span>append<span class="token punctuation">(</span>loss<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#########################################################################</span>            <span class="token comment" spellcheck="true"># TODO: Use the gradients in the grads dictionary to update the         #</span>            <span class="token comment" spellcheck="true"># parameters of the network (stored in the dictionary self.params)      #</span>            <span class="token comment" spellcheck="true"># using stochastic gradient descent. You'll need to use the gradients   #</span>            <span class="token comment" spellcheck="true"># stored in the grads dictionary defined above.                         #</span>            <span class="token comment" spellcheck="true">#########################################################################</span>            <span class="token comment" spellcheck="true"># *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>            self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'W1'</span><span class="token punctuation">]</span> <span class="token operator">-=</span> grads<span class="token punctuation">[</span><span class="token string">'W1'</span><span class="token punctuation">]</span> <span class="token operator">*</span> learning_rate            self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'W2'</span><span class="token punctuation">]</span> <span class="token operator">-=</span> grads<span class="token punctuation">[</span><span class="token string">'W2'</span><span class="token punctuation">]</span> <span class="token operator">*</span> learning_rate            self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'b1'</span><span class="token punctuation">]</span> <span class="token operator">-=</span> grads<span class="token punctuation">[</span><span class="token string">'b1'</span><span class="token punctuation">]</span> <span class="token operator">*</span> learning_rate            self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'b2'</span><span class="token punctuation">]</span> <span class="token operator">-=</span> grads<span class="token punctuation">[</span><span class="token string">'b2'</span><span class="token punctuation">]</span> <span class="token operator">*</span> learning_rate            <span class="token comment" spellcheck="true"># *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>            <span class="token keyword">if</span> verbose <span class="token operator">and</span> it <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'iteration %d / %d: loss %f'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>it<span class="token punctuation">,</span> num_iters<span class="token punctuation">,</span> loss<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># Every epoch, check train and val accuracy and decay learning rate.</span>            <span class="token keyword">if</span> it <span class="token operator">%</span> iterations_per_epoch <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># Check accuracy</span>                train_acc <span class="token operator">=</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_batch<span class="token punctuation">)</span> <span class="token operator">==</span> y_batch<span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>                val_acc <span class="token operator">=</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_val<span class="token punctuation">)</span> <span class="token operator">==</span> y_val<span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>                train_acc_history<span class="token punctuation">.</span>append<span class="token punctuation">(</span>train_acc<span class="token punctuation">)</span>                val_acc_history<span class="token punctuation">.</span>append<span class="token punctuation">(</span>val_acc<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># Decay learning rate</span>                learning_rate <span class="token operator">*=</span> learning_rate_decay        <span class="token keyword">return</span> <span class="token punctuation">{</span>          <span class="token string">'loss_history'</span><span class="token punctuation">:</span> loss_history<span class="token punctuation">,</span>          <span class="token string">'train_acc_history'</span><span class="token punctuation">:</span> train_acc_history<span class="token punctuation">,</span>          <span class="token string">'val_acc_history'</span><span class="token punctuation">:</span> val_acc_history<span class="token punctuation">,</span>        <span class="token punctuation">}</span></code></pre><h3 id="3-计算多个学习率和正则化强度的准确率"><a href="#3-计算多个学习率和正则化强度的准确率" class="headerlink" title="3. 计算多个学习率和正则化强度的准确率"></a>3. 计算多个学习率和正则化强度的准确率</h3><p><strong>实现思路:</strong>    </p><ul><li>多次循环计算即可</li></ul><pre class=" language-python"><code class="language-python">best_net <span class="token operator">=</span> None <span class="token comment" spellcheck="true"># store the best model into this </span><span class="token comment" spellcheck="true">#################################################################################</span><span class="token comment" spellcheck="true"># TODO: Tune hyperparameters using the validation set. Store your best trained  #</span><span class="token comment" spellcheck="true"># model in best_net.                                                            #</span><span class="token comment" spellcheck="true">#                                                                               #</span><span class="token comment" spellcheck="true"># To help debug your network, it may help to use visualizations similar to the  #</span><span class="token comment" spellcheck="true"># ones we used above; these visualizations will have significant qualitative    #</span><span class="token comment" spellcheck="true"># differences from the ones we saw above for the poorly tuned network.          #</span><span class="token comment" spellcheck="true">#                                                                               #</span><span class="token comment" spellcheck="true"># Tweaking hyperparameters by hand can be fun, but you might find it useful to  #</span><span class="token comment" spellcheck="true"># write code to sweep through possible combinations of hyperparameters          #</span><span class="token comment" spellcheck="true"># automatically like we did on the previous exercises.                          #</span><span class="token comment" spellcheck="true">#################################################################################</span><span class="token comment" spellcheck="true"># *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>input_size <span class="token operator">=</span> <span class="token number">32</span> <span class="token operator">*</span> <span class="token number">32</span> <span class="token operator">*</span> <span class="token number">3</span>hidden_sizes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">]</span>num_classes <span class="token operator">=</span> <span class="token number">10</span>num_iterss <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">,</span><span class="token number">3000</span><span class="token punctuation">]</span>learning_rates <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1e</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1e</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span>regs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0.25</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>best_acc <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>best_hyper_param <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Train the network</span><span class="token keyword">for</span> hidden_size <span class="token keyword">in</span> hidden_sizes<span class="token punctuation">:</span>    net <span class="token operator">=</span> TwoLayerNet<span class="token punctuation">(</span>input_size<span class="token punctuation">,</span> hidden_size<span class="token punctuation">,</span> num_classes<span class="token punctuation">)</span>    <span class="token keyword">for</span> num_iters <span class="token keyword">in</span> num_iterss<span class="token punctuation">:</span>        <span class="token keyword">for</span> learning_rate <span class="token keyword">in</span> learning_rates<span class="token punctuation">:</span>            <span class="token keyword">for</span> reg <span class="token keyword">in</span> regs<span class="token punctuation">:</span>                stats <span class="token operator">=</span> net<span class="token punctuation">.</span>train<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> X_val<span class="token punctuation">,</span> y_val<span class="token punctuation">,</span>                        num_iters<span class="token operator">=</span>num_iters<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">,</span>                        learning_rate<span class="token operator">=</span>learning_rate<span class="token punctuation">,</span> learning_rate_decay<span class="token operator">=</span><span class="token number">0.95</span><span class="token punctuation">,</span>                        reg<span class="token operator">=</span>reg<span class="token punctuation">,</span> verbose<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># Predict on the validation set</span>                val_acc <span class="token operator">=</span> <span class="token punctuation">(</span>net<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_val<span class="token punctuation">)</span> <span class="token operator">==</span> y_val<span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">#print('Validation accuracy:',val_acc,'\t',[hidden_size,num_iters,learning_rate,reg])</span>                <span class="token keyword">if</span> val_acc<span class="token operator">></span>best_acc<span class="token punctuation">:</span>                    best_acc <span class="token operator">=</span> val_acc                    best_net <span class="token operator">=</span> net                    best_hyper_param <span class="token operator">=</span> <span class="token punctuation">[</span>hidden_size<span class="token punctuation">,</span>num_iters<span class="token punctuation">,</span>learning_rate<span class="token punctuation">,</span>reg<span class="token punctuation">]</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Temp best validation accuracy:'</span><span class="token punctuation">,</span>val_acc<span class="token punctuation">,</span><span class="token string">'\t'</span><span class="token punctuation">,</span><span class="token string">'best hyper param: '</span><span class="token punctuation">,</span><span class="token punctuation">[</span>hidden_size<span class="token punctuation">,</span>num_iters<span class="token punctuation">,</span>learning_rate<span class="token punctuation">,</span>reg<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Validation accuracy:'</span><span class="token punctuation">,</span>best_acc<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Best hyper parm:'</span><span class="token punctuation">,</span>best_hyper_parm<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span></code></pre><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>本次作业主要是简单两层神经网络的实现，主要难点在于计算梯度，重点理解反向传播（BP算法）。   </p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/21407711" target="_blank" rel="noopener">CS231n课程笔记翻译：反向传播笔记</a></li><li><a href="https://github.com/lightaime/cs231n" target="_blank" rel="noopener">lightaime/cs231n</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> CS231 Assignment </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deep Learning </tag>
            
            <tag> Assignment </tag>
            
            <tag> CS231n </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS231 Assignment 1 Q3-Softmax</title>
      <link href="/2020/01/09/assignment-1-q3-softmax/"/>
      <url>/2020/01/09/assignment-1-q3-softmax/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>本文为斯坦福大学CS231n课程作业及总结，若有错误，欢迎指正。<br>所有代码均已上传到GitHub项目<a href="https://github.com/notplus/cs231n-assignment/tree/master/assignment1" target="_blank" rel="noopener">cs231n-assignment1</a></p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><h3 id="1-通过循环计算Loss和梯度"><a href="#1-通过循环计算Loss和梯度" class="headerlink" title="1. 通过循环计算Loss和梯度"></a>1. 通过循环计算Loss和梯度</h3><p><strong>实现思路:</strong> 与SVM类似,计算loss和grad,损失函数如下：<br>$L i=-\log \left(\frac{e^{f_{y_{i}}}}{\sum_{j} e^{f_{j}}}\right)$<br><img src="https://raw.githubusercontent.com/wuliutx/upload-pic/master/20200120223945.png" alt="20200120223945.png"></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">softmax_loss_naive</span><span class="token punctuation">(</span>W<span class="token punctuation">,</span> X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> reg<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Softmax loss function, naive implementation (with loops)    Inputs have dimension D, there are C classes, and we operate on minibatches    of N examples.    Inputs:    - W: A numpy array of shape (D, C) containing weights.    - X: A numpy array of shape (N, D) containing a minibatch of data.    - y: A numpy array of shape (N,) containing training labels; y[i] = c means      that X[i] has label c, where 0 &lt;= c &lt; C.    - reg: (float) regularization strength    Returns a tuple of:    - loss as single float    - gradient with respect to weights W; an array of same shape as W    """</span>    <span class="token comment" spellcheck="true"># Initialize the loss and gradient to zero.</span>    loss <span class="token operator">=</span> <span class="token number">0.0</span>    dW <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros_like<span class="token punctuation">(</span>W<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#############################################################################</span>    <span class="token comment" spellcheck="true"># TODO: Compute the softmax loss and its gradient using explicit loops.     #</span>    <span class="token comment" spellcheck="true"># Store the loss in loss and the gradient in dW. If you are not careful     #</span>    <span class="token comment" spellcheck="true"># here, it is easy to run into numeric instability. Don't forget the        #</span>    <span class="token comment" spellcheck="true"># regularization!                                                           #</span>    <span class="token comment" spellcheck="true">#############################################################################</span>    <span class="token comment" spellcheck="true"># *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>    num_train <span class="token operator">=</span> X<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    num_classes <span class="token operator">=</span> W<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>num_train<span class="token punctuation">)</span><span class="token punctuation">:</span>      scores <span class="token operator">=</span> X<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>dot<span class="token punctuation">(</span>W<span class="token punctuation">)</span>      shift_scores <span class="token operator">=</span> scores <span class="token operator">-</span> max<span class="token punctuation">(</span>scores<span class="token punctuation">)</span>      loss_i <span class="token operator">=</span> <span class="token operator">-</span> shift_scores<span class="token punctuation">[</span>y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> np<span class="token punctuation">.</span>log<span class="token punctuation">(</span>sum<span class="token punctuation">(</span>np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span>shift_scores<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      loss <span class="token operator">+=</span> loss_i      <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>num_classes<span class="token punctuation">)</span><span class="token punctuation">:</span>          softmax_output <span class="token operator">=</span> np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span>shift_scores<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span>sum<span class="token punctuation">(</span>np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span>shift_scores<span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token keyword">if</span> j <span class="token operator">==</span> y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>              dW<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">+</span> softmax_output<span class="token punctuation">)</span> <span class="token operator">*</span>X<span class="token punctuation">[</span>i<span class="token punctuation">]</span>          <span class="token keyword">else</span><span class="token punctuation">:</span>              dW<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> softmax_output <span class="token operator">*</span>X<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    loss <span class="token operator">/=</span> num_train    loss <span class="token operator">+=</span>  <span class="token number">0.5</span><span class="token operator">*</span> reg <span class="token operator">*</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>W <span class="token operator">*</span> W<span class="token punctuation">)</span>    dW <span class="token operator">=</span> dW<span class="token operator">/</span>num_train <span class="token operator">+</span> reg<span class="token operator">*</span> W    <span class="token comment" spellcheck="true"># *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>    <span class="token keyword">return</span> loss<span class="token punctuation">,</span> dW</code></pre><h3 id="2-实现svm-loss-vectorized-函数"><a href="#2-实现svm-loss-vectorized-函数" class="headerlink" title="2. 实现svm_loss_vectorized 函数"></a>2. 实现<code>svm_loss_vectorized</code> 函数</h3><p><strong>实现思路：</strong></p><ul><li>主要使用向量化解决，计算loss灵活应用整型访问和广播机制，计算grad灵活应用矩阵乘法，通过构造矩阵乘法免去累加和循环</li><li>灵活使用 <code>[range(num_train), list(y)]</code> </li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">softmax_loss_vectorized</span><span class="token punctuation">(</span>W<span class="token punctuation">,</span> X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> reg<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Softmax loss function, vectorized version.    Inputs and outputs are the same as softmax_loss_naive.    """</span>    <span class="token comment" spellcheck="true"># Initialize the loss and gradient to zero.</span>    loss <span class="token operator">=</span> <span class="token number">0.0</span>    dW <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros_like<span class="token punctuation">(</span>W<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#############################################################################</span>    <span class="token comment" spellcheck="true"># TODO: Compute the softmax loss and its gradient using no explicit loops.  #</span>    <span class="token comment" spellcheck="true"># Store the loss in loss and the gradient in dW. If you are not careful     #</span>    <span class="token comment" spellcheck="true"># here, it is easy to run into numeric instability. Don't forget the        #</span>    <span class="token comment" spellcheck="true"># regularization!                                                           #</span>    <span class="token comment" spellcheck="true">#############################################################################</span>    <span class="token comment" spellcheck="true"># *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>    num_train <span class="token operator">=</span> X<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    num_classes <span class="token operator">=</span> W<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    scores <span class="token operator">=</span> X<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>W<span class="token punctuation">)</span>    shift_scores <span class="token operator">=</span> scores <span class="token operator">-</span> np<span class="token punctuation">.</span>max<span class="token punctuation">(</span>scores<span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    softmax_output <span class="token operator">=</span> np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span>shift_scores<span class="token punctuation">)</span><span class="token operator">/</span>np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span>shift_scores<span class="token punctuation">)</span><span class="token punctuation">,</span> axis <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#loss = np.sum(-shift_scores[range(num_train),list(y)].reshape(-1,1) + np.log(np.sum(np.exp(shift_scores),axis=1).reshape(-1,1)))</span>    loss <span class="token operator">=</span> <span class="token operator">-</span>np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>np<span class="token punctuation">.</span>log<span class="token punctuation">(</span>softmax_output<span class="token punctuation">[</span>range<span class="token punctuation">(</span>num_train<span class="token punctuation">)</span><span class="token punctuation">,</span>list<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    loss <span class="token operator">=</span> loss <span class="token operator">/</span> num_train <span class="token operator">+</span> <span class="token number">0.5</span> <span class="token operator">*</span> reg <span class="token operator">*</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>W <span class="token operator">*</span> W<span class="token punctuation">)</span>    dS <span class="token operator">=</span> softmax_output<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>    dS<span class="token punctuation">[</span>range<span class="token punctuation">(</span>num_train<span class="token punctuation">)</span><span class="token punctuation">,</span>list<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">-=</span><span class="token number">1</span>    dW <span class="token operator">=</span> <span class="token punctuation">(</span>X<span class="token punctuation">.</span>T<span class="token punctuation">)</span><span class="token punctuation">.</span>dot<span class="token punctuation">(</span>dS<span class="token punctuation">)</span>    dW <span class="token operator">/=</span> num_train    dW <span class="token operator">+=</span> reg <span class="token operator">*</span> W    <span class="token comment" spellcheck="true"># *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>    <span class="token keyword">return</span> loss<span class="token punctuation">,</span> dW</code></pre><h3 id="3-计算多个学习率和正则化强度的准确率"><a href="#3-计算多个学习率和正则化强度的准确率" class="headerlink" title="3. 计算多个学习率和正则化强度的准确率"></a>3. 计算多个学习率和正则化强度的准确率</h3><p><strong>实现思路:</strong>   </p><ul><li>两次循环计算即可</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">################################################################################</span><span class="token comment" spellcheck="true"># TODO:                                                                        #</span><span class="token comment" spellcheck="true"># Use the validation set to set the learning rate and regularization strength. #</span><span class="token comment" spellcheck="true"># This should be identical to the validation that you did for the SVM; save    #</span><span class="token comment" spellcheck="true"># the best trained softmax classifer in best_softmax.                          #</span><span class="token comment" spellcheck="true">################################################################################</span><span class="token comment" spellcheck="true"># *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span><span class="token keyword">for</span> learning_rate <span class="token keyword">in</span> learning_rates<span class="token punctuation">:</span>    <span class="token keyword">for</span> regularization_strength <span class="token keyword">in</span> regularization_strengths<span class="token punctuation">:</span>        softmax <span class="token operator">=</span> Softmax<span class="token punctuation">(</span><span class="token punctuation">)</span>        loss <span class="token operator">=</span> softmax<span class="token punctuation">.</span>train<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> learning_rate<span class="token operator">=</span>learning_rate<span class="token punctuation">,</span> reg<span class="token operator">=</span>regularization_strength                             <span class="token punctuation">,</span> num_iters<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">,</span> verbose<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        y_train_pred <span class="token operator">=</span> softmax<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_train<span class="token punctuation">)</span>        train_accuracy <span class="token operator">=</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>y_train <span class="token operator">==</span> y_train_pred<span class="token punctuation">)</span>        y_val_pred <span class="token operator">=</span> softmax<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_val<span class="token punctuation">)</span>        val_accuracy <span class="token operator">=</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>y_val <span class="token operator">==</span> y_val_pred<span class="token punctuation">)</span>        results<span class="token punctuation">[</span><span class="token punctuation">(</span>learning_rate<span class="token punctuation">,</span>regularization_strength<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>train_accuracy<span class="token punctuation">,</span>val_accuracy<span class="token punctuation">)</span>        <span class="token keyword">if</span> val_accuracy <span class="token operator">></span> best_val<span class="token punctuation">:</span>            best_val <span class="token operator">=</span> val_accuracy            best_softmax <span class="token operator">=</span> softmax<span class="token comment" spellcheck="true"># *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span></code></pre><h3 id="4-多个学习率和正则化强度可视化结果"><a href="#4-多个学习率和正则化强度可视化结果" class="headerlink" title="4. 多个学习率和正则化强度可视化结果"></a>4. 多个学习率和正则化强度可视化结果</h3><p><img src="https://raw.githubusercontent.com/wuliutx/upload-pic/master/20200120224102.png" alt="20200120224102.png"></p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>本次作业主要是对于softmax的应用，总体与svm类似，主要难点在于梯度的推导与计算。<br>需要着重掌握numpy中数组的操作，灵活实现向量化运算。</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="http://cs231n.github.io/optimization-1/" target="_blank" rel="noopener">cs231n optimization</a></li><li><a href="https://zhuanlan.zhihu.com/p/21102293" target="_blank" rel="noopener">CS231n课程笔记翻译：线性分类笔记（下）</a></li><li><a href="https://www.cnblogs.com/shixiangwan/p/9285233.html" target="_blank" rel="noopener">Deep Learning基础–Softmax求导过程</a></li><li><a href="https://github.com/lightaime/cs231n" target="_blank" rel="noopener">lightaime/cs231n</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> CS231 Assignment </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deep Learning </tag>
            
            <tag> Assignment </tag>
            
            <tag> CS231n </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS231 Assignment 1 Q2-SVM</title>
      <link href="/2020/01/08/assignment-1-q2-svm/"/>
      <url>/2020/01/08/assignment-1-q2-svm/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>本文为斯坦福大学CS231n课程作业及总结，若有错误，欢迎指正。<br>所有代码均已上传到GitHub项目 [ cs231n-assignment1 ] ( <a href="https://github.com/notplus/cs231n-assignment/tree/master/assignment1" target="_blank" rel="noopener">https://github.com/notplus/cs231n-assignment/tree/master/assignment1</a> )</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><h3 id="1-通过循环计算Loss和梯度"><a href="#1-通过循环计算Loss和梯度" class="headerlink" title="1. 通过循环计算Loss和梯度"></a>1. 通过循环计算Loss和梯度</h3><p><strong>实现思路:</strong>  通过微分公式,计算梯度，只有 <code>margin</code> 中大于0的对梯度有贡献,公式如下：<br>$L_{i}=\ sum <em>{j \ neq  y</em>{i}}\ left [\ max  \ left (0, w_{j}^{T} x_{i}-w_{y_{i}}^{T} x_{i}+\ Delta \ right )\ right ]$   </p><p>$\ nabla <em>{w</em>{y_{i}}} L_{i}=-\ left (\ sum <em>{j \ neq  y</em>{i}} \ mathbb {1} \ left (w_{j}^{T} x_{i}-w_{y_{i}}^{T} x_{i}+\ Delta &gt;0\ right )\ right ) x_{i}$<br>其中 1 是一个示性函数，如果括号中的条件为真，那么函数值为1，如果为假，则函数值为0。</p><p>$\ nabla <em>{w</em>{j}} L_{i}=1\ left (w_{j}^{T} x_{i}-w_{y_{i}}^{T} x_{i}+\ Delta &gt;0\ right ) x_{i}$</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span>   svm_loss_naive <span class="token punctuation">(</span> W <span class="token punctuation">,</span>  X <span class="token punctuation">,</span>  y <span class="token punctuation">,</span>  reg <span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token triple-quoted-string string">"""    Structured SVM loss function, naive implementation (with loops).    Inputs have dimension D, there are C classes, and we operate on minibatches    of N examples.    Inputs:    - W: A numpy array of shape (D, C) containing weights.    - X: A numpy array of shape (N, D) containing a minibatch of data.    - y: A numpy array of shape (N,) containing training labels; y[i] = c means      that X[i] has label c, where 0 &lt;= c &lt; C.    - reg: (float) regularization strength    Returns a tuple of:    - loss as single float    - gradient with respect to weights W; an array of same shape as W    """</span>    dW  <span class="token operator">=</span>  np<span class="token punctuation">.</span> zeros <span class="token punctuation">(</span>W<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># initialize the gradient as zero</span>     <span class="token comment" spellcheck="true"># compute the loss and the gradient</span>    num_classes  <span class="token operator">=</span>  W<span class="token punctuation">.</span>shape<span class="token punctuation">[</span> <span class="token number">1</span> <span class="token punctuation">]</span>    num_train  <span class="token operator">=</span>  X<span class="token punctuation">.</span>shape<span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span>    loss  <span class="token operator">=</span>   <span class="token number">0.0</span>     <span class="token keyword">for</span>  i  <span class="token keyword">in</span>   range <span class="token punctuation">(</span>num_train<span class="token punctuation">)</span><span class="token punctuation">:</span>        scores  <span class="token operator">=</span>  X<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span> dot <span class="token punctuation">(</span>W<span class="token punctuation">)</span>        correct_class_score  <span class="token operator">=</span>  scores<span class="token punctuation">[</span>y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>         <span class="token keyword">for</span>  j  <span class="token keyword">in</span>   range <span class="token punctuation">(</span>num_classes<span class="token punctuation">)</span><span class="token punctuation">:</span>             <span class="token keyword">if</span>  j  <span class="token operator">==</span>  y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                 <span class="token keyword">continue</span>            margin  <span class="token operator">=</span>  scores<span class="token punctuation">[</span>j<span class="token punctuation">]</span>  <span class="token operator">-</span>  correct_class_score  <span class="token operator">+</span>   <span class="token number">1</span>     <span class="token comment" spellcheck="true"># note delta = 1</span>             <span class="token keyword">if</span>  margin  <span class="token operator">></span>   <span class="token number">0</span> <span class="token punctuation">:</span>                loss  <span class="token operator">+=</span>  margin                dW<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> j<span class="token punctuation">]</span>  <span class="token operator">+=</span>  X<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>T                dW<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>  <span class="token operator">+=</span>   <span class="token operator">-</span> X<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>T     <span class="token comment" spellcheck="true"># Right now the loss is a sum over all training examples, but we want it</span>     <span class="token comment" spellcheck="true"># to be an average instead so we divide by num_train.</span>    loss  <span class="token operator">/=</span>  num_train     <span class="token comment" spellcheck="true"># Add regularization to the loss.</span>    loss  <span class="token operator">+=</span>  reg  <span class="token operator">*</span>  np<span class="token punctuation">.</span> sum <span class="token punctuation">(</span>W  <span class="token operator">*</span>  W<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">#############################################################################</span>     <span class="token comment" spellcheck="true">#  TODO :                                                                     #</span>     <span class="token comment" spellcheck="true"># Compute the gradient of the loss function and store it dW.                #</span>     <span class="token comment" spellcheck="true"># Rather that first computing the loss and then computing the derivative,   #</span>     <span class="token comment" spellcheck="true"># it may be simpler to compute the derivative at the same time that the     #</span>     <span class="token comment" spellcheck="true"># loss is being computed. As a result you may need to modify some of the    #</span>     <span class="token comment" spellcheck="true"># code above to compute the gradient.                                       #</span>     <span class="token comment" spellcheck="true">#############################################################################</span>     <span class="token comment" spellcheck="true"># *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>    dW  <span class="token operator">/=</span>  num_train    dW  <span class="token operator">+=</span>  reg  <span class="token operator">*</span>  W     <span class="token comment" spellcheck="true"># *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>     <span class="token keyword">return</span>  loss<span class="token punctuation">,</span> dW</code></pre><h3 id="2-实现svm-loss-vectorized-函数"><a href="#2-实现svm-loss-vectorized-函数" class="headerlink" title="2. 实现svm_loss_vectorized 函数"></a>2. 实现<code>svm_loss_vectorized</code> 函数</h3><p><strong>实现思路：</strong>  </p><ul><li>主要使用向量化解决，计算loss灵活应用整型访问和广播机制，计算grad灵活应用矩阵乘法，通过构造矩阵乘法免去累加和循环</li><li>通过  <code>scores[range(num_train), list(y)].reshape(-1,1)</code> 生成(N, 1)大小的数组，即按顺序的N个训练样本的正确类别的得分  </li><li><code>coeff_mat[margins &gt; 0] = 1</code>    <code>coeff_mat[range(num_train), list(y)] = 0</code>    </li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span>   svm_loss_vectorized <span class="token punctuation">(</span> W <span class="token punctuation">,</span>  X <span class="token punctuation">,</span>  y <span class="token punctuation">,</span>  reg <span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token triple-quoted-string string">"""    Structured SVM loss function, vectorized implementation.    Inputs and outputs are the same as svm_loss_naive.    """</span>    loss  <span class="token operator">=</span>   <span class="token number">0.0</span>    dW  <span class="token operator">=</span>  np<span class="token punctuation">.</span> zeros <span class="token punctuation">(</span>W<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># initialize the gradient as zero</span>     <span class="token comment" spellcheck="true">#############################################################################</span>     <span class="token comment" spellcheck="true">#  TODO :                                                                     #</span>     <span class="token comment" spellcheck="true"># Implement a vectorized version of the structured SVM loss, storing the    #</span>     <span class="token comment" spellcheck="true"># result in loss.                                                           #</span>     <span class="token comment" spellcheck="true">#############################################################################</span>     <span class="token comment" spellcheck="true"># *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>    num_train  <span class="token operator">=</span>  X<span class="token punctuation">.</span>shape<span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span>    num_classes  <span class="token operator">=</span>  W<span class="token punctuation">.</span>shape<span class="token punctuation">[</span> <span class="token number">1</span> <span class="token punctuation">]</span>    scores  <span class="token operator">=</span>  X<span class="token punctuation">.</span> dot <span class="token punctuation">(</span>W<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># (N, C)</span>    correct_class_scores  <span class="token operator">=</span>  scores<span class="token punctuation">[</span> range <span class="token punctuation">(</span>num_train<span class="token punctuation">)</span><span class="token punctuation">,</span>  list <span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span> reshape <span class="token punctuation">(</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#(N, 1)</span>    margins  <span class="token operator">=</span>  np<span class="token punctuation">.</span> maximum <span class="token punctuation">(</span> <span class="token number">0</span> <span class="token punctuation">,</span> scores  <span class="token operator">-</span>  correct_class_scores  <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">)</span>    margins<span class="token punctuation">[</span> range <span class="token punctuation">(</span>num_train<span class="token punctuation">)</span><span class="token punctuation">,</span>  list <span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token operator">=</span>   <span class="token number">0</span>    loss  <span class="token operator">=</span>  np<span class="token punctuation">.</span> sum <span class="token punctuation">(</span>margins<span class="token punctuation">)</span>    loss  <span class="token operator">/=</span>  num_train    loss  <span class="token operator">+=</span>  reg  <span class="token operator">*</span>  np<span class="token punctuation">.</span> sum <span class="token punctuation">(</span>W  <span class="token operator">*</span>  W<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>     <span class="token comment" spellcheck="true">#############################################################################</span>     <span class="token comment" spellcheck="true">#  TODO :                                                                     #</span>     <span class="token comment" spellcheck="true"># Implement a vectorized version of the gradient for the structured SVM     #</span>     <span class="token comment" spellcheck="true"># loss, storing the result in dW.                                           #</span>     <span class="token comment" spellcheck="true">#                                                                           #</span>     <span class="token comment" spellcheck="true"># Hint: Instead of computing the gradient from scratch, it may be easier    #</span>     <span class="token comment" spellcheck="true"># to reuse some of the intermediate values that you used to compute the     #</span>     <span class="token comment" spellcheck="true"># loss.                                                                     #</span>     <span class="token comment" spellcheck="true">#############################################################################</span>     <span class="token comment" spellcheck="true"># *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>     <span class="token comment" spellcheck="true"># dw(D,C)  X(N,D)  margins(N,C)</span>    coeff_mat  <span class="token operator">=</span>  np<span class="token punctuation">.</span> zeros <span class="token punctuation">(</span><span class="token punctuation">(</span>num_train<span class="token punctuation">,</span> num_classes<span class="token punctuation">)</span><span class="token punctuation">)</span>    coeff_mat<span class="token punctuation">[</span>margins  <span class="token operator">></span>   <span class="token number">0</span> <span class="token punctuation">]</span>  <span class="token operator">=</span>   <span class="token number">1</span>    coeff_mat<span class="token punctuation">[</span> range <span class="token punctuation">(</span>num_train<span class="token punctuation">)</span><span class="token punctuation">,</span>  list <span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token operator">=</span>   <span class="token number">0</span>    coeff_mat<span class="token punctuation">[</span> range <span class="token punctuation">(</span>num_train<span class="token punctuation">)</span><span class="token punctuation">,</span>  list <span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token operator">=</span>   <span class="token operator">-</span> np<span class="token punctuation">.</span> sum <span class="token punctuation">(</span>coeff_mat<span class="token punctuation">,</span>  axis <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">)</span>    dW  <span class="token operator">=</span>  <span class="token punctuation">(</span>X<span class="token punctuation">.</span>T<span class="token punctuation">)</span><span class="token punctuation">.</span> dot <span class="token punctuation">(</span>coeff_mat<span class="token punctuation">)</span>    dW  <span class="token operator">/=</span>  num_train    dW  <span class="token operator">+=</span>  reg  <span class="token operator">*</span>  W     <span class="token comment" spellcheck="true"># *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>     <span class="token keyword">return</span>  loss<span class="token punctuation">,</span> dW</code></pre><h3 id="3-完成train函数"><a href="#3-完成train函数" class="headerlink" title="3. 完成train函数"></a>3. 完成train函数</h3><p><strong>实现思路:</strong><br>通过np.random.choice随机选择batchsize大小样本用于计算loss和grad，更新权重</p><pre class=" language-python"><code class="language-python">     <span class="token keyword">def</span>   train <span class="token punctuation">(</span> self <span class="token punctuation">,</span>  X <span class="token punctuation">,</span>  y <span class="token punctuation">,</span>  learning_rate <span class="token operator">=</span> <span class="token number">1e</span><span class="token operator">-</span><span class="token number">3</span> <span class="token punctuation">,</span>  reg <span class="token operator">=</span> <span class="token number">1e</span><span class="token operator">-</span><span class="token number">5</span> <span class="token punctuation">,</span>  num_iters <span class="token operator">=</span> <span class="token number">100</span> <span class="token punctuation">,</span>               batch_size <span class="token operator">=</span> <span class="token number">200</span> <span class="token punctuation">,</span>  verbose <span class="token operator">=</span> <span class="token boolean">False</span> <span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token triple-quoted-string string">"""        Train this linear classifier using stochastic gradient descent.        Inputs:        - X: A numpy array of shape (N, D) containing training data; there are N          training samples each of dimension D.        - y: A numpy array of shape (N,) containing training labels; y[i] = c          means that X[i] has label 0 &lt;= c &lt; C for C classes.        - learning_rate: (float) learning rate for optimization.        - reg: (float) regularization strength.        - num_iters: (integer) number of steps to take when optimizing        - batch_size: (integer) number of training examples to use at each step.        - verbose: (boolean) If true, print progress during optimization.        Outputs:        A list containing the value of the loss function at each training iteration.        """</span>        num_train<span class="token punctuation">,</span> dim  <span class="token operator">=</span>  X<span class="token punctuation">.</span>shape        num_classes  <span class="token operator">=</span>  np<span class="token punctuation">.</span> max <span class="token punctuation">(</span>y<span class="token punctuation">)</span>  <span class="token operator">+</span>   <span class="token number">1</span>   <span class="token comment" spellcheck="true"># assume y takes values 0...K-1 where K is number of classes</span>         <span class="token keyword">if</span>   self <span class="token punctuation">.</span>W  <span class="token keyword">is</span>   None <span class="token punctuation">:</span>             <span class="token comment" spellcheck="true"># lazily initialize W</span>             self <span class="token punctuation">.</span>W  <span class="token operator">=</span>   <span class="token number">0.001</span>   <span class="token operator">*</span>  np<span class="token punctuation">.</span>random<span class="token punctuation">.</span> randn <span class="token punctuation">(</span>dim<span class="token punctuation">,</span> num_classes<span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># Run stochastic gradient descent to optimize W</span>        loss_history  <span class="token operator">=</span>  <span class="token punctuation">[</span><span class="token punctuation">]</span>         <span class="token keyword">for</span>  it  <span class="token keyword">in</span>   range <span class="token punctuation">(</span>num_iters<span class="token punctuation">)</span><span class="token punctuation">:</span>            X_batch  <span class="token operator">=</span>   None            y_batch  <span class="token operator">=</span>   None             <span class="token comment" spellcheck="true">#########################################################################</span>             <span class="token comment" spellcheck="true">#  TODO :                                                                 #</span>             <span class="token comment" spellcheck="true"># Sample batch_size elements from the training data and their           #</span>             <span class="token comment" spellcheck="true"># corresponding labels to use in this round of gradient descent.        #</span>             <span class="token comment" spellcheck="true"># Store the data in X_batch and their corresponding labels in           #</span>             <span class="token comment" spellcheck="true"># y_batch; after sampling X_batch should have shape (batch_size, dim)   #</span>             <span class="token comment" spellcheck="true"># and y_batch should have shape (batch_size,)                           #</span>             <span class="token comment" spellcheck="true">#                                                                       #</span>             <span class="token comment" spellcheck="true"># Hint: Use np.random.choice to generate indices. Sampling with         #</span>             <span class="token comment" spellcheck="true"># replacement is faster than sampling without replacement.              #</span>             <span class="token comment" spellcheck="true">#########################################################################</span>             <span class="token comment" spellcheck="true"># *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>            mask  <span class="token operator">=</span>  np<span class="token punctuation">.</span>random<span class="token punctuation">.</span> choice <span class="token punctuation">(</span>num_train<span class="token punctuation">,</span> batch_size<span class="token punctuation">,</span>  replace <span class="token operator">=</span> <span class="token boolean">True</span> <span class="token punctuation">)</span>            X_batch  <span class="token operator">=</span>  X<span class="token punctuation">[</span>mask<span class="token punctuation">]</span>            y_batch  <span class="token operator">=</span>  y<span class="token punctuation">[</span>mask<span class="token punctuation">]</span>             <span class="token comment" spellcheck="true"># *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>             <span class="token comment" spellcheck="true"># evaluate loss and gradient</span>            loss<span class="token punctuation">,</span> grad  <span class="token operator">=</span>   self <span class="token punctuation">.</span> loss <span class="token punctuation">(</span>X_batch<span class="token punctuation">,</span> y_batch<span class="token punctuation">,</span> reg<span class="token punctuation">)</span>            loss_history<span class="token punctuation">.</span> append <span class="token punctuation">(</span>loss<span class="token punctuation">)</span>             <span class="token comment" spellcheck="true"># perform parameter update</span>             <span class="token comment" spellcheck="true">#########################################################################</span>             <span class="token comment" spellcheck="true">#  TODO :                                                                 #</span>             <span class="token comment" spellcheck="true"># Update the weights using the gradient and the learning rate.          #</span>             <span class="token comment" spellcheck="true">#########################################################################</span>             <span class="token comment" spellcheck="true"># *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>             self <span class="token punctuation">.</span>W  <span class="token operator">+=</span>   <span class="token operator">-</span> learning_rate  <span class="token operator">*</span>  grad             <span class="token comment" spellcheck="true"># *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>             <span class="token keyword">if</span>  verbose  <span class="token operator">and</span>  it  <span class="token operator">%</span>   <span class="token number">100</span>   <span class="token operator">==</span>   <span class="token number">0</span> <span class="token punctuation">:</span>                 <span class="token keyword">print</span> <span class="token punctuation">(</span> <span class="token string">'iteration  %d  /  %d : loss  %f '</span>   <span class="token operator">%</span>  <span class="token punctuation">(</span>it<span class="token punctuation">,</span> num_iters<span class="token punctuation">,</span> loss<span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token keyword">return</span>  loss_history</code></pre><h3 id="4-计算多个学习率和正则化强度的准确率"><a href="#4-计算多个学习率和正则化强度的准确率" class="headerlink" title="4. 计算多个学习率和正则化强度的准确率"></a>4. 计算多个学习率和正则化强度的准确率</h3><p><strong>实现思路:</strong>     </p><ul><li>两次循环计算即可</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">################################################################################</span><span class="token comment" spellcheck="true">#  TODO :                                                                        #</span><span class="token comment" spellcheck="true"># Write code that chooses the best hyperparameters by tuning on the validation #</span><span class="token comment" spellcheck="true"># set. For each combination of hyperparameters, train a linear SVM on the      #</span><span class="token comment" spellcheck="true"># training set, compute its accuracy on the training and validation sets, and  #</span><span class="token comment" spellcheck="true"># store these numbers in the results dictionary. In addition, store the best   #</span><span class="token comment" spellcheck="true"># validation accuracy in best_val and the LinearSVM object that achieves this  #</span><span class="token comment" spellcheck="true"># accuracy in best_svm.                                                        #</span><span class="token comment" spellcheck="true">#                                                                              #</span><span class="token comment" spellcheck="true"># Hint: You should use a small value for num_iters as you develop your         #</span><span class="token comment" spellcheck="true"># validation code so that the SVMs don't take much time to train; once you are #</span><span class="token comment" spellcheck="true"># confident that your validation code works, you should rerun the validation   #</span><span class="token comment" spellcheck="true"># code with a larger value for num_iters.                                      #</span><span class="token comment" spellcheck="true">################################################################################</span><span class="token comment" spellcheck="true"># *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>svm  <span class="token operator">=</span>   LinearSVM <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span>  learning_rate  <span class="token keyword">in</span>  learning_rates<span class="token punctuation">:</span>     <span class="token keyword">for</span>  reg  <span class="token keyword">in</span>  regularization_strengths<span class="token punctuation">:</span>        loss_hist  <span class="token operator">=</span>  svm<span class="token punctuation">.</span> train <span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span>  learning_rate <span class="token operator">=</span> learning_rate<span class="token punctuation">,</span>  reg <span class="token operator">=</span> reg<span class="token punctuation">,</span>                       num_iters <span class="token operator">=</span> <span class="token number">3000</span> <span class="token punctuation">,</span>  verbose <span class="token operator">=</span> <span class="token boolean">False</span> <span class="token punctuation">)</span>        y_train_pred  <span class="token operator">=</span>  svm<span class="token punctuation">.</span> predict <span class="token punctuation">(</span>X_train<span class="token punctuation">)</span>        train_accuracy  <span class="token operator">=</span>  np<span class="token punctuation">.</span> mean <span class="token punctuation">(</span>y_train  <span class="token operator">==</span>  y_train_pred<span class="token punctuation">)</span>        y_val_pred  <span class="token operator">=</span>  svm<span class="token punctuation">.</span> predict <span class="token punctuation">(</span>X_val<span class="token punctuation">)</span>        val_accuracy  <span class="token operator">=</span> np<span class="token punctuation">.</span> mean <span class="token punctuation">(</span>y_val  <span class="token operator">==</span>  y_val_pred<span class="token punctuation">)</span>         <span class="token keyword">if</span>  val_accuracy  <span class="token operator">></span>  best_val<span class="token punctuation">:</span>            best_val  <span class="token operator">=</span>  val_accuracy            best_svm  <span class="token operator">=</span>  svm        results<span class="token punctuation">[</span><span class="token punctuation">(</span>learning_rate<span class="token punctuation">,</span>reg<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>train_accuracy<span class="token punctuation">,</span>val_accuracy<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span></code></pre><h3 id="5-多个学习率和正则化强度可视化结果"><a href="#5-多个学习率和正则化强度可视化结果" class="headerlink" title="5. 多个学习率和正则化强度可视化结果"></a>5. 多个学习率和正则化强度可视化结果</h3><p><img src="https://raw.githubusercontent.com/wuliutx/upload-pic/master/1.jpg" alt="1"><br><img src="https://raw.githubusercontent.com/wuliutx/upload-pic/master/20200113205726.png" alt="2"></p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>本次作业主要是SVM线性分类器的实现，由于对于python及numpy模块的不熟悉，导致作业完成得很吃力，希望能够加强掌握。<br>需要着重掌握numpy中数组的操作，灵活实现向量化运算。</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="http://cs231n.github.io/optimization-1/" target="_blank" rel="noopener">cs231n optimization</a></li><li><a href="https://zhuanlan.zhihu.com/p/21360434" target="_blank" rel="noopener">CS231n课程笔记翻译：最优化笔记（上）</a></li><li><a href="https://zhuanlan.zhihu.com/p/21387326" target="_blank" rel="noopener">CS231n课程笔记翻译：最优化笔记（下）</a></li><li><a href="https://github.com/lightaime/cs231n" target="_blank" rel="noopener">lightaime/cs231n</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> CS231 Assignment </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deep Learning </tag>
            
            <tag> Assignment </tag>
            
            <tag> CS231n </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS231 Assignment 1 Q1-KNN</title>
      <link href="/2020/01/07/assignment-1-q1-knn/"/>
      <url>/2020/01/07/assignment-1-q1-knn/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>本文为斯坦福大学CS231n课程作业及总结，若有错误，欢迎指正。<br>所有代码均已上传到GitHub项目<a href="https://github.com/notplus/cs231n-assignment/tree/master/assignment1" target="_blank" rel="noopener">cs231n-assignment1</a></p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><h3 id="1-通过两层循环计算L2"><a href="#1-通过两层循环计算L2" class="headerlink" title="1. 通过两层循环计算L2"></a>1. 通过两层循环计算L2</h3><p><strong>实现思路:</strong> 对train和test数据切片，对应进行L2计算</p><pre class=" language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">compute_distances_two_loops</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> X<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Compute the distance between each test point in X and each training point        in self.X_train using a nested loop over both the training data and the        test data.        Inputs:        - X: A numpy array of shape (num_test, D) containing test data.        Returns:        - dists: A numpy array of shape (num_test, num_train) where dists[i, j]          is the Euclidean distance between the ith test point and the jth training          point.        """</span>        num_test <span class="token operator">=</span> X<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        num_train <span class="token operator">=</span> self<span class="token punctuation">.</span>X_train<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        dists <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>num_test<span class="token punctuation">,</span> num_train<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>num_test<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>num_train<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true">#####################################################################</span>                <span class="token comment" spellcheck="true"># TODO:                                                             #</span>                <span class="token comment" spellcheck="true"># Compute the l2 distance between the ith test point and the jth    #</span>                <span class="token comment" spellcheck="true"># training point, and store the result in dists[i, j]. You should   #</span>                <span class="token comment" spellcheck="true"># not use a loop over dimension, nor use np.linalg.norm().          #</span>                <span class="token comment" spellcheck="true">#####################################################################</span>                <span class="token comment" spellcheck="true"># *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>                slice_train<span class="token operator">=</span>self<span class="token punctuation">.</span>X_train<span class="token punctuation">[</span>j<span class="token punctuation">:</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span>                slice_test<span class="token operator">=</span>X<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span>                dists<span class="token punctuation">[</span>i<span class="token punctuation">,</span>j<span class="token punctuation">]</span><span class="token operator">=</span>np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>np<span class="token punctuation">.</span>power<span class="token punctuation">(</span>slice_train<span class="token operator">-</span>slice_test<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</span>        <span class="token keyword">return</span> dists</code></pre><h3 id="2-实现predict-labels-函数"><a href="#2-实现predict-labels-函数" class="headerlink" title="2. 实现predict_labels 函数"></a>2. 实现<code>predict_labels</code> 函数</h3><p><strong>实现思路：</strong> </p><ul><li>通过调用<code>npargsort</code>函数，实现对单层test数据L2的排序，输出结果是从小到大排序后的下标。</li><li>这句代码<code>closest_y = self.y_train[train_topK_index]</code>用到了整型数组访问语法，即取出<code>self.y_train</code>中以<code>train_topK_index</code>中包含的值为下标的内容。</li><li><code>y_pred[i]=Counter(closest_y).most_common(1)[0][0]</code>使用了Collections模块，函数返回一个TopN列表</li><li>也可使用<code>count = np.bincount(closest_y)</code>和<code>y_pred[i] = np.argmax(count)</code>来得到y_pred[i]，关于np.bincount可参考<a href="https://blog.csdn.net/xlinsist/article/details/51346523" target="_blank" rel="noopener">np.bitcount</a><pre class=" language-python"><code class="language-python">  <span class="token keyword">def</span> <span class="token function">predict_labels</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> dists<span class="token punctuation">,</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token string">""</span>"      Given a matrix of distances between test points <span class="token operator">and</span> training points<span class="token punctuation">,</span>      predict a label <span class="token keyword">for</span> each test point<span class="token punctuation">.</span></code></pre></li></ul><pre><code>    Inputs:    - dists: A numpy array of shape (num_test, num_train) where dists[i, j]      gives the distance betwen the ith test point and the jth training point.    Returns:    - y: A numpy array of shape (num_test,) containing predicted labels for the      test data, where y[i] is the predicted label for the test point X[i].    &quot;&quot;&quot;    num_test = dists.shape[0]    y_pred = np.zeros(num_test)    for i in range(num_test):        # A list of length k storing the labels of the k nearest neighbors to        # the ith test point.        closest_y = []        #########################################################################        # TODO:                                                                 #        # Use the distance matrix to find the k nearest neighbors of the ith    #        # testing point, and use self.y_train to find the labels of these       #        # neighbors. Store these labels in closest_y.                           #        # Hint: Look up the function numpy.argsort.                             #        #########################################################################        # *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****        index_array = np.argsort(dists[i, :])        train_topK_index = index_array[:k]        closest_y = self.y_train[train_topK_index]        # *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****        #########################################################################        # TODO:                                                                 #        # Now that you have found the labels of the k nearest neighbors, you    #        # need to find the most common label in the list closest_y of labels.   #        # Store this label in y_pred[i]. Break ties by choosing the smaller     #        # label.                                                                #        #########################################################################        # *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****        y_pred[i]=Counter(closest_y).most_common(1)[0][0]        #count = np.bincount(closest_y)        #y_pred[i] = np.argmax(count)        # *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****    return y_pred</code></pre><pre><code>### 3. 通过一层循环计算L2   **实现思路:**   直接对整个训练集图片操作，此时`self.X_train`的大小为5000×3072，而`X[i]`的大小为1×3072，两者相减会自动对`X[i]`进行广播，使其扩展到与`self.X_train`相同的大小。```python    def compute_distances_one_loop(self, X):        &quot;&quot;&quot;        Compute the distance between each test point in X and each training point        in self.X_train using a single loop over the test data.        Input / Output: Same as compute_distances_two_loops        &quot;&quot;&quot;        num_test = X.shape[0]        num_train = self.X_train.shape[0]        dists = np.zeros((num_test, num_train))        for i in range(num_test):            #######################################################################            # TODO:                                                               #            # Compute the l2 distance between the ith test point and all training #            # points, and store the result in dists[i, :].                        #            # Do not use np.linalg.norm().                                        #            #######################################################################            # *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****            dists[i, :]=np.sqrt(np.sum(np.power(X[i]-self.X_train,2),axis=1))            # *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****        return dists</code></pre><h3 id="4-不通过循环计算L2（矩阵与广播）"><a href="#4-不通过循环计算L2（矩阵与广播）" class="headerlink" title="4. 不通过循环计算L2（矩阵与广播）"></a>4. 不通过循环计算L2（矩阵与广播）</h3><p><strong>实现思路:</strong>    </p><ul><li>对L2计算公式拆成两个平方项和交叉项，交叉项利用矩阵乘法，平方项通过<code>np.sum</code>函数计算，最后利用广播机制相加</li><li>对于<code>test_square=np.sum(X**2,axis=1,keepdims=True)</code>，需要<code>keepdims=True</code>，保证<code>test_square.shape</code>为(500,1)使可以进行广播，否则<code>test_square.shpae</code>为(500,)，进行广播时会出错。<pre class=" language-python"><code class="language-python">  <span class="token keyword">def</span> <span class="token function">compute_distances_no_loops</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> X<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token string">""</span>"      Compute the distance between each test point <span class="token keyword">in</span> X <span class="token operator">and</span> each training point      <span class="token keyword">in</span> self<span class="token punctuation">.</span>X_train using no explicit loops<span class="token punctuation">.</span></code></pre></li></ul><pre><code>    Input / Output: Same as compute_distances_two_loops    &quot;&quot;&quot;    num_test = X.shape[0]    num_train = self.X_train.shape[0]    dists = np.zeros((num_test, num_train))    #########################################################################    # TODO:                                                                 #    # Compute the l2 distance between all test points and all training      #    # points without using any explicit loops, and store the result in      #    # dists.                                                                #    #                                                                       #    # You should implement this function using only basic array operations; #    # in particular you should not use functions from scipy,                #    # nor use np.linalg.norm().                                             #    #                                                                       #    # HINT: Try to formulate the l2 distance using matrix multiplication    #    #       and two broadcast sums.                                         #    #########################################################################    # *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****    cross=np.multiply(np.dot(X,self.X_train.T),-2)    train_square=np.sum(self.X_train**2,axis=1)    test_square=np.sum(X**2,axis=1,keepdims=True)    dists=np.add(dists,cross)    dists=np.add(dists,test_square)    dists=np.add(dists,train_square)    dists=np.sqrt(dists)    # *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****    return dists</code></pre><pre><code>### 5. 交叉验证**实现思路:**   * 使用`np.array_split`函数分割训练集及标签* 交叉验证原理参考：   &gt;交叉验证。有时候，训练集数量较小（因此验证集的数量更小），人们会使用一种被称为交叉验证的方法，这种方法更加复杂些。还是用刚才的例子，如果是交叉验证集，我们就不是取1000个图像，而是将训练集平均分成5份，其中4份用来训练，1份用来验证。然后我们循环着取其中4份来训练，其中1份来验证，最后取所有5次验证结果的平均值作为算法验证结果。   * 使用`np.concatenate`函数进行数组拼接，关于该函数用法可参考[文档](https://docs.scipy.org/doc/numpy/reference/generated/numpy.concatenate.html),`X_train_folds[:n]+X_train_folds[n+1:]`结果为list，对axis=0拼接```pythonnum_folds = 5k_choices = [1, 3, 5, 8, 10, 12, 15, 20, 50, 100]X_train_folds = []y_train_folds = []################################################################################# TODO:                                                                        ## Split up the training data into folds. After splitting, X_train_folds and    ## y_train_folds should each be lists of length num_folds, where                ## y_train_folds[i] is the label vector for the points in X_train_folds[i].     ## Hint: Look up the numpy array_split function.                                ################################################################################## *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****X_train_folds=np.array_split(X_train,num_folds)y_train_folds=np.array_split(y_train,num_folds)# *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****# A dictionary holding the accuracies for different values of k that we find# when running cross-validation. After running cross-validation,# k_to_accuracies[k] should be a list of length num_folds giving the different# accuracy values that we found when using that value of k.k_to_accuracies = {}################################################################################# TODO:                                                                        ## Perform k-fold cross validation to find the best value of k. For each        ## possible value of k, run the k-nearest-neighbor algorithm num_folds times,   ## where in each case you use all but one of the folds as training data and the ## last fold as a validation set. Store the accuracies for all fold and all     ## values of k in the k_to_accuracies dictionary.                               ################################################################################## *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****for k in k_choices:    each_acc=[]    for n in range(num_folds):        X_train_unit=np.concatenate((X_train_folds[:n]+X_train_folds[n+1:]),axis=0)        y_train_unit=np.concatenate((y_train_folds[:n]+y_train_folds[n+1:]),axis=0)        classifier.train(X_train_unit,y_train_unit)        dists=classifier.compute_distances_no_loops(X_train_folds[n])        Yval_predict=classifier.predict_labels(dists,k=k)        acc=np.mean(Yval_predict==y_train_folds[n])        each_acc+=[acc]    k_to_accuracies[k]=each_acc# *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****</code></pre><ul><li>交叉验证的结果如图，accuracy在k=10附近达到最大<br><img src="https://raw.githubusercontent.com/wuliutx/upload-pic/master/20200121132703.png" alt="20200121132703.png"></li></ul><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>本次作业主要是KNN分类器的实现，由于对于python及numpy模块的不熟悉，导致作业完成得很吃力，希望能够加强掌握。<br>这次作业也发现了做科学计算或者深度学习相关内容，处理数据时的效率问题，for循环的效率明显低于向量、矩阵运算（本次作业里的测试，for循环大概用时200-300s，向量、矩阵运算大概用时0.68s）尽管矩阵运算需要消耗大量内存资源，但还是时间宝贵嘛。当然，具体问题还需要具体分析。</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="http://cs231n.github.io/classification/" target="_blank" rel="noopener">cs231n classification</a></li><li><a href="https://zhuanlan.zhihu.com/p/20894041?refer=intelligentunit" target="_blank" rel="noopener">CS231n课程笔记翻译：图像分类笔记（上）</a></li><li><a href="https://zhuanlan.zhihu.com/p/20900216" target="_blank" rel="noopener">CS231n课程笔记翻译：图像分类笔记（下）</a></li><li><a href="https://zhuanlan.zhihu.com/p/20878530?refer=intelligentunit" target="_blank" rel="noopener">CS231n课程笔记翻译：Python Numpy教程</a></li><li><a href="https://www.jianshu.com/p/275eda2294ea" target="_blank" rel="noopener">CS231n课程作业（一）KNN分类器</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> CS231 Assignment </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deep Learning </tag>
            
            <tag> Assignment </tag>
            
            <tag> CS231n </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
